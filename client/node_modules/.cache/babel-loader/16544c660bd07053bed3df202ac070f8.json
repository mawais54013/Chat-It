{"ast":null,"code":"/**\n *  Check if a bin available\n * @function hasBin\n * @param {string} binName - Name of bin\n * @param {Object} [options={}]\n * @returns {Promise.<boolean>}\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/muhammadawais/Desktop/Chat-It/client/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/muhammadawais/Desktop/Chat-It/client/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar fs = require('fs');\n\nvar hasbinCB = require('hasbin');\n\nvar path = require('path');\n/** @lends hasBin */\n\n\nfunction hasBin(_x) {\n  return _hasBin.apply(this, arguments);\n}\n\nfunction _hasBin() {\n  _hasBin = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(binName) {\n    var options,\n        filename,\n        stat,\n        fileExists,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            filename = path.resolve(binName);\n            _context.next = 4;\n            return new Promise(function (resolve, reject) {\n              fs.stat(filename, function (err, state) {\n                return err ? reject(err) : resolve(state);\n              });\n            }).catch(function () {\n              return null;\n            });\n\n          case 4:\n            stat = _context.sent;\n            fileExists = stat && !stat.isDirectory();\n\n            if (!fileExists) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", true);\n\n          case 8:\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              return hasbinCB(binName, resolve);\n            }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _hasBin.apply(this, arguments);\n}\n\nmodule.exports = hasBin;","map":null,"metadata":{},"sourceType":"script"}