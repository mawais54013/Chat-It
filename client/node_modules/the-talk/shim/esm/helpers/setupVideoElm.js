/**
 * @function setupVideoElm
 */
'use strict';
/** @lends setupVideoElm */

import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

function setupVideoElm(_x) {
  return _setupVideoElm.apply(this, arguments);
}

function _setupVideoElm() {
  _setupVideoElm = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee2(video) {
    var options,
        _options$local,
        local,
        stream,
        _args2 = arguments;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
            _options$local = options.local, local = _options$local === void 0 ? false : _options$local, stream = options.stream;

            if (local) {
              video.setAttribute('muted', '');
            }

            video.setAttribute('playsinline', '');
            video.setAttribute('autoplay', '');
            video.setAttribute('controls', '');
            setTimeout(
            /*#__PURE__*/
            _asyncToGenerator(
            /*#__PURE__*/
            _regeneratorRuntime.mark(function _callee() {
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      video.removeAttribute('controls');
                      video.srcObject = stream;

                      if (!video.paused) {
                        _context.next = 10;
                        break;
                      }

                      _context.prev = 3;
                      _context.next = 6;
                      return video.play();

                    case 6:
                      _context.next = 10;
                      break;

                    case 8:
                      _context.prev = 8;
                      _context.t0 = _context["catch"](3);

                    case 10:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this, [[3, 8]]);
            })), 1);

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _setupVideoElm.apply(this, arguments);
}

export default setupVideoElm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwVmlkZW9FbG0uanMiXSwibmFtZXMiOlsic2V0dXBWaWRlb0VsbSIsInZpZGVvIiwib3B0aW9ucyIsImxvY2FsIiwic3RyZWFtIiwic2V0QXR0cmlidXRlIiwic2V0VGltZW91dCIsInJlbW92ZUF0dHJpYnV0ZSIsInNyY09iamVjdCIsInBhdXNlZCIsInBsYXkiXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFHQTtBQUVBOzs7OztTQUNlQSxhOzs7Ozs7OzJCQUFmLGtCQUE4QkMsS0FBOUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXFDQyxZQUFBQSxPQUFyQyw4REFBK0MsRUFBL0M7QUFBQSw2QkFDb0NBLE9BRHBDLENBQ1VDLEtBRFYsRUFDVUEsS0FEViwrQkFDa0IsS0FEbEIsbUJBQ3lCQyxNQUR6QixHQUNvQ0YsT0FEcEMsQ0FDeUJFLE1BRHpCOztBQUVFLGdCQUFJRCxLQUFKLEVBQVc7QUFDVEYsY0FBQUEsS0FBSyxDQUFDSSxZQUFOLENBQW1CLE9BQW5CLEVBQTRCLEVBQTVCO0FBQ0Q7O0FBQ0RKLFlBQUFBLEtBQUssQ0FBQ0ksWUFBTixDQUFtQixhQUFuQixFQUFrQyxFQUFsQztBQUNBSixZQUFBQSxLQUFLLENBQUNJLFlBQU4sQ0FBbUIsVUFBbkIsRUFBK0IsRUFBL0I7QUFDQUosWUFBQUEsS0FBSyxDQUFDSSxZQUFOLENBQW1CLFVBQW5CLEVBQStCLEVBQS9CO0FBQ0FDLFlBQUFBLFVBQVU7QUFBQTtBQUFBO0FBQUE7QUFBQSxxQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1RMLHNCQUFBQSxLQUFLLENBQUNNLGVBQU4sQ0FBc0IsVUFBdEI7QUFDQU4sc0JBQUFBLEtBQUssQ0FBQ08sU0FBTixHQUFrQkosTUFBbEI7O0FBRlMsMkJBR0xILEtBQUssQ0FBQ1EsTUFIRDtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUEsNkJBS0NSLEtBQUssQ0FBQ1MsSUFBTixFQUxEOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFBRCxJQVVQLENBVk8sQ0FBVjs7QUFSRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHOzs7O0FBcUJBLGVBQWVWLGFBQWYiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZnVuY3Rpb24gc2V0dXBWaWRlb0VsbVxuICovXG4ndXNlIHN0cmljdCdcblxuLyoqIEBsZW5kcyBzZXR1cFZpZGVvRWxtICovXG5hc3luYyBmdW5jdGlvbiBzZXR1cFZpZGVvRWxtICh2aWRlbywgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHsgbG9jYWwgPSBmYWxzZSwgc3RyZWFtIH0gPSBvcHRpb25zXG4gIGlmIChsb2NhbCkge1xuICAgIHZpZGVvLnNldEF0dHJpYnV0ZSgnbXV0ZWQnLCAnJylcbiAgfVxuICB2aWRlby5zZXRBdHRyaWJ1dGUoJ3BsYXlzaW5saW5lJywgJycpXG4gIHZpZGVvLnNldEF0dHJpYnV0ZSgnYXV0b3BsYXknLCAnJylcbiAgdmlkZW8uc2V0QXR0cmlidXRlKCdjb250cm9scycsICcnKVxuICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICB2aWRlby5yZW1vdmVBdHRyaWJ1dGUoJ2NvbnRyb2xzJylcbiAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW1cbiAgICBpZiAodmlkZW8ucGF1c2VkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB2aWRlby5wbGF5KClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgfVxuICAgIH1cbiAgfSwgMSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0dXBWaWRlb0VsbVxuIl19