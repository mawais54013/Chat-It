/**
 *  Check if a bin available
 * @function hasBin
 * @param {string} binName - Name of bin
 * @param {Object} [options={}]
 * @returns {Promise.<boolean>}
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var fs = require('fs');

var hasbinCB = require('hasbin');

var path = require('path');
/** @lends hasBin */


function hasBin(_x) {
  return _hasBin.apply(this, arguments);
}

function _hasBin() {
  _hasBin = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(binName) {
    var options,
        filename,
        stat,
        fileExists,
        _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            filename = path.resolve(binName);
            _context.next = 4;
            return new Promise(function (resolve, reject) {
              fs.stat(filename, function (err, state) {
                return err ? reject(err) : resolve(state);
              });
            }).catch(function () {
              return null;
            });

          case 4:
            stat = _context.sent;
            fileExists = stat && !stat.isDirectory();

            if (!fileExists) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", true);

          case 8:
            return _context.abrupt("return", new Promise(function (resolve) {
              return hasbinCB(binName, resolve);
            }));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _hasBin.apply(this, arguments);
}

module.exports = hasBin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhc0Jpbi5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJoYXNiaW5DQiIsInBhdGgiLCJoYXNCaW4iLCJiaW5OYW1lIiwib3B0aW9ucyIsImZpbGVuYW1lIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0IiwiZXJyIiwic3RhdGUiLCJjYXRjaCIsImZpbGVFeGlzdHMiLCJpc0RpcmVjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBT0E7Ozs7Ozs7O0FBRUEsSUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQXhCOztBQUNBLElBQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7QUFFQTs7O1NBQ2VHLE07Ozs7Ozs7NEJBQWYsaUJBQXNCQyxPQUF0QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUErQkMsWUFBQUEsT0FBL0IsMkRBQXlDLEVBQXpDO0FBRVVDLFlBQUFBLFFBRlYsR0FFcUJKLElBQUksQ0FBQ0ssT0FBTCxDQUFhSCxPQUFiLENBRnJCO0FBQUE7QUFBQSxtQkFHdUIsSUFBSUksT0FBSixDQUFZLFVBQUNELE9BQUQsRUFBVUUsTUFBVixFQUFxQjtBQUNsRFYsY0FBQUEsRUFBRSxDQUFDVyxJQUFILENBQVFKLFFBQVIsRUFBa0IsVUFBQ0ssR0FBRCxFQUFNQyxLQUFOO0FBQUEsdUJBQWlCRCxHQUFHLEdBQUdGLE1BQU0sQ0FBQ0UsR0FBRCxDQUFULEdBQWlCSixPQUFPLENBQUNLLEtBQUQsQ0FBNUM7QUFBQSxlQUFsQjtBQUNELGFBRmtCLEVBRWhCQyxLQUZnQixDQUVWO0FBQUEscUJBQU0sSUFBTjtBQUFBLGFBRlUsQ0FIdkI7O0FBQUE7QUFHVUgsWUFBQUEsSUFIVjtBQU1VSSxZQUFBQSxVQU5WLEdBTXVCSixJQUFJLElBQUksQ0FBQ0EsSUFBSSxDQUFDSyxXQUFMLEVBTmhDOztBQUFBLGlCQU9RRCxVQVBSO0FBQUE7QUFBQTtBQUFBOztBQUFBLDZDQVFhLElBUmI7O0FBQUE7QUFBQSw2Q0FXUyxJQUFJTixPQUFKLENBQVksVUFBQ0QsT0FBRDtBQUFBLHFCQUFhTixRQUFRLENBQUNHLE9BQUQsRUFBVUcsT0FBVixDQUFyQjtBQUFBLGFBQVosQ0FYVDs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHOzs7O0FBY0FTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmQsTUFBakIiLCJzb3VyY2VSb290IjoiLi4vbGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ2hlY2sgaWYgYSBiaW4gYXZhaWxhYmxlXG4gKiBAZnVuY3Rpb24gaGFzQmluXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluTmFtZSAtIE5hbWUgb2YgYmluXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48Ym9vbGVhbj59XG4gKi9cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJylcbmNvbnN0IGhhc2JpbkNCID0gcmVxdWlyZSgnaGFzYmluJylcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxuLyoqIEBsZW5kcyBoYXNCaW4gKi9cbmFzeW5jIGZ1bmN0aW9uIGhhc0JpbihiaW5OYW1lLCBvcHRpb25zID0ge30pIHtcbiAge1xuICAgIGNvbnN0IGZpbGVuYW1lID0gcGF0aC5yZXNvbHZlKGJpbk5hbWUpXG4gICAgY29uc3Qgc3RhdCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZzLnN0YXQoZmlsZW5hbWUsIChlcnIsIHN0YXRlKSA9PiAoZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHN0YXRlKSkpXG4gICAgfSkuY2F0Y2goKCkgPT4gbnVsbClcbiAgICBjb25zdCBmaWxlRXhpc3RzID0gc3RhdCAmJiAhc3RhdC5pc0RpcmVjdG9yeSgpXG4gICAgaWYgKGZpbGVFeGlzdHMpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gaGFzYmluQ0IoYmluTmFtZSwgcmVzb2x2ZSkpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzQmluXG4iXX0=