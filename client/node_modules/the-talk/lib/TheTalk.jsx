'use strict'

import { cleanup } from 'asobj'
import c from 'classnames'
import PropTypes from 'prop-types'
import React from 'react'
import { TheButton } from 'the-button'
import { isProduction } from 'the-check'
import { changedProps, eventHandlersFor, htmlAttributesFor, newId } from 'the-component-util'
import { TheIcon } from 'the-icon'
import { TheSpin } from 'the-spin'
import { get } from 'the-window'
import setupVideoElm from './helpers/setupVideoElm'
import TheTalkStyle from './TheTalkStyle'

const cssAmount = (v) => typeof v === 'number' ? v + 'px' : v

/**
 * Talking via webrtc
 */
class TheTalk extends React.Component {
  static DisabledIcon ({ present }) {
    if (!present) {
      return null
    }
    return (
      <TheIcon className={c('the-talk-disabled-icon', TheTalk.DISABLED_ICON)}/>
    )
  }

  static LocalClient ({
                        client,
                        id,
                        onAudioToggle,
                        onVideoToggle,
                        renderClient,
                        videoHeight,
                      }) {
    if (!client) {
      return null
    }
    const {
      audioEnabled,
      videoEnabled,
    } = client
    const content = renderClient(client)
    return (
      <div className='the-talk-local'
           id={id}
      >
        <video autoPlay
               className='the-talk-video'
               muted
               playsInline
               style={{ height: videoHeight }}
        />
        {content && <div className='the-talk-content'>{content}</div>}
        <div className={c('the-talk-actions', {})}>
          <TheButton className={c('the-talk-toggle', {
            'the-talk-toggle-disabled': !audioEnabled,
          })}
                     icon={TheTalk.AUDIO_ICON}
                     onClick={onAudioToggle}
          >
            <TheTalk.DisabledIcon present={!audioEnabled}/>
          </TheButton>
          <TheButton className={c('the-talk-toggle', {
            'the-talk-toggle-disabled': !videoEnabled,
          })}
                     icon={TheTalk.VIDEO_ICON}
                     onClick={onVideoToggle}
          >
            <TheTalk.DisabledIcon present={!videoEnabled}/>
          </TheButton>
        </div>
      </div>
    )
  }

  static RemoteClient ({ client, id, renderClient, videoHeight }) {
    if (!client) {
      return null
    }
    const content = renderClient(client)
    return (
      <div className='the-talk-remote'
           id={id}
      >
        <video autoPlay
               className='the-talk-video'
               playsInline
               style={{ height: videoHeight }}
        />
        {content && <div className='the-talk-content'>{content}</div>}
      </div>
    )
  }

  constructor (props) {
    super(props)
    this.handleAudioToggle = this.handleAudioToggle.bind(this)
    this.handleVideoToggle = this.handleVideoToggle.bind(this)
    this.elmRef = React.createRef()
    this._id = newId()
  }

  get id () {
    return this.props.id || this._id
  }

  get localClientElmId () {
    return `${this.id}-local`
  }

  componentDidMount () {
  }

  componentDidUpdate (prevProps) {
    const diff = changedProps(prevProps, this.props)
    if ('localClient' in diff) {
      void this.receiveLocalClient(diff.localClient)
    }
    if ('remoteClients' in diff) {
      void this.receiveRemoteClients(diff.remoteClients)
    }
  }

  componentWillUnmount () {
  }

  handleAudioToggle () {
    const {
      props: { localClient, onToggleAudio },
    } = this
    const { audioEnabled } = localClient || {}
    onToggleAudio && onToggleAudio(!audioEnabled)
  }

  handleVideoToggle () {
    const {
      props: { localClient, onToggleVideo },
    } = this
    const { videoEnabled } = localClient || {}
    onToggleVideo && onToggleVideo(!videoEnabled)
  }

  remoteClientElmIdFor (rid) {
    return `${this.id}-remote-${rid}`
  }

  render () {
    const { props } = this
    const {
      children,
      className,
      localClient,
      localVideoHeight,
      remoteClients,
      remoteVideoHeight,
      renderLocalClient,
      renderRemoteClient,
      spinning,
    } = props
    return (
      <div {...htmlAttributesFor(props, { except: ['className'] })}
           {...eventHandlersFor(props, { except: [] })}
           className={c('the-talk', className, {
             'the-talk-ready': !!localClient,
           })}
           id={this.id}
           ref={this.elmRef}
      >

        {
          spinning && <TheSpin cover enabled/>
        }
        <div className='the-talk-video-remote-container'
        >
          {
            Object.entries(remoteClients).map(([rid, client]) => (
              <TheTalk.RemoteClient client={client}
                                    id={this.remoteClientElmIdFor(rid)}
                                    key={rid}
                                    renderClient={renderRemoteClient}
                                    videoHeight={cssAmount(remoteVideoHeight)}/>
            ))
          }
        </div>

        <div className='the-talk-video-local-container'
        >
          <TheTalk.LocalClient client={localClient}
                               id={this.localClientElmId}
                               onAudioToggle={this.handleAudioToggle}
                               onVideoToggle={this.handleVideoToggle}
                               renderClient={renderLocalClient}
                               videoHeight={cssAmount(localVideoHeight)}
          />
        </div>

        {children}
      </div>
    )
  }

  async receiveLocalClient (localClient) {
    const document = get('document')
    const clientElm = document.getElementById(this.localClientElmId)
    if (!clientElm) {
      console.warn('[TheTalk] local clientElm not ready')
      return
    }
    const videoElm = clientElm.querySelector('video')
    await setupVideoElm(videoElm, {
      local: true,
      stream: localClient.stream,
    })
  }

  async receiveRemoteClients (remoteClients) {
    const document = get('document')
    for (const [rid, client] of Object.entries(remoteClients)) {
      const clientElm = document.getElementById(this.remoteClientElmIdFor(rid))
      if (!clientElm) {
        console.warn('[TheTalk] remote clientElm not ready')
        return
      }
      const videoElm = clientElm.querySelector('video')
      await setupVideoElm(videoElm, {
        local: false,
        stream: client.stream,
      })
    }
  }
}

TheTalk.AUDIO_ICON = 'fas fa-microphone'
TheTalk.VIDEO_ICON = 'fas fa-video'
TheTalk.DISABLED_ICON = 'fas fa-ban'

TheTalk.Style = TheTalkStyle

TheTalk.propTypes = {
  /** Handle video */
  localClient: PropTypes.object,
  onVideo: PropTypes.func,
  remoteClients: PropTypes.objectOf(PropTypes.object),
  renderLocalClient: PropTypes.func,
  renderRemoteClient: PropTypes.func,
  /** Height of video */
  videoHeight: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
  ]),
}

TheTalk.defaultProps = {
  localClient: null,
  localVideoHeight: 100,
  remoteClients: {},
  remoteVideoHeight: 200,
  renderLocalClient: () => null,
  renderRemoteClient: () => null,
}

TheTalk.displayName = 'TheTalk'

export default TheTalk
