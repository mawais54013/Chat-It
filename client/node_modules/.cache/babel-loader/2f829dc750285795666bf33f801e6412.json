{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Liowebrtc from 'liowebrtc';\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Context = React.createContext();\n\nfunction withWebRTC(Component) {\n  return function ContextComponent(props) {\n    return React.createElement(Context.Consumer, null, function (webrtc) {\n      return React.createElement(Component, _extends({}, props, {\n        webrtc: webrtc\n      }));\n    });\n  };\n}\n\nvar LioWebRTC = function (_React$Component) {\n  inherits(LioWebRTC, _React$Component);\n\n  function LioWebRTC(props) {\n    classCallCheck(this, LioWebRTC);\n\n    var _this = possibleConstructorReturn(this, (LioWebRTC.__proto__ || Object.getPrototypeOf(LioWebRTC)).call(this, props));\n\n    _this.disconnect = function () {\n      try {\n        _this.webrtc.stopLocalVideo();\n\n        _this.webrtc.leaveRoom();\n\n        _this.webrtc.disconnect();\n      } catch (e) {// console.log(e);\n      }\n    };\n\n    _this.webrtc = new Liowebrtc(props.options);\n    return _this;\n  }\n\n  createClass(LioWebRTC, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          onReady = _props.onReady,\n          onReceivedPeerData = _props.onReceivedPeerData,\n          onChannelOpen = _props.onChannelOpen,\n          onConnectionReady = _props.onConnectionReady,\n          onCreatedPeer = _props.onCreatedPeer,\n          onPeerStreamAdded = _props.onPeerStreamAdded,\n          onPeerStreamRemoved = _props.onPeerStreamRemoved,\n          onRemovedPeer = _props.onRemovedPeer,\n          onIceConnectionStateChange = _props.onIceConnectionStateChange,\n          onSignalingStateChange = _props.onSignalingStateChange,\n          onLeftRoom = _props.onLeftRoom,\n          onJoinedRoom = _props.onJoinedRoom,\n          onPeerMute = _props.onPeerMute,\n          onReceivedSignalData = _props.onReceivedSignalData,\n          onPeerUnmute = _props.onPeerUnmute,\n          onConnectionError = _props.onConnectionError;\n      onReceivedPeerData && this.webrtc.on('receivedPeerData', function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        onReceivedPeerData.apply(undefined, [this].concat(args));\n      });\n      onReady && this.webrtc.on('ready', function () {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        onReady.apply(undefined, [this].concat(args));\n      });\n      onChannelOpen && this.webrtc.on('channelOpen', function () {\n        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        onChannelOpen.apply(undefined, [this].concat(args));\n      });\n      onConnectionReady && this.webrtc.on('connectionReady', function () {\n        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        onConnectionReady.apply(undefined, [this].concat(args));\n      });\n      onCreatedPeer && this.webrtc.on('createdPeer', function () {\n        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        onCreatedPeer.apply(undefined, [this].concat(args));\n      });\n      onPeerStreamRemoved && this.webrtc.on('peerStreamRemoved', function () {\n        for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        onPeerStreamRemoved.apply(undefined, [this].concat(args));\n      });\n      onIceConnectionStateChange && this.webrtc.on('iceConnectionStateChange', function () {\n        for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          args[_key7] = arguments[_key7];\n        }\n\n        onIceConnectionStateChange.apply(undefined, [this].concat(args));\n      });\n      onSignalingStateChange && this.webrtc.on('signalingStateChange', function () {\n        for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n          args[_key8] = arguments[_key8];\n        }\n\n        onSignalingStateChange.apply(undefined, [this].concat(args));\n      });\n      onLeftRoom && this.webrtc.on('leftRoom', function () {\n        for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n          args[_key9] = arguments[_key9];\n        }\n\n        onLeftRoom.apply(undefined, [this].concat(args));\n      });\n      onJoinedRoom && this.webrtc.on('joinedRoom', function () {\n        for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n          args[_key10] = arguments[_key10];\n        }\n\n        onJoinedRoom.apply(undefined, [this].concat(args));\n      });\n      onPeerMute && this.webrtc.on('mute', function () {\n        for (var _len11 = arguments.length, args = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n          args[_key11] = arguments[_key11];\n        }\n\n        onPeerMute.apply(undefined, [this].concat(args));\n      });\n      onPeerUnmute && this.webrtc.on('unmute', function () {\n        for (var _len12 = arguments.length, args = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n          args[_key12] = arguments[_key12];\n        }\n\n        onPeerUnmute.apply(undefined, [this].concat(args));\n      });\n      onReceivedSignalData && this.webrtc.on('receivedSignalData', function () {\n        for (var _len13 = arguments.length, args = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n          args[_key13] = arguments[_key13];\n        }\n\n        onReceivedSignalData.apply(undefined, [this].concat(args));\n      });\n      onPeerStreamAdded && this.webrtc.on('peerStreamAdded', function () {\n        for (var _len14 = arguments.length, args = Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n          args[_key14] = arguments[_key14];\n        }\n\n        onPeerStreamAdded.apply(undefined, [this].concat(args));\n      });\n      onRemovedPeer && this.webrtc.on('removedPeer', function () {\n        for (var _len15 = arguments.length, args = Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n          args[_key15] = arguments[_key15];\n        }\n\n        onRemovedPeer.apply(undefined, [this].concat(args));\n      });\n      onConnectionError && this.webrtc.on('connectivityError', function () {\n        for (var _len16 = arguments.length, args = Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n          args[_key16] = arguments[_key16];\n        }\n\n        onConnectionError.apply(undefined, [this].concat(args));\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.disconnect();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', null, React.createElement(Context.Provider, {\n        value: this.webrtc\n      }, this.props.children));\n    }\n  }]);\n  return LioWebRTC;\n}(React.Component);\n\nLioWebRTC.propTypes = {\n  options: PropTypes.object,\n  onReady: PropTypes.func,\n  onJoinedRoom: PropTypes.func,\n  onChannelOpen: PropTypes.func,\n  onReceivedPeerData: PropTypes.func,\n  onConnectionReady: PropTypes.func,\n  onCreatedPeer: PropTypes.func,\n  onPeerStreamRemoved: PropTypes.func,\n  onIceConnectionStateChange: PropTypes.func,\n  onSignalingStateChange: PropTypes.func,\n  onLeftRoom: PropTypes.func,\n  onPeerMute: PropTypes.func,\n  onReceivedSignalData: PropTypes.func,\n  onPeerUnmute: PropTypes.func,\n  onPeerStreamAdded: PropTypes.func,\n  onRemovedPeer: PropTypes.func,\n  onConnectionError: PropTypes.func\n};\nLioWebRTC.defaultProps = {\n  options: {\n    dataOnly: true,\n    debug: false\n  }\n};\n\nvar LocalVideo = function (_React$Component) {\n  inherits(LocalVideo, _React$Component);\n\n  function LocalVideo() {\n    classCallCheck(this, LocalVideo);\n    return possibleConstructorReturn(this, (LocalVideo.__proto__ || Object.getPrototypeOf(LocalVideo)).apply(this, arguments));\n  }\n\n  createClass(LocalVideo, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.props.webrtc.setLocalVideo(this.localVid);\n      this.props.webrtc.startLocalVideo();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement('video', _extends({}, this.props.videoProps, {\n        id: 'localVideo',\n        ref: function ref(vid) {\n          _this2.localVid = vid;\n        }\n      }));\n    }\n  }]);\n  return LocalVideo;\n}(React.Component);\n\nLocalVideo.propTypes = {\n  videoProps: PropTypes.object\n};\nvar index = withWebRTC(LocalVideo);\n\nvar RemoteVideo = function (_React$Component) {\n  inherits(RemoteVideo, _React$Component);\n\n  function RemoteVideo() {\n    classCallCheck(this, RemoteVideo);\n    return possibleConstructorReturn(this, (RemoteVideo.__proto__ || Object.getPrototypeOf(RemoteVideo)).apply(this, arguments));\n  }\n\n  createClass(RemoteVideo, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.webrtc.on('peerStreamAdded', function (stream, peer) {\n        if (peer.id === _this2.props.peer.id) {\n          _this2.props.webrtc.attachStream(stream, _this2.remoteVid);\n        }\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement('video', _extends({}, this.props.videoProps, {\n        id: this.props.webrtc.getDomId(this.props.peer),\n        ref: function ref(vid) {\n          _this3.remoteVid = vid;\n        }\n      }));\n    }\n  }]);\n  return RemoteVideo;\n}(React.Component);\n\nRemoteVideo.propTypes = {\n  videoProps: PropTypes.object,\n  peer: PropTypes.any.isRequired\n};\nvar index$1 = withWebRTC(RemoteVideo);\nexport { LioWebRTC, withWebRTC, index as LocalVideo, index$1 as RemoteVideo };","map":null,"metadata":{},"sourceType":"module"}