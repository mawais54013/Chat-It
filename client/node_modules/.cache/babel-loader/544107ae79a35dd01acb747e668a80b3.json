{"ast":null,"code":"// import React, { Component } from \"react\";\n// import { Controlled as CodeMirror } from \"react-codemirror2\";\n// import Pusher from \"pusher-js\";\n// import pushid from \"pushid\";\n// import axios from \"axios\";\n// // import io from 'socket.io-client'\n// // import \"./App.css\";\n// import \"codemirror/lib/codemirror.css\";\n// import \"codemirror/theme/material.css\";\n// import \"codemirror/mode/htmlmixed/htmlmixed\";\n// import \"codemirror/mode/css/css\";\n// import \"codemirror/mode/javascript/javascript\";\n// class CodingPage extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       html: \"\",\n//       js: \"\",\n//     };\n//   }\n//   componentDidUpdate() {\n//     this.runCode();\n//   }\n//   syncUpdates = () => {\n//     const data = { ...this.state };    \n//   };\n//   runCode = () => {\n//     const { html, js } = this.state;\n//     const iframe = this.refs.iframe;\n//     const document = iframe.contentDocument;\n//     const documentContents = `\n//       <!DOCTYPE html>\n//       <html lang=\"en\">\n//       <head>\n//         <meta charset=\"UTF-8\">\n//         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//         <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n//         <title>Document</title>\n//       </head>\n//       <body>\n//         ${html}\n//         <script type=\"text/javascript\">\n//           ${js}\n//         </script>\n//       </body>\n//       </html>\n//     `;\n//     document.open();\n//     document.write(documentContents);\n//     document.close();\n//   };\n//   render() {\n//     console.log(this.state.key1)\n//     const { html, js } = this.state;\n//     const codeMirrorOptions = {\n//       theme: \"material\",\n//       lineNumbers: true,\n//       scrollbarStyle: null,\n//       lineWrapping: true\n//     };\n//     return (\n//       <div className=\"App\">\n//         <section className=\"playground\">\n//           <div className=\"code-editor html-code\">\n//             <div className=\"editor-header\">HTML</div>\n//             <CodeMirror\n//               value={html}\n//               options={{\n//                 mode: \"htmlmixed\",\n//                 ...codeMirrorOptions\n//               }}\n//               onBeforeChange={(editor, data, html) => {\n//                 this.setState({ html }, () => this.syncUpdates());\n//               }}\n//             />\n//           </div>\n//           <div className=\"code-editor js-code\">\n//             <div className=\"editor-header\">JavaScript</div>\n//             <CodeMirror\n//               value={js}\n//               options={{\n//                 mode: \"javascript\",\n//                 ...codeMirrorOptions\n//               }}\n//               onBeforeChange={(editor, data, js) => {\n//                 this.setState({ js }, () => this.syncUpdates());\n//               }}\n//             />\n//           </div>\n//         </section>\n//         <section className=\"result\">\n//           <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n//         </section>\n//       </div>\n//     );\n//   }\n// }\n// export default CodingPage;\n// import React from \"react\";\n// import Header from \"../Components/header\";\n// import { database } from \"firebase\";\n// import CodeMirror from \"react-codemirror\";\n// import \"./coding.css\";\n// require(\"codemirror/lib/codemirror.css\");\n// require(\"codemirror/mode/htmlmixed/htmlmixed\");\n// require(\"codemirror/mode/javascript/javascript\");\n// require(\"codemirror/theme/dracula.css\");\n// export default class CodingPage extends React.Component {\n//   // constructor() {\n//   //   // super();\n//   //   this.state = {\n//   //     html: '',\n//   //     css: '',\n//   //   };\n//   // }\n//   // constructor() {\n//   // super();\n//   // this.\n//   state = {\n//     html: '',\n//     code: \"Loading...\",\n//     code1: `<h1 id='demo'></h1>`,\n//     cursorPosition: {\n//       line: 0,\n//       ch: 0\n//     }\n//   };\n// // }\n//   componentDidMount = () => {\n//     const { params } = this.props.match;\n//     let self = this;\n//     database()\n//       .ref(\"/code-sessions/\" + params.sessionid)\n//       .once(\"value\")\n//       .then(snapshot => {\n//         self.setState({ code: snapshot.val().content + \"\", createdon: snapshot.val().createdon }, () => {\n//           let content = snapshot.val().content;\n//           self.codemirror.getCodeMirror().setValue(content);\n//         });\n//         this.codeRef = database().ref(\"code-sessions/\" + params.sessionid);\n//         this.codeRef.on(\"value\", function(snapshot) {\n//           self.setState({\n//             code: snapshot.val().content\n//           });\n//           var currentCursorPos = self.state.cursorPosition;\n//           self.codemirror.getCodeMirror().setValue(snapshot.val().content);\n//           self.setState({ cursorPosition: currentCursorPos });\n//           self.changeCursorPos();\n//         });\n//       })\n//       .catch(e => {\n//         self.codemirror.getCodeMirror().setValue(\"No Sessions Found!\");\n//       });\n//   };\n//   changeCursorPos = () => {\n//     const { line, ch } = this.state.cursorPosition;\n//     this.codemirror.getCodeMirror().doc.setCursor(line, ch);\n//   };\n//   onChange = (newVal, change) => {\n//     // console.log(newVal, change);\n//     this.setState(\n//       {\n//         cursorPosition: {\n//           line: this.codemirror.getCodeMirror().doc.getCursor().line,\n//           ch: this.codemirror.getCodeMirror().doc.getCursor().ch\n//         }\n//       },\n//       () => {}\n//     );\n//     this.codeRef.child(\"content\").set(newVal);\n//   };\n// componentDidUpdate() {\n//   this.runCode();\n// }\n// syncUpdates = () => {\n//   const data = { ...this.state }; \n// };\n// runCode = () => {\n//   const { html, code1 } = this.state;\n//   const iframe = this.refs.iframe;\n//   const document = iframe.contentDocument;\n//   const documentContents = `\n//     <!DOCTYPE html>\n//     <html lang=\"en\">\n//     <head>\n//       <meta charset=\"UTF-8\">\n//       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//       <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n//       <title>Document</title>\n//     </head>\n//     <body>\n//       ${code1}\n//       <script type=\"text/javascript\">\n//         ${html}\n//       </script>\n//     </body>\n//     </html>\n//   `;\n//   document.open();\n//   document.write(documentContents);\n//   document.close();\n// };\n//   render() {\n//     const { html } = this.state;\n//     return (\n//       <React.Fragment>\n//         <Header\n//           style={{ background: \"#1d1f27\" }}\n//           extras={\n//             <div>\n//               {this.state.createdon\n//                 ? `Created On: ${this.state.createdon}`\n//                 : \"\"}\n//             </div>\n//           }\n//         />\n//         <div className=\"coding-page\">\n//         <div className=\"codeArea\">\n//           <CodeMirror\n//             ref={r => (this.codemirror = r)}\n//             className=\"code-mirror-container\"\n//             value={this.state.code}\n//             // value={js}\n//             onChange={this.onChange}\n//             options={{\n//               theme: \"dracula\",\n//               lineNumbers: true,\n//               readOnly: false,\n//               mode: \"javascript\"\n//             }}\n//             onBeforeChange={(editor, data, js) => {\n//               this.setState({ js }, () => this.syncUpdates());\n//             }}\n//           />\n//           </div>\n//           <div>\n//           <CodeMirror\n//             // value={this.state.code1}\n//             value={html}\n//             options={{\n//               mode: 'htmlmixed',\n//               theme: 'dracula',\n//               lineNumbers: true,\n//               readOnly: false,\n//             }}\n//               onBeforeChange={(editor, data, html) => {\n//                 this.setState({ html }, () => this.syncUpdates());\n//               }}\n//           />\n//           </div>\n//         <section className=\"result\" id=\"iframe\">\n//           <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n//         </section>\n//         </div>\n//       </React.Fragment>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/muhammadawais/Desktop/Chat-It/client/src/pages/Coding.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from \"react\";\n// import { Controlled as CodeMirror } from \"react-codemirror2\";\n// import Pusher from \"pusher-js\";\n// import pushid from \"pushid\";\n// import axios from \"axios\";\n// // import io from 'socket.io-client'\n\n// // import \"./App.css\";\n// import \"codemirror/lib/codemirror.css\";\n// import \"codemirror/theme/material.css\";\n\n// import \"codemirror/mode/htmlmixed/htmlmixed\";\n// import \"codemirror/mode/css/css\";\n// import \"codemirror/mode/javascript/javascript\";\n\n\n// class CodingPage extends Component {\n//   constructor() {\n\n\n//     super();\n//     this.state = {\n//       html: \"\",\n//       js: \"\",\n//     };\n//   }\n\n//   componentDidUpdate() {\n//     this.runCode();\n//   }\n\n//   syncUpdates = () => {\n//     const data = { ...this.state };    \n//   };\n\n//   runCode = () => {\n//     const { html, js } = this.state;\n\n//     const iframe = this.refs.iframe;\n//     const document = iframe.contentDocument;\n//     const documentContents = `\n//       <!DOCTYPE html>\n//       <html lang=\"en\">\n//       <head>\n//         <meta charset=\"UTF-8\">\n//         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//         <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n//         <title>Document</title>\n//       </head>\n//       <body>\n//         ${html}\n\n//         <script type=\"text/javascript\">\n//           ${js}\n//         </script>\n//       </body>\n//       </html>\n//     `;\n\n//     document.open();\n//     document.write(documentContents);\n//     document.close();\n//   };\n\n//   render() {\n\n//     console.log(this.state.key1)\n//     const { html, js } = this.state;\n//     const codeMirrorOptions = {\n//       theme: \"material\",\n//       lineNumbers: true,\n//       scrollbarStyle: null,\n//       lineWrapping: true\n//     };\n\n//     return (\n//       <div className=\"App\">\n//         <section className=\"playground\">\n//           <div className=\"code-editor html-code\">\n//             <div className=\"editor-header\">HTML</div>\n//             <CodeMirror\n//               value={html}\n//               options={{\n//                 mode: \"htmlmixed\",\n//                 ...codeMirrorOptions\n//               }}\n//               onBeforeChange={(editor, data, html) => {\n//                 this.setState({ html }, () => this.syncUpdates());\n//               }}\n//             />\n//           </div>\n//           <div className=\"code-editor js-code\">\n//             <div className=\"editor-header\">JavaScript</div>\n//             <CodeMirror\n//               value={js}\n//               options={{\n//                 mode: \"javascript\",\n//                 ...codeMirrorOptions\n//               }}\n//               onBeforeChange={(editor, data, js) => {\n//                 this.setState({ js }, () => this.syncUpdates());\n//               }}\n//             />\n//           </div>\n//         </section>\n//         <section className=\"result\">\n//           <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n//         </section>\n//       </div>\n//     );\n//   }\n// }\n\n// export default CodingPage;\n\n\n    \n// import React from \"react\";\n// import Header from \"../Components/header\";\n// import { database } from \"firebase\";\n// import CodeMirror from \"react-codemirror\";\n// import \"./coding.css\";\n\n// require(\"codemirror/lib/codemirror.css\");\n// require(\"codemirror/mode/htmlmixed/htmlmixed\");\n// require(\"codemirror/mode/javascript/javascript\");\n// require(\"codemirror/theme/dracula.css\");\n\n// export default class CodingPage extends React.Component {\n//   // constructor() {\n//   //   // super();\n//   //   this.state = {\n//   //     html: '',\n//   //     css: '',\n//   //   };\n//   // }\n//   // constructor() {\n\n//   // super();\n//   // this.\n//   state = {\n//     html: '',\n//     code: \"Loading...\",\n//     code1: `<h1 id='demo'></h1>`,\n//     cursorPosition: {\n//       line: 0,\n//       ch: 0\n//     }\n//   };\n// // }\n//   componentDidMount = () => {\n\n//     const { params } = this.props.match;\n//     let self = this;\n//     database()\n//       .ref(\"/code-sessions/\" + params.sessionid)\n//       .once(\"value\")\n//       .then(snapshot => {\n//         self.setState({ code: snapshot.val().content + \"\", createdon: snapshot.val().createdon }, () => {\n//           let content = snapshot.val().content;\n\n//           self.codemirror.getCodeMirror().setValue(content);\n//         });\n//         this.codeRef = database().ref(\"code-sessions/\" + params.sessionid);\n//         this.codeRef.on(\"value\", function(snapshot) {\n//           self.setState({\n//             code: snapshot.val().content\n//           });\n//           var currentCursorPos = self.state.cursorPosition;\n//           self.codemirror.getCodeMirror().setValue(snapshot.val().content);\n//           self.setState({ cursorPosition: currentCursorPos });\n//           self.changeCursorPos();\n//         });\n//       })\n//       .catch(e => {\n//         self.codemirror.getCodeMirror().setValue(\"No Sessions Found!\");\n//       });\n//   };\n//   changeCursorPos = () => {\n//     const { line, ch } = this.state.cursorPosition;\n//     this.codemirror.getCodeMirror().doc.setCursor(line, ch);\n//   };\n//   onChange = (newVal, change) => {\n//     // console.log(newVal, change);\n//     this.setState(\n//       {\n//         cursorPosition: {\n//           line: this.codemirror.getCodeMirror().doc.getCursor().line,\n//           ch: this.codemirror.getCodeMirror().doc.getCursor().ch\n//         }\n//       },\n//       () => {}\n//     );\n//     this.codeRef.child(\"content\").set(newVal);\n//   };\n\n// componentDidUpdate() {\n//   this.runCode();\n// }\n\n// syncUpdates = () => {\n//   const data = { ...this.state }; \n// };\n\n// runCode = () => {\n//   const { html, code1 } = this.state;\n\n//   const iframe = this.refs.iframe;\n//   const document = iframe.contentDocument;\n//   const documentContents = `\n//     <!DOCTYPE html>\n//     <html lang=\"en\">\n//     <head>\n//       <meta charset=\"UTF-8\">\n//       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//       <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n//       <title>Document</title>\n//     </head>\n//     <body>\n//       ${code1}\n\n//       <script type=\"text/javascript\">\n//         ${html}\n//       </script>\n//     </body>\n//     </html>\n//   `;\n\n//   document.open();\n//   document.write(documentContents);\n//   document.close();\n// };\n\n//   render() {\n//     const { html } = this.state;\n\n//     return (\n//       <React.Fragment>\n//         <Header\n//           style={{ background: \"#1d1f27\" }}\n//           extras={\n//             <div>\n//               {this.state.createdon\n//                 ? `Created On: ${this.state.createdon}`\n//                 : \"\"}\n//             </div>\n//           }\n//         />\n//         <div className=\"coding-page\">\n//         <div className=\"codeArea\">\n//           <CodeMirror\n//             ref={r => (this.codemirror = r)}\n//             className=\"code-mirror-container\"\n//             value={this.state.code}\n//             // value={js}\n//             onChange={this.onChange}\n//             options={{\n//               theme: \"dracula\",\n//               lineNumbers: true,\n//               readOnly: false,\n//               mode: \"javascript\"\n//             }}\n//             onBeforeChange={(editor, data, js) => {\n//               this.setState({ js }, () => this.syncUpdates());\n//             }}\n//           />\n//           </div>\n//           <div>\n//           <CodeMirror\n//             // value={this.state.code1}\n//             value={html}\n//             options={{\n//               mode: 'htmlmixed',\n//               theme: 'dracula',\n//               lineNumbers: true,\n//               readOnly: false,\n//             }}\n//               onBeforeChange={(editor, data, html) => {\n//                 this.setState({ html }, () => this.syncUpdates());\n//               }}\n//           />\n//           </div>\n//         <section className=\"result\" id=\"iframe\">\n//           <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n//         </section>\n//         </div>\n//       </React.Fragment>\n//     );\n//   }\n\n// }"]},"metadata":{},"sourceType":"module"}