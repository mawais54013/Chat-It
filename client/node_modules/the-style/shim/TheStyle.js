'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _classnames = _interopRequireDefault(require("classnames"));

var _os = require("os");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _theComponentConstants = require("the-component-constants");

var _theStyleUtil = require("the-style-util");

/**
 * Style of the-components
 */
var TheStyle =
/*#__PURE__*/
function (_React$PureComponent) {
  (0, _inherits2.default)(TheStyle, _React$PureComponent);

  function TheStyle() {
    (0, _classCallCheck2.default)(this, TheStyle);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TheStyle).apply(this, arguments));
  }

  (0, _createClass2.default)(TheStyle, [{
    key: "getChildrenAsString",
    value: function getChildrenAsString() {
      var children = this.props.children;

      if (!children) {
        return null;
      }

      return [].concat(children).map(function (child) {
        return child;
      }).join(_os.EOL);
    }
  }, {
    key: "getInnerHTML",
    value: function getInnerHTML() {
      return [this.getStylesAsString(), this.getChildrenAsString()].filter(Boolean).join(_os.EOL);
    }
  }, {
    key: "getStylesAsString",
    value: function getStylesAsString() {
      var _this$props = this.props,
          prefix = _this$props.prefix,
          styles = _this$props.styles;

      if (!styles) {
        return null;
      }

      return Object.keys(styles).map(function (selector) {
        return (0, _theStyleUtil.styleString)([prefix, selector].filter(Boolean).join(' '), styles[selector]);
      }).filter(Boolean).join(_os.EOL);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className,
          id = props.id,
          type = props.type;
      return _react.default.createElement("style", (0, _extends2.default)({
        className: (0, _classnames.default)('the-style', className)
      }, {
        id: id,
        type: type
      }, {
        dangerouslySetInnerHTML: {
          __html: this.getInnerHTML()
        }
      }));
    }
  }], [{
    key: "styles",
    value: function styles(values) {
      return Object(values);
    }
    /** @deprecated */

  }, {
    key: "styleString",
    value: function styleString() {
      console.warn("[TheStyle] TheStyle.styleString is now deprecated");
      return _theStyleUtil.styleString.apply(void 0, arguments);
    }
    /** @deprecated */

  }, {
    key: "styleStringFromStyles",
    value: function styleStringFromStyles(styles) {
      return _theStyleUtil.styleString.fromStyles(styles);
    }
  }]);
  return TheStyle;
}(_react.default.PureComponent);

TheStyle.propTypes = {
  /** CSS class name */
  className: _propTypes.default.string,

  /** DOM Id */
  id: _propTypes.default.string,

  /** Style selector prefix */
  prefix: _propTypes.default.string,

  /** Script type */
  type: _propTypes.default.string
};
TheStyle.defaultProps = {
  className: null,
  id: null,
  prefix: null,
  type: null
};
TheStyle.displayName = 'TheStyle';
TheStyle.ThemeValues = _theComponentConstants.ThemeValues;
var _default = TheStyle;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZVN0eWxlLmpzeCJdLCJuYW1lcyI6WyJUaGVTdHlsZSIsImNoaWxkcmVuIiwicHJvcHMiLCJjb25jYXQiLCJtYXAiLCJjaGlsZCIsImpvaW4iLCJFT0wiLCJnZXRTdHlsZXNBc1N0cmluZyIsImdldENoaWxkcmVuQXNTdHJpbmciLCJmaWx0ZXIiLCJCb29sZWFuIiwicHJlZml4Iiwic3R5bGVzIiwiT2JqZWN0Iiwia2V5cyIsInNlbGVjdG9yIiwiY2xhc3NOYW1lIiwiaWQiLCJ0eXBlIiwiX19odG1sIiwiZ2V0SW5uZXJIVE1MIiwidmFsdWVzIiwiY29uc29sZSIsIndhcm4iLCJzdHlsZVN0cmluZyIsImFyZ3VtZW50cyIsImZyb21TdHlsZXMiLCJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsIlRoZW1lVmFsdWVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7OztJQUdNQSxROzs7Ozs7Ozs7Ozs7MENBZ0JrQjtBQUFBLFVBQ1pDLFFBRFksR0FDQyxLQUFLQyxLQUROLENBQ1pELFFBRFk7O0FBRXBCLFVBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ2IsZUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsYUFBTyxHQUNKRSxNQURJLENBQ0dGLFFBREgsRUFFSkcsR0FGSSxDQUVBLFVBQUNDLEtBQUQsRUFBVztBQUNkLGVBQU9BLEtBQVA7QUFDRCxPQUpJLEVBS0pDLElBTEksQ0FLQ0MsT0FMRCxDQUFQO0FBTUQ7OzttQ0FFYztBQUNiLGFBQU8sQ0FBQyxLQUFLQyxpQkFBTCxFQUFELEVBQTJCLEtBQUtDLG1CQUFMLEVBQTNCLEVBQ0pDLE1BREksQ0FDR0MsT0FESCxFQUVKTCxJQUZJLENBRUNDLE9BRkQsQ0FBUDtBQUdEOzs7d0NBRW1CO0FBQUEsd0JBQ1MsS0FBS0wsS0FEZDtBQUFBLFVBQ1ZVLE1BRFUsZUFDVkEsTUFEVTtBQUFBLFVBQ0ZDLE1BREUsZUFDRkEsTUFERTs7QUFFbEIsVUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDWCxlQUFPLElBQVA7QUFDRDs7QUFDRCxhQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWUYsTUFBWixFQUNKVCxHQURJLENBQ0EsVUFBQ1ksUUFBRDtBQUFBLGVBQ0gsK0JBQ0UsQ0FBQ0osTUFBRCxFQUFTSSxRQUFULEVBQW1CTixNQUFuQixDQUEwQkMsT0FBMUIsRUFBbUNMLElBQW5DLENBQXdDLEdBQXhDLENBREYsRUFFRU8sTUFBTSxDQUFDRyxRQUFELENBRlIsQ0FERztBQUFBLE9BREEsRUFPSk4sTUFQSSxDQU9HQyxPQVBILEVBUUpMLElBUkksQ0FRQ0MsT0FSRCxDQUFQO0FBU0Q7Ozs2QkFFUTtBQUFBLFVBQ0NMLEtBREQsR0FDVyxJQURYLENBQ0NBLEtBREQ7QUFBQSxVQUVDZSxTQUZELEdBRXlCZixLQUZ6QixDQUVDZSxTQUZEO0FBQUEsVUFFWUMsRUFGWixHQUV5QmhCLEtBRnpCLENBRVlnQixFQUZaO0FBQUEsVUFFZ0JDLElBRmhCLEdBRXlCakIsS0FGekIsQ0FFZ0JpQixJQUZoQjtBQUdQLGFBQ0U7QUFDRSxRQUFBLFNBQVMsRUFBRSx5QkFBRSxXQUFGLEVBQWVGLFNBQWY7QUFEYixTQUVNO0FBQUVDLFFBQUFBLEVBQUUsRUFBRkEsRUFBRjtBQUFNQyxRQUFBQSxJQUFJLEVBQUpBO0FBQU4sT0FGTjtBQUdFLFFBQUEsdUJBQXVCLEVBQUU7QUFBRUMsVUFBQUEsTUFBTSxFQUFFLEtBQUtDLFlBQUw7QUFBVjtBQUgzQixTQURGO0FBT0Q7OzsyQkE1RGFDLE0sRUFBUTtBQUNwQixhQUFPUixNQUFNLENBQUNRLE1BQUQsQ0FBYjtBQUNEO0FBRUQ7Ozs7a0NBQ3FCO0FBQ25CQyxNQUFBQSxPQUFPLENBQUNDLElBQVI7QUFDQSxhQUFPQyx3Q0FBZUMsU0FBZixDQUFQO0FBQ0Q7QUFFRDs7OzswQ0FDNkJiLE0sRUFBUTtBQUNuQyxhQUFPWSwwQkFBWUUsVUFBWixDQUF1QmQsTUFBdkIsQ0FBUDtBQUNEOzs7RUFkb0JlLGVBQU1DLGE7O0FBZ0U3QjdCLFFBQVEsQ0FBQzhCLFNBQVQsR0FBcUI7QUFDbkI7QUFDQWIsRUFBQUEsU0FBUyxFQUFFYyxtQkFBVUMsTUFGRjs7QUFHbkI7QUFDQWQsRUFBQUEsRUFBRSxFQUFFYSxtQkFBVUMsTUFKSzs7QUFLbkI7QUFDQXBCLEVBQUFBLE1BQU0sRUFBRW1CLG1CQUFVQyxNQU5DOztBQU9uQjtBQUNBYixFQUFBQSxJQUFJLEVBQUVZLG1CQUFVQztBQVJHLENBQXJCO0FBV0FoQyxRQUFRLENBQUNpQyxZQUFULEdBQXdCO0FBQ3RCaEIsRUFBQUEsU0FBUyxFQUFFLElBRFc7QUFFdEJDLEVBQUFBLEVBQUUsRUFBRSxJQUZrQjtBQUd0Qk4sRUFBQUEsTUFBTSxFQUFFLElBSGM7QUFJdEJPLEVBQUFBLElBQUksRUFBRTtBQUpnQixDQUF4QjtBQU9BbkIsUUFBUSxDQUFDa0MsV0FBVCxHQUF1QixVQUF2QjtBQUVBbEMsUUFBUSxDQUFDbUMsV0FBVCxHQUF1QkEsa0NBQXZCO2VBRWVuQyxRIiwic291cmNlUm9vdCI6Ii4uL2xpYiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgYyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBUaGVtZVZhbHVlcyB9IGZyb20gJ3RoZS1jb21wb25lbnQtY29uc3RhbnRzJ1xuaW1wb3J0IHsgc3R5bGVTdHJpbmcgfSBmcm9tICd0aGUtc3R5bGUtdXRpbCdcblxuLyoqXG4gKiBTdHlsZSBvZiB0aGUtY29tcG9uZW50c1xuICovXG5jbGFzcyBUaGVTdHlsZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgc3R5bGVzKHZhbHVlcykge1xuICAgIHJldHVybiBPYmplY3QodmFsdWVzKVxuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIHN0YXRpYyBzdHlsZVN0cmluZygpIHtcbiAgICBjb25zb2xlLndhcm4oYFtUaGVTdHlsZV0gVGhlU3R5bGUuc3R5bGVTdHJpbmcgaXMgbm93IGRlcHJlY2F0ZWRgKVxuICAgIHJldHVybiBzdHlsZVN0cmluZyguLi5hcmd1bWVudHMpXG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgc3RhdGljIHN0eWxlU3RyaW5nRnJvbVN0eWxlcyhzdHlsZXMpIHtcbiAgICByZXR1cm4gc3R5bGVTdHJpbmcuZnJvbVN0eWxlcyhzdHlsZXMpXG4gIH1cblxuICBnZXRDaGlsZHJlbkFzU3RyaW5nKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gW11cbiAgICAgIC5jb25jYXQoY2hpbGRyZW4pXG4gICAgICAubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH0pXG4gICAgICAuam9pbihFT0wpXG4gIH1cblxuICBnZXRJbm5lckhUTUwoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmdldFN0eWxlc0FzU3RyaW5nKCksIHRoaXMuZ2V0Q2hpbGRyZW5Bc1N0cmluZygpXVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLmpvaW4oRU9MKVxuICB9XG5cbiAgZ2V0U3R5bGVzQXNTdHJpbmcoKSB7XG4gICAgY29uc3QgeyBwcmVmaXgsIHN0eWxlcyB9ID0gdGhpcy5wcm9wc1xuICAgIGlmICghc3R5bGVzKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVzKVxuICAgICAgLm1hcCgoc2VsZWN0b3IpID0+XG4gICAgICAgIHN0eWxlU3RyaW5nKFxuICAgICAgICAgIFtwcmVmaXgsIHNlbGVjdG9yXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpLFxuICAgICAgICAgIHN0eWxlc1tzZWxlY3Rvcl0sXG4gICAgICAgICksXG4gICAgICApXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAuam9pbihFT0wpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpc1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBpZCwgdHlwZSB9ID0gcHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPHN0eWxlXG4gICAgICAgIGNsYXNzTmFtZT17YygndGhlLXN0eWxlJywgY2xhc3NOYW1lKX1cbiAgICAgICAgey4uLnsgaWQsIHR5cGUgfX1cbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmdldElubmVySFRNTCgpIH19XG4gICAgICAvPlxuICAgIClcbiAgfVxufVxuXG5UaGVTdHlsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKiBDU1MgY2xhc3MgbmFtZSAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBET00gSWQgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBTdHlsZSBzZWxlY3RvciBwcmVmaXggKi9cbiAgcHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogU2NyaXB0IHR5cGUgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbn1cblxuVGhlU3R5bGUuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6IG51bGwsXG4gIGlkOiBudWxsLFxuICBwcmVmaXg6IG51bGwsXG4gIHR5cGU6IG51bGwsXG59XG5cblRoZVN0eWxlLmRpc3BsYXlOYW1lID0gJ1RoZVN0eWxlJ1xuXG5UaGVTdHlsZS5UaGVtZVZhbHVlcyA9IFRoZW1lVmFsdWVzXG5cbmV4cG9ydCBkZWZhdWx0IFRoZVN0eWxlXG4iXX0=