{"ast":null,"code":"exports.lines = function (sdp) {\n  return sdp.split(/\\r?\\n/).filter(function (line) {\n    return line.length > 0;\n  });\n};\n\nexports.findLine = function (prefix, mediaLines, sessionLines) {\n  var prefixLength = prefix.length;\n\n  for (var i = 0; i < mediaLines.length; i++) {\n    if (mediaLines[i].substr(0, prefixLength) === prefix) {\n      return mediaLines[i];\n    }\n  } // Continue searching in parent session section\n\n\n  if (!sessionLines) {\n    return false;\n  }\n\n  for (var j = 0; j < sessionLines.length; j++) {\n    if (sessionLines[j].substr(0, prefixLength) === prefix) {\n      return sessionLines[j];\n    }\n  }\n\n  return false;\n};\n\nexports.findLines = function (prefix, mediaLines, sessionLines) {\n  var results = [];\n  var prefixLength = prefix.length;\n\n  for (var i = 0; i < mediaLines.length; i++) {\n    if (mediaLines[i].substr(0, prefixLength) === prefix) {\n      results.push(mediaLines[i]);\n    }\n  }\n\n  if (results.length || !sessionLines) {\n    return results;\n  }\n\n  for (var j = 0; j < sessionLines.length; j++) {\n    if (sessionLines[j].substr(0, prefixLength) === prefix) {\n      results.push(sessionLines[j]);\n    }\n  }\n\n  return results;\n};\n\nexports.mline = function (line) {\n  var parts = line.substr(2).split(' ');\n  var parsed = {\n    media: parts[0],\n    port: parts[1],\n    proto: parts[2],\n    formats: []\n  };\n\n  for (var i = 3; i < parts.length; i++) {\n    if (parts[i]) {\n      parsed.formats.push(parts[i]);\n    }\n  }\n\n  return parsed;\n};\n\nexports.rtpmap = function (line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    id: parts.shift()\n  };\n  parts = parts[0].split('/');\n  parsed.name = parts[0];\n  parsed.clockrate = parts[1];\n  parsed.channels = parts.length == 3 ? parts[2] : '1';\n  return parsed;\n};\n\nexports.sctpmap = function (line) {\n  // based on -05 draft\n  var parts = line.substr(10).split(' ');\n  var parsed = {\n    number: parts.shift(),\n    protocol: parts.shift(),\n    streams: parts.shift()\n  };\n  return parsed;\n};\n\nexports.fmtp = function (line) {\n  var kv, key, value;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  var parsed = [];\n\n  for (var i = 0; i < parts.length; i++) {\n    kv = parts[i].split('=');\n    key = kv[0].trim();\n    value = kv[1];\n\n    if (key && value) {\n      parsed.push({\n        key: key,\n        value: value\n      });\n    } else if (key) {\n      parsed.push({\n        key: '',\n        value: key\n      });\n    }\n  }\n\n  return parsed;\n};\n\nexports.crypto = function (line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    tag: parts[0],\n    cipherSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3).join(' ')\n  };\n  return parsed;\n};\n\nexports.fingerprint = function (line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    hash: parts[0],\n    value: parts[1]\n  };\n};\n\nexports.extmap = function (line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {};\n  var idpart = parts.shift();\n  var sp = idpart.indexOf('/');\n\n  if (sp >= 0) {\n    parsed.id = idpart.substr(0, sp);\n    parsed.senders = idpart.substr(sp + 1);\n  } else {\n    parsed.id = idpart;\n    parsed.senders = 'sendrecv';\n  }\n\n  parsed.uri = parts.shift() || '';\n  return parsed;\n};\n\nexports.rtcpfb = function (line) {\n  var parts = line.substr(10).split(' ');\n  var parsed = {};\n  parsed.id = parts.shift();\n  parsed.type = parts.shift();\n\n  if (parsed.type === 'trr-int') {\n    parsed.value = parts.shift();\n  } else {\n    parsed.subtype = parts.shift() || '';\n  }\n\n  parsed.parameters = parts;\n  return parsed;\n};\n\nexports.candidate = function (line) {\n  var parts;\n\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    // no a=candidate\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parts[3],\n    ip: parts[4],\n    port: parts[5],\n    // skip parts[6] == 'typ'\n    type: parts[7],\n    generation: '0'\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    if (parts[i] === 'raddr') {\n      candidate.relAddr = parts[i + 1];\n    } else if (parts[i] === 'rport') {\n      candidate.relPort = parts[i + 1];\n    } else if (parts[i] === 'generation') {\n      candidate.generation = parts[i + 1];\n    } else if (parts[i] === 'tcptype') {\n      candidate.tcpType = parts[i + 1];\n    }\n  }\n\n  candidate.network = '1';\n  return candidate;\n};\n\nexports.sourceGroups = function (lines) {\n  var parsed = [];\n\n  for (var i = 0; i < lines.length; i++) {\n    var parts = lines[i].substr(13).split(' ');\n    parsed.push({\n      semantics: parts.shift(),\n      sources: parts\n    });\n  }\n\n  return parsed;\n};\n\nexports.sources = function (lines) {\n  // http://tools.ietf.org/html/rfc5576\n  var parsed = [];\n  var sources = {};\n\n  for (var i = 0; i < lines.length; i++) {\n    var parts = lines[i].substr(7).split(' ');\n    var ssrc = parts.shift();\n\n    if (!sources[ssrc]) {\n      var source = {\n        ssrc: ssrc,\n        parameters: []\n      };\n      parsed.push(source); // Keep an index\n\n      sources[ssrc] = source;\n    }\n\n    parts = parts.join(' ').split(':');\n    var attribute = parts.shift();\n    var value = parts.join(':') || null;\n    sources[ssrc].parameters.push({\n      key: attribute,\n      value: value\n    });\n  }\n\n  return parsed;\n};\n\nexports.groups = function (lines) {\n  // http://tools.ietf.org/html/rfc5888\n  var parsed = [];\n  var parts;\n\n  for (var i = 0; i < lines.length; i++) {\n    parts = lines[i].substr(8).split(' ');\n    parsed.push({\n      semantics: parts.shift(),\n      contents: parts\n    });\n  }\n\n  return parsed;\n};\n\nexports.bandwidth = function (line) {\n  var parts = line.substr(2).split(':');\n  var parsed = {};\n  parsed.type = parts.shift();\n  parsed.bandwidth = parts.shift();\n  return parsed;\n};\n\nexports.msid = function (line) {\n  var data = line.substr(7);\n  var parts = data.split(' ');\n  return {\n    msid: data,\n    mslabel: parts[0],\n    label: parts[1]\n  };\n};","map":null,"metadata":{},"sourceType":"script"}