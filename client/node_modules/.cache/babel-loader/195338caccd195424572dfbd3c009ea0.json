{"ast":null,"code":"/**\n * Convert style into style string\n * @function styleString\n * @param {string} selector - Selector string\n * @param {Object} style - Style string\n * @param {string} [atRule=null]\n * @returns {Object} Style object\n */\n'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport nanoCSS from 'nano-css';\nimport { addon as keyframes } from 'nano-css/addon/keyframes';\nimport { addon as prefixer } from 'nano-css/addon/prefixer';\nimport { addon as unitless } from 'nano-css/addon/unitless';\nimport { EOL } from 'os';\n/** @lends styleString */\n\nfunction styleString(selector, style) {\n  var atRule = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (/^@/.test(selector)) {\n    var converted = Object.entries(style).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          s = _ref2[0],\n          sl = _ref2[1];\n\n      return styleString(s, sl);\n    }).join(' ');\n    return \"\".concat(selector, \" { \").concat(converted, \"}\");\n  }\n\n  var nano = nanoCSS.create({\n    client: false\n  });\n  unitless(nano);\n  prefixer(nano);\n  keyframes(nano);\n  nano.put(selector, style, atRule);\n  return String(nano.raw);\n}\n\nstyleString.fromStyles = function (styles) {\n  return Object.keys(styles).map(function (selector) {\n    return styleString(selector, styles[selector]);\n  }).filter(Boolean).join(EOL);\n};\n\nexport default styleString;","map":null,"metadata":{},"sourceType":"module"}