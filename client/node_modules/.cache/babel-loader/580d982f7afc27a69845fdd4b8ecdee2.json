{"ast":null,"code":"/**\n * Read file as data url\n * @deprecated\n * @function readFileAsDataURL\n * @param {File} - File to read\n * @returns {Promise.<string>} Data url\n */\n'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { get } from 'bwindow';\n/** @lends readFileAsDataURL */\n\nfunction readFileAsDataURL(_x) {\n  return _readFileAsDataURL.apply(this, arguments);\n}\n\nfunction _readFileAsDataURL() {\n  _readFileAsDataURL = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(file) {\n    var FileReader;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            FileReader = get('FileReader');\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var reader = new FileReader();\n\n              reader.onerror = function (err) {\n                return reject(err);\n              };\n\n              reader.onload = function (ev) {\n                return resolve(ev.target.result);\n              };\n\n              reader.readAsDataURL(file);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _readFileAsDataURL.apply(this, arguments);\n}\n\nexport default readFileAsDataURL;","map":null,"metadata":{},"sourceType":"module"}