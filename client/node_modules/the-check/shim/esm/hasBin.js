/**
 *  Check if a bin available
 * @function hasBin
 * @param {string} binName - Name of bin
 * @param {Object} [options={}]
 * @returns {Promise.<boolean>}
 */
'use strict';

import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import fs from 'fs';
import hasbinCB from 'hasbin';
import path from 'path';
/** @lends hasBin */

function hasBin(_x) {
  return _hasBin.apply(this, arguments);
}

function _hasBin() {
  _hasBin = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(binName) {
    var options,
        filename,
        stat,
        fileExists,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            filename = path.resolve(binName);
            _context.next = 4;
            return new Promise(function (resolve, reject) {
              fs.stat(filename, function (err, state) {
                return err ? reject(err) : resolve(state);
              });
            }).catch(function () {
              return null;
            });

          case 4:
            stat = _context.sent;
            fileExists = stat && !stat.isDirectory();

            if (!fileExists) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", true);

          case 8:
            return _context.abrupt("return", new Promise(function (resolve) {
              return hasbinCB(binName, resolve);
            }));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _hasBin.apply(this, arguments);
}

export default hasBin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhc0Jpbi5qcyJdLCJuYW1lcyI6WyJmcyIsImhhc2JpbkNCIiwicGF0aCIsImhhc0JpbiIsImJpbk5hbWUiLCJvcHRpb25zIiwiZmlsZW5hbWUiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXQiLCJlcnIiLCJzdGF0ZSIsImNhdGNoIiwiZmlsZUV4aXN0cyIsImlzRGlyZWN0b3J5Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU9BOzs7O0FBRUEsT0FBT0EsRUFBUCxNQUFlLElBQWY7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLFFBQXJCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUVBOztTQUNlQyxNOzs7Ozs7OzJCQUFmLGlCQUFzQkMsT0FBdEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBK0JDLFlBQUFBLE9BQS9CLDJEQUF5QyxFQUF6QztBQUVVQyxZQUFBQSxRQUZWLEdBRXFCSixJQUFJLENBQUNLLE9BQUwsQ0FBYUgsT0FBYixDQUZyQjtBQUFBO0FBQUEsbUJBR3VCLElBQUlJLE9BQUosQ0FBWSxVQUFDRCxPQUFELEVBQVVFLE1BQVYsRUFBcUI7QUFDbERULGNBQUFBLEVBQUUsQ0FBQ1UsSUFBSCxDQUFRSixRQUFSLEVBQWtCLFVBQUNLLEdBQUQsRUFBTUMsS0FBTjtBQUFBLHVCQUFpQkQsR0FBRyxHQUFHRixNQUFNLENBQUNFLEdBQUQsQ0FBVCxHQUFpQkosT0FBTyxDQUFDSyxLQUFELENBQTVDO0FBQUEsZUFBbEI7QUFDRCxhQUZrQixFQUVoQkMsS0FGZ0IsQ0FFVjtBQUFBLHFCQUFNLElBQU47QUFBQSxhQUZVLENBSHZCOztBQUFBO0FBR1VILFlBQUFBLElBSFY7QUFNVUksWUFBQUEsVUFOVixHQU11QkosSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQ0ssV0FBTCxFQU5oQzs7QUFBQSxpQkFPUUQsVUFQUjtBQUFBO0FBQUE7QUFBQTs7QUFBQSw2Q0FRYSxJQVJiOztBQUFBO0FBQUEsNkNBV1MsSUFBSU4sT0FBSixDQUFZLFVBQUNELE9BQUQ7QUFBQSxxQkFBYU4sUUFBUSxDQUFDRyxPQUFELEVBQVVHLE9BQVYsQ0FBckI7QUFBQSxhQUFaLENBWFQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRzs7OztBQWNBLGVBQWVKLE1BQWYiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ2hlY2sgaWYgYSBiaW4gYXZhaWxhYmxlXG4gKiBAZnVuY3Rpb24gaGFzQmluXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluTmFtZSAtIE5hbWUgb2YgYmluXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48Ym9vbGVhbj59XG4gKi9cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGhhc2JpbkNCIGZyb20gJ2hhc2Jpbic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLyoqIEBsZW5kcyBoYXNCaW4gKi9cbmFzeW5jIGZ1bmN0aW9uIGhhc0JpbihiaW5OYW1lLCBvcHRpb25zID0ge30pIHtcbiAge1xuICAgIGNvbnN0IGZpbGVuYW1lID0gcGF0aC5yZXNvbHZlKGJpbk5hbWUpXG4gICAgY29uc3Qgc3RhdCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZzLnN0YXQoZmlsZW5hbWUsIChlcnIsIHN0YXRlKSA9PiAoZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHN0YXRlKSkpXG4gICAgfSkuY2F0Y2goKCkgPT4gbnVsbClcbiAgICBjb25zdCBmaWxlRXhpc3RzID0gc3RhdCAmJiAhc3RhdC5pc0RpcmVjdG9yeSgpXG4gICAgaWYgKGZpbGVFeGlzdHMpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gaGFzYmluQ0IoYmluTmFtZSwgcmVzb2x2ZSkpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc0JpbjtcbiJdfQ==