{"ast":null,"code":"/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\n\nvar firefoxShim = {\n  shimOnTrack: function shimOnTrack(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function get() {\n          return this._ontrack;\n        },\n        set: function set(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function (e) {\n            e.stream.getTracks().forEach(function (track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {\n                track: track\n              };\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n  },\n  shimSourceObject: function shimSourceObject(window) {\n    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement && !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function get() {\n            return this.mozSrcObject;\n          },\n          set: function set(stream) {\n            this.mozSrcObject = stream;\n          }\n        });\n      }\n    }\n  },\n  shimPeerConnection: function shimPeerConnection(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n      return; // probably media.peerconnection.enabled=false in about:config\n    } // The RTCPeerConnection object.\n\n\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function (pcConfig, pcConstraints) {\n        if (browserDetails.version < 38) {\n          // .urls is not supported in FF < 38.\n          // create RTCIceServers with a single url.\n          if (pcConfig && pcConfig.iceServers) {\n            var newIceServers = [];\n\n            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n              var server = pcConfig.iceServers[i];\n\n              if (server.hasOwnProperty('urls')) {\n                for (var j = 0; j < server.urls.length; j++) {\n                  var newServer = {\n                    url: server.urls[j]\n                  };\n\n                  if (server.urls[j].indexOf('turn') === 0) {\n                    newServer.username = server.username;\n                    newServer.credential = server.credential;\n                  }\n\n                  newIceServers.push(newServer);\n                }\n              } else {\n                newIceServers.push(pcConfig.iceServers[i]);\n              }\n            }\n\n            pcConfig.iceServers = newIceServers;\n          }\n        }\n\n        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);\n      };\n\n      window.RTCPeerConnection.prototype = window.mozRTCPeerConnection.prototype; // wrap static methods. Currently just generateCertificate.\n\n      if (window.mozRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function get() {\n            return window.mozRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n\n      window.RTCSessionDescription = window.mozRTCSessionDescription;\n      window.RTCIceCandidate = window.mozRTCIceCandidate;\n    } // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n\n\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n      var nativeMethod = window.RTCPeerConnection.prototype[method];\n\n      window.RTCPeerConnection.prototype[method] = function () {\n        arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n        return nativeMethod.apply(this, arguments);\n      };\n    }); // support for addIceCandidate(null or undefined)\n\n    var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;\n\n    window.RTCPeerConnection.prototype.addIceCandidate = function () {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n\n        return Promise.resolve();\n      }\n\n      return nativeAddIceCandidate.apply(this, arguments);\n    }; // shim getStats with maplike support\n\n\n    var makeMapStats = function makeMapStats(stats) {\n      var map = new Map();\n      Object.keys(stats).forEach(function (key) {\n        map.set(key, stats[key]);\n        map[key] = stats[key];\n      });\n      return map;\n    };\n\n    var modernStatsTypes = {\n      inboundrtp: 'inbound-rtp',\n      outboundrtp: 'outbound-rtp',\n      candidatepair: 'candidate-pair',\n      localcandidate: 'local-candidate',\n      remotecandidate: 'remote-candidate'\n    };\n    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n\n    window.RTCPeerConnection.prototype.getStats = function (selector, onSucc, onErr) {\n      return nativeGetStats.apply(this, [selector || null]).then(function (stats) {\n        if (browserDetails.version < 48) {\n          stats = makeMapStats(stats);\n        }\n\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(function (stat) {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            } // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n\n\n            stats.forEach(function (stat, i) {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n\n        return stats;\n      }).then(onSucc, onErr);\n    };\n  }\n}; // Expose public methods.\n\nmodule.exports = {\n  shimOnTrack: firefoxShim.shimOnTrack,\n  shimSourceObject: firefoxShim.shimSourceObject,\n  shimPeerConnection: firefoxShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};","map":null,"metadata":{},"sourceType":"script"}