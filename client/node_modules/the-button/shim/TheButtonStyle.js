'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _theComponentUtil = require("the-component-util");

var _theStyle = require("the-style");

/** Style for TheButton */
var TheButtonStyle = function TheButtonStyle(_ref) {
  var className = _ref.className,
      id = _ref.id,
      options = _ref.options;
  return _react.default.createElement(_theStyle.TheStyle, (0, _extends2.default)({
    id: id
  }, {
    className: (0, _classnames.default)('the-button-style', className),
    styles: TheButtonStyle.data(options)
  }));
};

TheButtonStyle.displayName = 'TheButtonStyle';
TheButtonStyle.propTypes = {
  /** Style options */
  options: _propTypes.default.object
};
TheButtonStyle.defaultProps = {
  options: {}
};

TheButtonStyle.data = function (options) {
  var ThemeValues = _theStyle.TheStyle.ThemeValues;
  var _options$backgroundCo = options.backgroundColor,
      backgroundColor = _options$backgroundCo === void 0 ? ThemeValues.backgroundColor : _options$backgroundCo,
      _options$contentWidth = options.contentWidth,
      contentWidth = _options$contentWidth === void 0 ? ThemeValues.contentWidth : _options$contentWidth,
      _options$dangerColor = options.dangerColor,
      dangerColor = _options$dangerColor === void 0 ? '#A33' : _options$dangerColor,
      _options$disabledBack = options.disabledBackgroundColor,
      disabledBackgroundColor = _options$disabledBack === void 0 ? ThemeValues.disabledBackgroundColor : _options$disabledBack,
      _options$disabledText = options.disabledTextColor,
      disabledTextColor = _options$disabledText === void 0 ? ThemeValues.disabledTextColor : _options$disabledText,
      _options$dominantColo = options.dominantColor,
      dominantColor = _options$dominantColo === void 0 ? ThemeValues.dominantColor : _options$dominantColo,
      _options$lightTextCol = options.lightTextColor,
      lightTextColor = _options$lightTextCol === void 0 ? ThemeValues.lightTextColor : _options$lightTextCol,
      _options$overlayBackg = options.overlayBackgroundColor,
      overlayBackgroundColor = _options$overlayBackg === void 0 ? ThemeValues.overlayBackgroundColor : _options$overlayBackg,
      _options$overlayTextC = options.overlayTextColor,
      overlayTextColor = _options$overlayTextC === void 0 ? ThemeValues.overlayTextColor : _options$overlayTextC,
      _options$tappableHeig = options.tappableHeight,
      tappableHeight = _options$tappableHeig === void 0 ? ThemeValues.tappableHeight : _options$tappableHeig;
  return Object.assign({}, (0, _theComponentUtil.asStyleData)({
    '.the-button': {
      alignItems: 'center',
      backgroundColor: backgroundColor,
      border: "1px solid",
      borderRadius: '4px',
      boxSizing: 'border-box',
      color: dominantColor,
      cursor: 'pointer',
      display: 'inline-flex',
      flexDirection: 'row',
      justifyContent: 'center',
      margin: '4px',
      maxWidth: contentWidth,
      minHeight: tappableHeight,
      outlineColor: dominantColor,
      padding: '0.5em 1em',
      position: 'relative',
      textAlign: 'center',
      textDecoration: 'none'
    },
    '.the-button-icon': {
      marginLeft: '0',
      marginRight: '2px'
    },
    '.the-button-icon-right': {
      marginLeft: '2px',
      marginRight: '0'
    },
    '.the-button-inner': {
      display: 'inline-block'
    },
    '.the-button-large-icon': {
      display: 'block',
      fontSize: '3em',
      margin: '0'
    },
    '.the-button-spinner': {
      alignItems: 'center',
      backgroundColor: overlayBackgroundColor,
      borderColor: overlayBackgroundColor,
      bottom: 0,
      color: overlayTextColor,
      display: 'flex',
      justifyContent: 'center',
      left: 0,
      overflow: 'hidden',
      position: 'absolute',
      right: 0,
      top: 0,
      zIndex: 1
    },
    '.the-button-text': {
      display: 'inline-block',
      padding: '0 2px'
    },
    '.the-button:active': {
      boxShadow: '1px 2px 2px rgba(0,0,0,0.33) inset'
    },
    '.the-button:hover': {
      opacity: '0.9'
    },
    '.the-button.the-button-danger': {
      backgroundColor: dangerColor,
      border: dangerColor,
      color: 'white'
    },
    '.the-button.the-button-disabled': {
      '&:hover, &:active': {
        boxShadow: 'none',
        cursor: 'default'
      },
      '&.the-button-primary': {
        backgroundColor: disabledBackgroundColor,
        borderColor: disabledTextColor,
        color: disabledTextColor
      },
      backgroundColor: disabledBackgroundColor,
      color: disabledTextColor,
      cursor: 'default',
      pointerEvents: 'none'
    },
    '.the-button.the-button-floated': {
      '&:active': {
        boxShadow: 'none'
      },
      boxShadow: '2px 2px 4px rgba(0,0,0,0.33)'
    },
    '.the-button.the-button-large': {
      fontSize: '2em'
    },
    '.the-button.the-button-light': {
      backgroundColor: 'transparent',
      borderColor: lightTextColor,
      color: lightTextColor
    },
    '.the-button.the-button-primary': {
      backgroundColor: dominantColor,
      borderColor: dominantColor,
      color: backgroundColor
    },
    '.the-button.the-button-rounded': {
      '.the-button-icon': {
        alignItems: 'center',
        bottom: 0,
        display: 'flex',
        fontSize: '3em',
        justifyContent: 'center',
        left: 0,
        opacity: 0.12,
        pointerEvents: 'none',
        position: 'absolute',
        right: 0,
        top: 0,
        zIndex: 0
      },
      '.the-button-spinner': {
        borderRadius: '50%'
      },
      borderRadius: '50%',
      borderWidth: '4px',
      height: '6em',
      width: '6em'
    },
    '.the-button.the-button-simple': {
      '&:active': {
        boxShadow: 'none'
      },
      backgroundColor: 'transparent',
      border: 'none'
    },
    '.the-button.the-button-small': {
      fontSize: 'small',
      minHeight: '12px'
    },
    '.the-button.the-button-vertical': {
      flexDirection: 'column'
    },
    '.the-button.the-button-wide': {
      boxSizing: 'border-box',
      display: 'flex',
      margin: '4px auto',
      width: '100%'
    },
    '.the-button.the-link': {
      display: 'inline-flex',
      padding: '0.5em 1em'
    }
  }), (0, _theComponentUtil.asStyleData)({
    '.the-button-group': {
      '.the-button': {
        flexGrow: 1
      },
      alignItems: 'center',
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'center',
      margin: '8px auto',
      maxWidth: contentWidth,
      width: '100%'
    },
    '.the-button-group.the-button-group-collapsed': {
      '.the-button': {
        '&:first-child': {
          borderLeft: 'none',
          margin: '0'
        },
        '&:last-child': {
          borderRight: 'none'
        },
        borderBottom: 'none',
        borderRadius: 0,
        borderRight: 'none',
        margin: '0 -1px 0 0',
        paddingBottom: '1em',
        paddingTop: '1em',
        width: '100%'
      },
      alignItems: 'stretch',
      flexWrap: 'nowrap'
    },
    '.the-button-group.the-button-group-left': {
      justifyContent: 'flex-start'
    },
    '.the-button-group.the-button-group-nowrap': {
      flexWrap: 'nowrap'
    },
    '.the-button-group.the-button-group-right': {
      justifyContent: 'flex-end'
    }
  }));
};

var _default = TheButtonStyle;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,