'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _asobj = require("asobj");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _theButton = require("the-button");

var _theCheck = require("the-check");

var _theComponentUtil = require("the-component-util");

var _theIcon = require("the-icon");

var _theSpin = require("the-spin");

var _theWindow = require("the-window");

var _setupVideoElm = _interopRequireDefault(require("./helpers/setupVideoElm"));

var _TheTalkStyle = _interopRequireDefault(require("./TheTalkStyle"));

var cssAmount = function cssAmount(v) {
  return typeof v === 'number' ? v + 'px' : v;
};
/**
 * Talking via webrtc
 */


var TheTalk =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(TheTalk, _React$Component);
  (0, _createClass2.default)(TheTalk, null, [{
    key: "DisabledIcon",
    value: function DisabledIcon(_ref) {
      var present = _ref.present;

      if (!present) {
        return null;
      }

      return _react.default.createElement(_theIcon.TheIcon, {
        className: (0, _classnames.default)('the-talk-disabled-icon', TheTalk.DISABLED_ICON)
      });
    }
  }, {
    key: "LocalClient",
    value: function LocalClient(_ref2) {
      var client = _ref2.client,
          id = _ref2.id,
          onAudioToggle = _ref2.onAudioToggle,
          onVideoToggle = _ref2.onVideoToggle,
          renderClient = _ref2.renderClient,
          videoHeight = _ref2.videoHeight;

      if (!client) {
        return null;
      }

      var audioEnabled = client.audioEnabled,
          videoEnabled = client.videoEnabled;
      var content = renderClient(client);
      return _react.default.createElement("div", {
        className: "the-talk-local",
        id: id
      }, _react.default.createElement("video", {
        autoPlay: true,
        className: "the-talk-video",
        muted: true,
        playsInline: true,
        style: {
          height: videoHeight
        }
      }), content && _react.default.createElement("div", {
        className: "the-talk-content"
      }, content), _react.default.createElement("div", {
        className: (0, _classnames.default)('the-talk-actions', {})
      }, _react.default.createElement(_theButton.TheButton, {
        className: (0, _classnames.default)('the-talk-toggle', {
          'the-talk-toggle-disabled': !audioEnabled
        }),
        icon: TheTalk.AUDIO_ICON,
        onClick: onAudioToggle
      }, _react.default.createElement(TheTalk.DisabledIcon, {
        present: !audioEnabled
      })), _react.default.createElement(_theButton.TheButton, {
        className: (0, _classnames.default)('the-talk-toggle', {
          'the-talk-toggle-disabled': !videoEnabled
        }),
        icon: TheTalk.VIDEO_ICON,
        onClick: onVideoToggle
      }, _react.default.createElement(TheTalk.DisabledIcon, {
        present: !videoEnabled
      }))));
    }
  }, {
    key: "RemoteClient",
    value: function RemoteClient(_ref3) {
      var client = _ref3.client,
          id = _ref3.id,
          renderClient = _ref3.renderClient,
          videoHeight = _ref3.videoHeight;

      if (!client) {
        return null;
      }

      var content = renderClient(client);
      return _react.default.createElement("div", {
        className: "the-talk-remote",
        id: id
      }, _react.default.createElement("video", {
        autoPlay: true,
        className: "the-talk-video",
        playsInline: true,
        style: {
          height: videoHeight
        }
      }), content && _react.default.createElement("div", {
        className: "the-talk-content"
      }, content));
    }
  }]);

  function TheTalk(props) {
    var _this;

    (0, _classCallCheck2.default)(this, TheTalk);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TheTalk).call(this, props));
    _this.handleAudioToggle = _this.handleAudioToggle.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    _this.handleVideoToggle = _this.handleVideoToggle.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    _this.elmRef = _react.default.createRef();
    _this._id = (0, _theComponentUtil.newId)();
    return _this;
  }

  (0, _createClass2.default)(TheTalk, [{
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var diff = (0, _theComponentUtil.changedProps)(prevProps, this.props);

      if ('localClient' in diff) {
        void this.receiveLocalClient(diff.localClient);
      }

      if ('remoteClients' in diff) {
        void this.receiveRemoteClients(diff.remoteClients);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {}
  }, {
    key: "handleAudioToggle",
    value: function handleAudioToggle() {
      var _this$props = this.props,
          localClient = _this$props.localClient,
          onToggleAudio = _this$props.onToggleAudio;

      var _ref4 = localClient || {},
          audioEnabled = _ref4.audioEnabled;

      onToggleAudio && onToggleAudio(!audioEnabled);
    }
  }, {
    key: "handleVideoToggle",
    value: function handleVideoToggle() {
      var _this$props2 = this.props,
          localClient = _this$props2.localClient,
          onToggleVideo = _this$props2.onToggleVideo;

      var _ref5 = localClient || {},
          videoEnabled = _ref5.videoEnabled;

      onToggleVideo && onToggleVideo(!videoEnabled);
    }
  }, {
    key: "remoteClientElmIdFor",
    value: function remoteClientElmIdFor(rid) {
      return "".concat(this.id, "-remote-").concat(rid);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var props = this.props;
      var children = props.children,
          className = props.className,
          localClient = props.localClient,
          localVideoHeight = props.localVideoHeight,
          remoteClients = props.remoteClients,
          remoteVideoHeight = props.remoteVideoHeight,
          renderLocalClient = props.renderLocalClient,
          renderRemoteClient = props.renderRemoteClient,
          spinning = props.spinning;
      return _react.default.createElement("div", (0, _extends2.default)({}, (0, _theComponentUtil.htmlAttributesFor)(props, {
        except: ['className']
      }), (0, _theComponentUtil.eventHandlersFor)(props, {
        except: []
      }), {
        className: (0, _classnames.default)('the-talk', className, {
          'the-talk-ready': !!localClient
        }),
        id: this.id,
        ref: this.elmRef
      }), spinning && _react.default.createElement(_theSpin.TheSpin, {
        cover: true,
        enabled: true
      }), _react.default.createElement("div", {
        className: "the-talk-video-remote-container"
      }, Object.entries(remoteClients).map(function (_ref6) {
        var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),
            rid = _ref7[0],
            client = _ref7[1];

        return _react.default.createElement(TheTalk.RemoteClient, {
          client: client,
          id: _this2.remoteClientElmIdFor(rid),
          key: rid,
          renderClient: renderRemoteClient,
          videoHeight: cssAmount(remoteVideoHeight)
        });
      })), _react.default.createElement("div", {
        className: "the-talk-video-local-container"
      }, _react.default.createElement(TheTalk.LocalClient, {
        client: localClient,
        id: this.localClientElmId,
        onAudioToggle: this.handleAudioToggle,
        onVideoToggle: this.handleVideoToggle,
        renderClient: renderLocalClient,
        videoHeight: cssAmount(localVideoHeight)
      })), children);
    }
  }, {
    key: "receiveLocalClient",
    value: function () {
      var _receiveLocalClient = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(localClient) {
        var document, clientElm, videoElm;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                document = (0, _theWindow.get)('document');
                clientElm = document.getElementById(this.localClientElmId);

                if (clientElm) {
                  _context.next = 5;
                  break;
                }

                console.warn('[TheTalk] local clientElm not ready');
                return _context.abrupt("return");

              case 5:
                videoElm = clientElm.querySelector('video');
                _context.next = 8;
                return (0, _setupVideoElm.default)(videoElm, {
                  local: true,
                  stream: localClient.stream
                });

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function receiveLocalClient(_x) {
        return _receiveLocalClient.apply(this, arguments);
      }

      return receiveLocalClient;
    }()
  }, {
    key: "receiveRemoteClients",
    value: function () {
      var _receiveRemoteClients = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(remoteClients) {
        var document, _arr, _i, _arr$_i, rid, client, clientElm, videoElm;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                document = (0, _theWindow.get)('document');
                _arr = Object.entries(remoteClients);
                _i = 0;

              case 3:
                if (!(_i < _arr.length)) {
                  _context2.next = 15;
                  break;
                }

                _arr$_i = (0, _slicedToArray2.default)(_arr[_i], 2), rid = _arr$_i[0], client = _arr$_i[1];
                clientElm = document.getElementById(this.remoteClientElmIdFor(rid));

                if (clientElm) {
                  _context2.next = 9;
                  break;
                }

                console.warn('[TheTalk] remote clientElm not ready');
                return _context2.abrupt("return");

              case 9:
                videoElm = clientElm.querySelector('video');
                _context2.next = 12;
                return (0, _setupVideoElm.default)(videoElm, {
                  local: false,
                  stream: client.stream
                });

              case 12:
                _i++;
                _context2.next = 3;
                break;

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function receiveRemoteClients(_x2) {
        return _receiveRemoteClients.apply(this, arguments);
      }

      return receiveRemoteClients;
    }()
  }, {
    key: "id",
    get: function get() {
      return this.props.id || this._id;
    }
  }, {
    key: "localClientElmId",
    get: function get() {
      return "".concat(this.id, "-local");
    }
  }]);
  return TheTalk;
}(_react.default.Component);

TheTalk.AUDIO_ICON = 'fas fa-microphone';
TheTalk.VIDEO_ICON = 'fas fa-video';
TheTalk.DISABLED_ICON = 'fas fa-ban';
TheTalk.Style = _TheTalkStyle.default;
TheTalk.propTypes = {
  /** Handle video */
  localClient: _propTypes.default.object,
  onVideo: _propTypes.default.func,
  remoteClients: _propTypes.default.objectOf(_propTypes.default.object),
  renderLocalClient: _propTypes.default.func,
  renderRemoteClient: _propTypes.default.func,

  /** Height of video */
  videoHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
TheTalk.defaultProps = {
  localClient: null,
  localVideoHeight: 100,
  remoteClients: {},
  remoteVideoHeight: 200,
  renderLocalClient: function renderLocalClient() {
    return null;
  },
  renderRemoteClient: function renderRemoteClient() {
    return null;
  }
};
TheTalk.displayName = 'TheTalk';
var _default = TheTalk;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,