{"ast":null,"code":"/**\n * Expose `debug()` as the module.\n */\nmodule.exports = debug;\n/**\n * Create a debugger with the given `name`.\n *\n * @param {String} name\n * @return {Type}\n * @api public\n */\n\nfunction debug(name) {\n  if (!debug.enabled(name)) return function () {};\n  return function (fmt) {\n    fmt = coerce(fmt);\n    var curr = new Date();\n    var ms = curr - (debug[name] || curr);\n    debug[name] = curr;\n    fmt = name + ' ' + fmt + ' +' + debug.humanize(ms); // This hackery is required for IE8\n    // where `console.log` doesn't have 'apply'\n\n    window.console && console.log && Function.prototype.apply.call(console.log, console, arguments);\n  };\n}\n/**\n * The currently active debug mode names.\n */\n\n\ndebug.names = [];\ndebug.skips = [];\n/**\n * Enables a debug mode by name. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} name\n * @api public\n */\n\ndebug.enable = function (name) {\n  try {\n    localStorage.debug = name;\n  } catch (e) {}\n\n  var split = (name || '').split(/[\\s,]+/),\n      len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    name = split[i].replace('*', '.*?');\n\n    if (name[0] === '-') {\n      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));\n    } else {\n      debug.names.push(new RegExp('^' + name + '$'));\n    }\n  }\n};\n/**\n * Disable debug output.\n *\n * @api public\n */\n\n\ndebug.disable = function () {\n  debug.enable('');\n};\n/**\n * Humanize the given `ms`.\n *\n * @param {Number} m\n * @return {String}\n * @api private\n */\n\n\ndebug.humanize = function (ms) {\n  var sec = 1000,\n      min = 60 * 1000,\n      hour = 60 * min;\n  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';\n  if (ms >= min) return (ms / min).toFixed(1) + 'm';\n  if (ms >= sec) return (ms / sec | 0) + 's';\n  return ms + 'ms';\n};\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\n\ndebug.enabled = function (name) {\n  for (var i = 0, len = debug.skips.length; i < len; i++) {\n    if (debug.skips[i].test(name)) {\n      return false;\n    }\n  }\n\n  for (var i = 0, len = debug.names.length; i < len; i++) {\n    if (debug.names[i].test(name)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Coerce `val`.\n */\n\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n} // persist\n\n\ntry {\n  if (window.localStorage) debug.enable(localStorage.debug);\n} catch (e) {}","map":null,"metadata":{},"sourceType":"script"}