'use strict';

import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import { cleanup } from 'asobj';
import c from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { TheButton } from 'the-button';
import { isProduction } from 'the-check';
import { changedProps, eventHandlersFor, htmlAttributesFor, newId } from 'the-component-util';
import { TheIcon } from 'the-icon';
import { TheSpin } from 'the-spin';
import { get } from 'the-window';
import setupVideoElm from './helpers/setupVideoElm';
import TheTalkStyle from './TheTalkStyle';

var cssAmount = function cssAmount(v) {
  return typeof v === 'number' ? v + 'px' : v;
};
/**
 * Talking via webrtc
 */


var TheTalk =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TheTalk, _React$Component);

  _createClass(TheTalk, null, [{
    key: "DisabledIcon",
    value: function DisabledIcon(_ref) {
      var present = _ref.present;

      if (!present) {
        return null;
      }

      return React.createElement(TheIcon, {
        className: c('the-talk-disabled-icon', TheTalk.DISABLED_ICON)
      });
    }
  }, {
    key: "LocalClient",
    value: function LocalClient(_ref2) {
      var client = _ref2.client,
          id = _ref2.id,
          onAudioToggle = _ref2.onAudioToggle,
          onVideoToggle = _ref2.onVideoToggle,
          renderClient = _ref2.renderClient,
          videoHeight = _ref2.videoHeight;

      if (!client) {
        return null;
      }

      var audioEnabled = client.audioEnabled,
          videoEnabled = client.videoEnabled;
      var content = renderClient(client);
      return React.createElement("div", {
        className: "the-talk-local",
        id: id
      }, React.createElement("video", {
        autoPlay: true,
        className: "the-talk-video",
        muted: true,
        playsInline: true,
        style: {
          height: videoHeight
        }
      }), content && React.createElement("div", {
        className: "the-talk-content"
      }, content), React.createElement("div", {
        className: c('the-talk-actions', {})
      }, React.createElement(TheButton, {
        className: c('the-talk-toggle', {
          'the-talk-toggle-disabled': !audioEnabled
        }),
        icon: TheTalk.AUDIO_ICON,
        onClick: onAudioToggle
      }, React.createElement(TheTalk.DisabledIcon, {
        present: !audioEnabled
      })), React.createElement(TheButton, {
        className: c('the-talk-toggle', {
          'the-talk-toggle-disabled': !videoEnabled
        }),
        icon: TheTalk.VIDEO_ICON,
        onClick: onVideoToggle
      }, React.createElement(TheTalk.DisabledIcon, {
        present: !videoEnabled
      }))));
    }
  }, {
    key: "RemoteClient",
    value: function RemoteClient(_ref3) {
      var client = _ref3.client,
          id = _ref3.id,
          renderClient = _ref3.renderClient,
          videoHeight = _ref3.videoHeight;

      if (!client) {
        return null;
      }

      var content = renderClient(client);
      return React.createElement("div", {
        className: "the-talk-remote",
        id: id
      }, React.createElement("video", {
        autoPlay: true,
        className: "the-talk-video",
        playsInline: true,
        style: {
          height: videoHeight
        }
      }), content && React.createElement("div", {
        className: "the-talk-content"
      }, content));
    }
  }]);

  function TheTalk(props) {
    var _this;

    _classCallCheck(this, TheTalk);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TheTalk).call(this, props));
    _this.handleAudioToggle = _this.handleAudioToggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleVideoToggle = _this.handleVideoToggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.elmRef = React.createRef();
    _this._id = newId();
    return _this;
  }

  _createClass(TheTalk, [{
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var diff = changedProps(prevProps, this.props);

      if ('localClient' in diff) {
        void this.receiveLocalClient(diff.localClient);
      }

      if ('remoteClients' in diff) {
        void this.receiveRemoteClients(diff.remoteClients);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {}
  }, {
    key: "handleAudioToggle",
    value: function handleAudioToggle() {
      var _this$props = this.props,
          localClient = _this$props.localClient,
          onToggleAudio = _this$props.onToggleAudio;

      var _ref4 = localClient || {},
          audioEnabled = _ref4.audioEnabled;

      onToggleAudio && onToggleAudio(!audioEnabled);
    }
  }, {
    key: "handleVideoToggle",
    value: function handleVideoToggle() {
      var _this$props2 = this.props,
          localClient = _this$props2.localClient,
          onToggleVideo = _this$props2.onToggleVideo;

      var _ref5 = localClient || {},
          videoEnabled = _ref5.videoEnabled;

      onToggleVideo && onToggleVideo(!videoEnabled);
    }
  }, {
    key: "remoteClientElmIdFor",
    value: function remoteClientElmIdFor(rid) {
      return "".concat(this.id, "-remote-").concat(rid);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var props = this.props;
      var children = props.children,
          className = props.className,
          localClient = props.localClient,
          localVideoHeight = props.localVideoHeight,
          remoteClients = props.remoteClients,
          remoteVideoHeight = props.remoteVideoHeight,
          renderLocalClient = props.renderLocalClient,
          renderRemoteClient = props.renderRemoteClient,
          spinning = props.spinning;
      return React.createElement("div", _extends({}, htmlAttributesFor(props, {
        except: ['className']
      }), eventHandlersFor(props, {
        except: []
      }), {
        className: c('the-talk', className, {
          'the-talk-ready': !!localClient
        }),
        id: this.id,
        ref: this.elmRef
      }), spinning && React.createElement(TheSpin, {
        cover: true,
        enabled: true
      }), React.createElement("div", {
        className: "the-talk-video-remote-container"
      }, Object.entries(remoteClients).map(function (_ref6) {
        var _ref7 = _slicedToArray(_ref6, 2),
            rid = _ref7[0],
            client = _ref7[1];

        return React.createElement(TheTalk.RemoteClient, {
          client: client,
          id: _this2.remoteClientElmIdFor(rid),
          key: rid,
          renderClient: renderRemoteClient,
          videoHeight: cssAmount(remoteVideoHeight)
        });
      })), React.createElement("div", {
        className: "the-talk-video-local-container"
      }, React.createElement(TheTalk.LocalClient, {
        client: localClient,
        id: this.localClientElmId,
        onAudioToggle: this.handleAudioToggle,
        onVideoToggle: this.handleVideoToggle,
        renderClient: renderLocalClient,
        videoHeight: cssAmount(localVideoHeight)
      })), children);
    }
  }, {
    key: "receiveLocalClient",
    value: function () {
      var _receiveLocalClient = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee(localClient) {
        var document, clientElm, videoElm;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                document = get('document');
                clientElm = document.getElementById(this.localClientElmId);

                if (clientElm) {
                  _context.next = 5;
                  break;
                }

                console.warn('[TheTalk] local clientElm not ready');
                return _context.abrupt("return");

              case 5:
                videoElm = clientElm.querySelector('video');
                _context.next = 8;
                return setupVideoElm(videoElm, {
                  local: true,
                  stream: localClient.stream
                });

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function receiveLocalClient(_x) {
        return _receiveLocalClient.apply(this, arguments);
      }

      return receiveLocalClient;
    }()
  }, {
    key: "receiveRemoteClients",
    value: function () {
      var _receiveRemoteClients = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee2(remoteClients) {
        var document, _arr, _i, _arr$_i, rid, client, clientElm, videoElm;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                document = get('document');
                _arr = Object.entries(remoteClients);
                _i = 0;

              case 3:
                if (!(_i < _arr.length)) {
                  _context2.next = 15;
                  break;
                }

                _arr$_i = _slicedToArray(_arr[_i], 2), rid = _arr$_i[0], client = _arr$_i[1];
                clientElm = document.getElementById(this.remoteClientElmIdFor(rid));

                if (clientElm) {
                  _context2.next = 9;
                  break;
                }

                console.warn('[TheTalk] remote clientElm not ready');
                return _context2.abrupt("return");

              case 9:
                videoElm = clientElm.querySelector('video');
                _context2.next = 12;
                return setupVideoElm(videoElm, {
                  local: false,
                  stream: client.stream
                });

              case 12:
                _i++;
                _context2.next = 3;
                break;

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function receiveRemoteClients(_x2) {
        return _receiveRemoteClients.apply(this, arguments);
      }

      return receiveRemoteClients;
    }()
  }, {
    key: "id",
    get: function get() {
      return this.props.id || this._id;
    }
  }, {
    key: "localClientElmId",
    get: function get() {
      return "".concat(this.id, "-local");
    }
  }]);

  return TheTalk;
}(React.Component);

TheTalk.AUDIO_ICON = 'fas fa-microphone';
TheTalk.VIDEO_ICON = 'fas fa-video';
TheTalk.DISABLED_ICON = 'fas fa-ban';
TheTalk.Style = TheTalkStyle;
TheTalk.propTypes = {
  /** Handle video */
  localClient: PropTypes.object,
  onVideo: PropTypes.func,
  remoteClients: PropTypes.objectOf(PropTypes.object),
  renderLocalClient: PropTypes.func,
  renderRemoteClient: PropTypes.func,

  /** Height of video */
  videoHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};
TheTalk.defaultProps = {
  localClient: null,
  localVideoHeight: 100,
  remoteClients: {},
  remoteVideoHeight: 200,
  renderLocalClient: function renderLocalClient() {
    return null;
  },
  renderRemoteClient: function renderRemoteClient() {
    return null;
  }
};
TheTalk.displayName = 'TheTalk';
export default TheTalk;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,