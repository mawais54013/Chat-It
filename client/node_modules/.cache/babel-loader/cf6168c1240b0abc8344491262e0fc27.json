{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _wildemitter = require('wildemitter');\n\nvar _wildemitter2 = _interopRequireDefault(_wildemitter);\n\nvar _attachmediastream = require('attachmediastream');\n\nvar _attachmediastream2 = _interopRequireDefault(_attachmediastream);\n\nvar _mockconsole = require('mockconsole');\n\nvar _mockconsole2 = _interopRequireDefault(_mockconsole);\n\nvar _webrtc = require('./webrtc');\n\nvar _webrtc2 = _interopRequireDefault(_webrtc);\n\nvar _webrtcsupport = require('./webrtcsupport');\n\nvar _webrtcsupport2 = _interopRequireDefault(_webrtcsupport);\n\nvar _socketioconnection = require('./socketioconnection');\n\nvar _socketioconnection2 = _interopRequireDefault(_socketioconnection);\n\nvar _PeerOptimizer = require('./PeerOptimizer');\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar LioWebRTC = function (_WildEmitter) {\n  _inherits(LioWebRTC, _WildEmitter);\n\n  function LioWebRTC(opts) {\n    _classCallCheck(this, LioWebRTC);\n\n    var _this = _possibleConstructorReturn(this, (LioWebRTC.__proto__ || Object.getPrototypeOf(LioWebRTC)).call(this));\n\n    var self = _this;\n    var options = opts || {};\n    _this.config = _constants.defaultConfig;\n    var config = _this.config;\n    _this.peerDataCache = {};\n    _this.unconnectivePeers = {};\n    _this.id = '';\n    _this.roomCount = 0;\n    _this.roomName = '';\n    var connection = void 0; // Set up logger\n\n    _this.logger = function () {\n      if (opts.debug) {\n        return opts.logger || console;\n      }\n\n      return opts.logger || _mockconsole2.default;\n    }(); // Set our config from options\n\n\n    Object.keys(options).forEach(function (o) {\n      _this.config[o] = options[o];\n    });\n\n    if (options.dataOnly) {\n      _this.config.media.video = false;\n      _this.config.media.audio = false;\n      _this.config.receiveMedia.offerToReceiveAudio = false;\n      _this.config.receiveMedia.offerToReceiveVideo = false;\n    }\n\n    if (!_this.config.media.video && _this.config.media.audio) {\n      _this.config.localVideo.audio = true;\n    }\n\n    _this.capabilities = _webrtcsupport2.default;\n\n    if (_this.config.connection === null) {\n      connection = _this.connection = new _socketioconnection2.default(_this.config);\n    } else {\n      connection = _this.connection = _this.config.connection;\n    }\n\n    connection.on('connect', function () {\n      self.emit('connectionReady', connection.getSessionid());\n      self.sessionReady = true;\n      self.testReadiness();\n    });\n    connection.on('message', function (message) {\n      var peers = self.webrtc.getPeers(message.from, message.roomType);\n      var totalPeers = self.webrtc.getPeers().length;\n      var peer = void 0;\n\n      if (message.type === 'offer') {\n        if (peers.length) {\n          peers.forEach(function (p) {\n            if (p.sid === message.sid) peer = p;\n          }); // if (!peer) peer = peers[0]; // fallback for old protocol versions\n        }\n\n        if (_this.config.dataOnly && _this.config.constraints.maxPeers > 0 && totalPeers >= _this.config.constraints.maxPeers) {\n          return;\n        }\n\n        if (!peer) {\n          peer = self.webrtc.createPeer({\n            id: message.from,\n            sid: message.sid,\n            type: message.roomType,\n            enableDataChannels: self.config.enableDataChannels,\n            sharemyscreen: message.roomType === 'screen' && !message.broadcaster,\n            broadcaster: message.roomType === 'screen' && !message.broadcaster ? self.connection.getSessionid() : null\n          });\n\n          if (_this.config.dataOnly && _this.config.constraints.maxPeers > 0) {\n            _this.sendPing(peer, peer.id, true);\n          } else {\n            peer.start();\n\n            _this.emit('createdPeer', peer);\n          }\n        } else {\n          return;\n        }\n\n        peer.handleMessage(message);\n      } else if (peers.length) {\n        peers.forEach(function (p) {\n          p.handleMessage(message);\n        });\n      }\n    });\n    connection.on('remove', function (room) {\n      if (room.id !== self.connection.getSessionid()) {\n        self.webrtc.removePeers(room.id, room.type);\n      }\n    });\n    opts.logger = _this.logger;\n    opts.debug = false;\n    _this.webrtc = new _webrtc2.default(opts);\n\n    _constants.inheritedMethods.forEach(function (method) {\n      self[method] = self.webrtc[method].bind(self.webrtc);\n    }); // proxy events from WebRTC\n\n\n    _this.webrtc.on('*', function () {\n      // eslint-disable-line\n      self.emit.apply(self, arguments); // eslint-disable-line\n    }); // log all events in debug mode\n\n\n    if (config.debug) {\n      _this.on('*', _this.logger.log.bind(_this.logger, 'LioWebRTC event:'));\n    } // check for readiness\n\n\n    _this.webrtc.on('localStream', function () {\n      self.testReadiness();\n    });\n\n    _this.webrtc.on('message', function (payload) {\n      self.connection.emit('message', payload);\n    });\n\n    _this.webrtc.on('peerStreamAdded', _this.handlePeerStreamAdded.bind(_this));\n\n    _this.webrtc.on('peerStreamRemoved', _this.handlePeerStreamRemoved.bind(_this)); // echo cancellation attempts\n\n\n    if (_this.config.adjustPeerVolume) {\n      _this.webrtc.on('speaking', _this.setVolumeForAll.bind(_this, _this.config.peerVolumeWhenSpeaking));\n\n      _this.webrtc.on('stoppedSpeaking', _this.setVolumeForAll.bind(_this, 1));\n    }\n\n    connection.on('stunservers', function (args) {\n      // resets/overrides the config\n      self.webrtc.config.peerConnectionConfig.iceServers = args;\n      self.emit('stunservers', args);\n    });\n    connection.on('turnservers', function (args) {\n      // appends to the config\n      self.webrtc.config.peerConnectionConfig.iceServers = self.webrtc.config.peerConnectionConfig.iceServers.concat(args);\n      self.emit('turnservers', args);\n    });\n    /*\n    this.webrtc.on('iceFailed', (peer) => {\n      // local ice failure\n    });\n    this.webrtc.on('connectivityError', (peer) => {\n      // remote ice failure\n    });\n    */\n    // sending mute/unmute to all peers\n\n    _this.webrtc.on('audioOn', function () {\n      self.webrtc.sendToAll('unmute', {\n        name: 'audio'\n      });\n    });\n\n    _this.webrtc.on('audioOff', function () {\n      self.webrtc.sendToAll('mute', {\n        name: 'audio'\n      });\n    });\n\n    _this.webrtc.on('videoOn', function () {\n      self.webrtc.sendToAll('unmute', {\n        name: 'video'\n      });\n    });\n\n    _this.webrtc.on('videoOff', function () {\n      self.webrtc.sendToAll('mute', {\n        name: 'video'\n      });\n    });\n\n    self.on('removedPeer', function (peer) {\n      if (peer.id) {\n        (0, _PeerOptimizer.removeConnection)(_this.id, peer.id);\n      }\n    });\n    self.on('channelClose', function (channel) {\n      if (channel.label === 'liowebrtc' && _this.config.dataOnly && _this.config.constraints.maxPeers > 0 && (0, _PeerOptimizer.getNeighbors)(_this.id).length < _this.config.constraints.minPeers) {\n        _this.connectToRandomPeer();\n      }\n    });\n\n    _this.webrtc.on('channelMessage', function (peer, label, data) {\n      if (data.payload._id && _this.peerDataCache[data.payload._id]) {\n        return;\n      }\n\n      switch (data.type) {\n        case '_volume':\n          self.emit('remoteVolumeChange', data.payload, peer);\n          break;\n\n        case '_propagate':\n          if (_this.seenPeerEvent(data.payload._id)) {\n            return;\n          } // Re-propagate message\n\n\n          _this.propagateMessage(data.payload);\n\n          _this.cachePeerEvent(data.payload._id, data.payload.senderId); // Emit the propagated data as if it were received directly\n\n\n          self.emit('receivedPeerData', data.payload.type, data.payload.payload, {\n            id: data.payload.senderId,\n            nick: data.payload.senderNick,\n            isForwarded: true\n          });\n          break;\n\n        case '_ping':\n          _this.sendPong(peer, data.payload);\n\n          break;\n\n        case '_pong':\n          (0, _PeerOptimizer.addConnection)(_this.id, peer.id, Date.now() - data.payload[0] + data.payload[1]);\n          break;\n\n        case '_connections':\n          data.payload.forEach(function (connection) {\n            return (0, _PeerOptimizer.addConnection)(peer.id, connection.id, connection.weight);\n          });\n          break;\n\n        default:\n          if (_this.seenPeerEvent(data._id)) {\n            return;\n          }\n\n          _this.cachePeerEvent(data._id, peer.id);\n\n          self.emit('receivedPeerData', data.type, data.payload, peer);\n\n          if (_this.config.constraints.maxPeers > 0 && data.shout) {\n            data.senderId = peer.id;\n            var fwdData = Object.assign({}, {\n              senderId: peer.id,\n              senderNick: peer.nick\n            }, data);\n\n            _this.propagateMessage(fwdData);\n          }\n\n          break;\n      }\n    });\n\n    if (_this.config.autoRequestMedia) _this.startLocalVideo();\n    return _this;\n  }\n\n  _createClass(LioWebRTC, [{\n    key: 'cachePeerEvent',\n    value: function cachePeerEvent(eventId, peerId) {\n      if (!this.peerDataCache[eventId]) {\n        this.peerDataCache[eventId] = {\n          recipients: _defineProperty({}, peerId, true),\n          timestamp: Date.now()\n        };\n        return;\n      }\n\n      if (!this.peerDataCache[eventId].recipients[peerId]) {\n        this.peerDataCache[eventId].recipients[peerId] = true;\n      }\n\n      if (Object.keys(this.peerDataCache).length > 1024) {\n        // Sort by timestamp\n        var sortedCache = Object.entries(this.peerDataCache).sort(function (a, b) {\n          return a[1].timestamp - b[1].timestamp;\n        }); // Delete oldest item\n\n        delete this.peerDataCache[sortedCache[0][0]];\n      }\n    }\n  }, {\n    key: 'seenPeerEvent',\n    value: function seenPeerEvent(eventId) {\n      if (this.peerDataCache[eventId]) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'sendPong',\n    value: function sendPong(peer, start) {\n      var channel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.defaultChannel;\n      var now = Date.now();\n      peer.sendDirectly('_pong', [now, now - start], channel);\n    }\n  }, {\n    key: 'sendPing',\n    value: function sendPing(peer, peerId) {\n      var firstPing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var channel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _constants.defaultChannel;\n      if (firstPing) peer.start();\n      setTimeout(this.ping.bind(this, peer, peerId, firstPing, channel), 1000);\n    }\n  }, {\n    key: 'ping',\n    value: function ping(peer, peerId, firstPing, channel) {\n      var tries = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n      if (peer.sendDirectly('_ping', Date.now(), channel)) {\n        // this.logger.log('sent ping to', peer.id);\n        if (firstPing) this.emit('createdPeer', peer);\n      } else {\n        // The channel is closed\n        if (tries === 2) {\n          this.unconnectivePeers[peerId] = true;\n          peer.end(false);\n          return;\n        }\n\n        setTimeout(this.ping.bind(this, peer, peerId, firstPing, channel, tries + 1), 1000);\n      }\n    }\n  }, {\n    key: 'connectToRandomPeer',\n    value: function connectToRandomPeer() {\n      var _this2 = this;\n\n      this.getClients(function (err, clients) {\n        var ids = Object.keys(clients).filter(function (c) {\n          return !(_this2.unconnectivePeers[c] === true || c === _this2.id || (0, _PeerOptimizer.isNeighbor)(_this2.id, c));\n        });\n\n        if (ids.length) {\n          var randId = ids[Math.floor(Math.random() * ids.length)];\n\n          _this2.connectToPeer(randId, clients[randId]);\n        }\n      });\n    }\n  }, {\n    key: 'sendConnections',\n    value: function sendConnections(peer) {\n      var _this3 = this;\n\n      var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.defaultChannel;\n\n      if (peer.sendDirectly('_connections', this.getPeers().map(function (p) {\n        var edge = _PeerOptimizer.Graph.findEdge(_this3.id, p.id);\n\n        return {\n          id: p.id,\n          weight: edge.getWeight()\n        };\n      }), channel)) {// connections sent\n      } else {\n        peer.end();\n      }\n    }\n  }, {\n    key: 'propagateMessage',\n    value: function propagateMessage(data) {\n      var _this4 = this;\n\n      var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.defaultChannel;\n      this.getPeers().forEach(function (peer) {\n        if (!_this4.peerDataCache[data._id]) {\n          _this4.cachePeerEvent(data._id, data.senderId);\n        }\n\n        if (!_this4.peerDataCache[data._id].recipients[peer.id]) {\n          peer.sendDirectly('_propagate', data, channel, true);\n        }\n      });\n    }\n  }, {\n    key: 'trimPeers',\n    value: function trimPeers() {\n      var pid = (0, _PeerOptimizer.getDroppablePeer)();\n      var peer = this.webrtc.getPeerById(pid);\n    }\n  }, {\n    key: 'leaveRoom',\n    value: function leaveRoom() {\n      if (this.roomName) {\n        this.connection.emit('leave');\n\n        while (this.webrtc.peers.length) {\n          this.webrtc.peers[0].end();\n        }\n\n        this.emit('leftRoom', this.roomName);\n        this.roomName = undefined;\n      }\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this.connection.disconnect();\n      delete this.connection;\n    }\n  }, {\n    key: 'handlePeerStreamAdded',\n    value: function handlePeerStreamAdded(stream, peer) {\n      var self = this; //this.emit('peerStreamAdded', stream, peer);\n      // send our mute status to new peer if we're muted\n      // currently called with a small delay because it arrives before\n      // the video element is created otherwise (which happens after\n      // the async setRemoteDescription-createAnswer)\n\n      setTimeout(function () {\n        if (!self.webrtc.isAudioEnabled()) {\n          peer.send('mute', {\n            name: 'audio'\n          });\n        }\n\n        if (!self.webrtc.isVideoEnabled()) {\n          peer.send('mute', {\n            name: 'video'\n          });\n        }\n      }, 250);\n    }\n  }, {\n    key: 'handlePeerStreamRemoved',\n    value: function handlePeerStreamRemoved(peer) {// (this.config.media.video) this.emit('peerStreamRemoved', peer);\n    }\n  }, {\n    key: 'getDomId',\n    value: function getDomId(peer) {\n      // eslint-disable-line\n      return [peer.id, peer.type, peer.broadcaster ? 'broadcasting' : 'incoming'].join('_');\n    }\n  }, {\n    key: 'getMyId',\n    value: function getMyId() {\n      return this.id;\n    }\n  }, {\n    key: 'getContainerId',\n    value: function getContainerId(peer) {\n      return 'container_' + this.getDomId(peer);\n    } // set volume on video tag for all peers takse a value between 0 and 1\n\n  }, {\n    key: 'setVolumeForAll',\n    value: function setVolumeForAll(volume) {\n      this.webrtc.peers.forEach(function (peer) {\n        if (peer.videoEl) peer.videoEl.volume = volume;\n      });\n    }\n  }, {\n    key: 'getClients',\n    value: function getClients(callback) {\n      this.connection.emit('getClients', this.roomName, function (err, clients) {\n        if (callback) callback(err, clients.clients);\n      });\n    }\n  }, {\n    key: 'joinRoom',\n    value: function joinRoom(name, cb) {\n      var _this5 = this;\n\n      var self = this;\n      this.roomName = name;\n      this.connection.emit('join', name, function (err, roomDescription) {\n        if (err) {\n          self.emit('error', err);\n        } else {\n          var id = void 0;\n          var client = void 0;\n          var type = void 0;\n          var peer = void 0;\n          _this5.roomCount = Object.keys(roomDescription.clients).length; // console.log(roomDescription);\n\n          _this5.id = roomDescription.you;\n          (0, _PeerOptimizer.addNode)(_this5.id);\n          _this5.unconnectivePeers[_this5.id] = true;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = Object.keys(roomDescription.clients).reverse().filter(function (item) {\n              return item !== _this5.id;\n            })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              id = _step.value;\n              client = roomDescription.clients[id];\n\n              for (type in client) {\n                if (client[type]) {\n                  var peerCount = _this5.webrtc.getPeers().length;\n\n                  if (_this5.config.dataOnly && _this5.config.constraints.maxPeers > 0 && (peerCount >= _this5.config.constraints.minPeers || peerCount >= _this5.config.constraints.maxPeers)) {\n                    break;\n                  }\n\n                  peer = self.webrtc.createPeer({\n                    id: id,\n                    type: type,\n                    enableDataChannels: self.config.enableDataChannels && type !== 'screen',\n                    receiveMedia: {\n                      offerToReceiveAudio: type !== 'screen' && !_this5.config.dataOnly && _this5.config.receiveMedia.offerToReceiveAudio ? 1 : 0,\n                      offerToReceiveVideo: !_this5.config.dataOnly && self.config.receiveMedia.offerToReceiveVideo ? 1 : 0\n                    }\n                  });\n\n                  if (_this5.config.dataOnly && _this5.config.constraints.maxPeers > 0) {\n                    _this5.sendPing(peer, peer.id, true);\n                  } else {\n                    peer.start();\n\n                    _this5.emit('createdPeer', peer);\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        if (cb) cb(err, roomDescription);\n        self.emit('joinedRoom', name);\n      });\n    }\n  }, {\n    key: 'startLocalVideo',\n    value: function startLocalVideo() {\n      var _this6 = this;\n\n      var self = this;\n      this.webrtc.start(this.config.media, function (err, stream) {\n        if (err) {\n          self.emit('localMediaError', err);\n        } else {\n          (0, _attachmediastream2.default)(stream, _this6.config.localVideoEl, _this6.config.localVideo);\n        }\n      });\n    }\n  }, {\n    key: 'attachStream',\n    value: function attachStream(stream, el, opts) {\n      // eslint-disable-line\n      var options = {\n        autoplay: true,\n        muted: false,\n        mirror: true,\n        audio: false\n      };\n      (0, _attachmediastream2.default)(stream, el, opts || options);\n    }\n  }, {\n    key: 'setLocalVideo',\n    value: function setLocalVideo(element) {\n      this.config.localVideoEl = element;\n    }\n  }, {\n    key: 'stopLocalVideo',\n    value: function stopLocalVideo() {\n      this.webrtc.stop();\n    }\n  }, {\n    key: 'quit',\n    value: function quit() {\n      this.stopLocalVideo();\n      this.leaveRoom();\n      this.disconnect();\n    }\n  }, {\n    key: 'testReadiness',\n    value: function testReadiness() {\n      var self = this;\n\n      if (this.sessionReady) {\n        if (this.config.dataOnly || !this.config.media.video && !this.config.media.audio || this.webrtc.localStreams.length > 0) {\n          self.emit('ready', self.connection.getSessionid());\n        }\n      }\n    }\n  }, {\n    key: 'connectToPeer',\n    value: function connectToPeer(peerId, client) {\n      var type = void 0;\n      var peer = void 0;\n\n      for (type in client) {\n        if (client[type]) {\n          var peerCount = this.webrtc.getPeers().length;\n\n          if (this.config.constraints.maxPeers > 0 && peerCount >= this.config.constraints.maxPeers) {\n            break;\n          }\n\n          peer = this.webrtc.createPeer({\n            id: peerId,\n            type: type,\n            enableDataChannels: this.config.enableDataChannels && type !== 'screen',\n            receiveMedia: {\n              offerToReceiveAudio: type !== 'screen' && !this.config.dataOnly && this.config.receiveMedia.offerToReceiveAudio ? 1 : 0,\n              offerToReceiveVideo: !this.config.dataOnly && this.config.receiveMedia.offerToReceiveVideo ? 1 : 0\n            }\n          });\n\n          if (this.config.dataOnly && this.config.constraints.maxPeers > 0) {\n            this.sendPing(peer, peerId, true);\n          } else {\n            peer.start();\n            this.emit('createdPeer', peer);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'createRoom',\n    value: function createRoom(name, cb) {\n      this.roomName = name;\n\n      if (arguments.length === 2) {\n        this.connection.emit('create', name, cb);\n      } else {\n        this.connection.emit('create', name);\n      }\n    }\n  }, {\n    key: 'sendFile',\n    value: function sendFile() {\n      if (!_webrtcsupport2.default.dataChannel) {\n        return this.emit('error', new Error('DataChannelNotSupported'));\n      }\n    }\n  }]);\n\n  return LioWebRTC;\n}(_wildemitter2.default);\n\nexports.default = LioWebRTC;","map":null,"metadata":{},"sourceType":"script"}