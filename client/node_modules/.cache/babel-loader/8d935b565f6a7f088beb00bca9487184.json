{"ast":null,"code":"import _classCallCheck from \"/Users/muhammadawais/Desktop/Chat-It/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/muhammadawais/Desktop/Chat-It/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/muhammadawais/Desktop/Chat-It/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/muhammadawais/Desktop/Chat-It/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/muhammadawais/Desktop/Chat-It/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/muhammadawais/Desktop/Chat-It/client/src/pages/Home.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../Components/header\";\nimport rand from \"random-key\";\nimport { database } from \"firebase\";\n\nvar HomePage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HomePage, _React$Component);\n\n  function HomePage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HomePage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      key: rand.generate(5),\n      num: null\n    };\n\n    _this.componentDidMount = function () {\n      database().ref(\"code-sessions\").on(\"value\", function (s) {\n        _this.setState({\n          num: s.numChildren()\n        });\n      });\n    };\n\n    _this.onNewGround = function () {\n      database().ref(\"code-sessions/\" + _this.state.key).set({\n        content: \"Happy Coding\",\n        createdon: Date()\n      });\n\n      _this.props.history.push(\"/\" + _this.state.key);\n    };\n\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(Header, {\n        extras: this.state.num ? \"Total \".concat(this.state.num, \"+ Shares\") : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"homepage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), \"Share Code within \", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Realtime\"), \".\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), \"Anywhere, Anytime and with \", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Anyone\"), \".\"), React.createElement(\"p\", {\n        className: \"sub-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Simple Realtime Code Sharing Editor App. Using Firebase Realtime Database and Code Mirror as Editor.\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn\",\n        onClick: this.onNewGround,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Share Code\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        id: \"localVideo\",\n        autoPlay: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        id: \"remoteVideo\",\n        autoPlay: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"script\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"\\n               if (!location.hash) {\\n                location.hash = Math.floor(Math.random() * 0xFFFFFF).toString(16);\\n              }\\n              const roomHash = location.hash.substring(1);\\n              \\n              // TODO: Replace with your own channel ID\\n              const drone = new ScaleDrone('yiS12Ts5RdNhebyM');\\n              // Room name needs to be prefixed with 'observable-'\\n              const roomName = 'observable-' + roomHash;\\n              const configuration = {\\n                iceServers: [{\\n                  urls: 'stun:stun.l.google.com:19302'\\n                }]\\n              };\\n              let room;\\n              let pc;\\n              \\n              \\n              function onSuccess() {};\\n              function onError(error) {\\n                console.error(error);\\n              };\\n              \\n              drone.on('open', error => {\\n                if (error) {\\n                  return console.error(error);\\n                }\\n                room = drone.subscribe(roomName);\\n                room.on('open', error => {\\n                  if (error) {\\n                    onError(error);\\n                  }\\n                });\\n                // We're connected to the room and received an array of 'members'\\n                // connected to the room (including us). Signaling server is ready.\\n                room.on('members', members => {\\n                  console.log('MEMBERS', members);\\n                  // If we are the second user to connect to the room we will be creating the offer\\n                  const isOfferer = members.length === 2;\\n                  startWebRTC(isOfferer);\\n                });\\n              });\\n              \\n              // Send signaling data via Scaledrone\\n              function sendMessage(message) {\\n                drone.publish({\\n                  room: roomName,\\n                  message\\n                });\\n              }\\n              \\n              function startWebRTC(isOfferer) {\\n                pc = new RTCPeerConnection(configuration);\\n              \\n                // 'onicecandidate' notifies us whenever an ICE agent needs to deliver a\\n                // message to the other peer through the signaling server\\n                pc.onicecandidate = event => {\\n                  if (event.candidate) {\\n                    sendMessage({'candidate': event.candidate});\\n                  }\\n                };\\n              \\n                // If user is offerer let the 'negotiationneeded' event create the offer\\n                if (isOfferer) {\\n                  pc.onnegotiationneeded = () => {\\n                    pc.createOffer().then(localDescCreated).catch(onError);\\n                  }\\n                }\\n              \\n                // When a remote stream arrives display it in the #remoteVideo element\\n                pc.ontrack = event => {\\n                  const stream = event.streams[0];\\n                  if (!remoteVideo.srcObject || remoteVideo.srcObject.id !== stream.id) {\\n                    remoteVideo.srcObject = stream;\\n                  }\\n                };\\n              \\n                navigator.mediaDevices.getUserMedia({\\n                  audio: true,\\n                  video: true,\\n                }).then(stream => {\\n                  // Display your local video in #localVideo element\\n                  localVideo.srcObject = stream;\\n                  // Add your stream to be sent to the conneting peer\\n                  stream.getTracks().forEach(track => pc.addTrack(track, stream));\\n                }, onError);\\n              \\n                // Listen to signaling data from Scaledrone\\n                room.on('data', (message, client) => {\\n                  // Message was sent by us\\n                  if (client.id === drone.clientId) {\\n                    return;\\n                  }\\n              \\n                  if (message.sdp) {\\n                    // This is called after receiving an offer or answer from another peer\\n                    pc.setRemoteDescription(new RTCSessionDescription(message.sdp), () => {\\n                      // When receiving an offer lets answer it\\n                      if (pc.remoteDescription.type === 'offer') {\\n                        pc.createAnswer().then(localDescCreated).catch(onError);\\n                      }\\n                    }, onError);\\n                  } else if (message.candidate) {\\n                    // Add the new ICE candidate to our connections remote description\\n                    pc.addIceCandidate(\\n                      new RTCIceCandidate(message.candidate), onSuccess, onError\\n                    );\\n                  }\\n                });\\n              }\\n              \\n              function localDescCreated(desc) {\\n                pc.setLocalDescription(\\n                  desc,\\n                  () => sendMessage({'sdp': pc.localDescription}),\\n                  onError\\n                );\\n              }\\n            \"))));\n    }\n  }]);\n\n  return HomePage;\n}(React.Component);\n\nexport { HomePage as default };","map":{"version":3,"sources":["/Users/muhammadawais/Desktop/Chat-It/client/src/pages/Home.js"],"names":["React","Link","Header","rand","database","HomePage","state","key","generate","num","componentDidMount","ref","on","s","setState","numChildren","onNewGround","set","content","createdon","Date","props","history","push","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,QAAT,QAAyB,UAAzB;;IAEqBC,Q;;;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,GAAG,EAAEJ,IAAI,CAACK,QAAL,CAAc,CAAd,CADC;AAENC,MAAAA,GAAG,EAAE;AAFC,K;;UAIRC,iB,GAAoB,YAAM;AACxBN,MAAAA,QAAQ,GACLO,GADH,CACO,eADP,EAEGC,EAFH,CAEM,OAFN,EAEe,UAAAC,CAAC,EAAI;AAChB,cAAKC,QAAL,CAAc;AAAEL,UAAAA,GAAG,EAAEI,CAAC,CAACE,WAAF;AAAP,SAAd;AACD,OAJH;AAKD,K;;UAEDC,W,GAAc,YAAM;AAClBZ,MAAAA,QAAQ,GACLO,GADH,CACO,mBAAmB,MAAKL,KAAL,CAAWC,GADrC,EAEGU,GAFH,CAEO;AACHC,QAAAA,OAAO,EAAE,cADN;AAEHC,QAAAA,SAAS,EAAEC,IAAI;AAFZ,OAFP;;AAMA,YAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,MAAM,MAAKjB,KAAL,CAAWC,GAAzC;AACD,K;;;;;;;6BACQ;AAEP,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWG,GAAX,mBAA0B,KAAKH,KAAL,CAAWG,GAArC,gBAAqD,IAD/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAIE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,wBAEoB;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFpB,OAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,iCAI6B;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJ7B,MADF,EASE;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gHATF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAwB,QAAA,OAAO,EAAE,KAAKO,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CAbF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,EAAE,EAAC,YAAV;AAAuB,QAAA,QAAQ,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAO,QAAA,EAAE,EAAC,aAAV;AAAwB,QAAA,QAAQ,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,88JAHF,CAlBF,CAJF,CADF;AAsJD;;;;EA9KmChB,KAAK,CAACwB,S;;SAAvBnB,Q","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../Components/header\";\nimport rand from \"random-key\";\nimport { database } from \"firebase\";\n\nexport default class HomePage extends React.Component {\n  state = {\n    key: rand.generate(5),\n    num: null\n  };\n  componentDidMount = () => {\n    database()\n      .ref(\"code-sessions\")\n      .on(\"value\", s => {\n        this.setState({ num: s.numChildren() });\n      });\n  };\n\n  onNewGround = () => {\n    database()\n      .ref(\"code-sessions/\" + this.state.key)\n      .set({\n        content: \"Happy Coding\",\n        createdon: Date()\n      });\n    this.props.history.push(\"/\" + this.state.key);\n  };\n  render() {\n    \n    return (\n      <React.Fragment>\n        <Header\n          extras={this.state.num ? `Total ${this.state.num}+ Shares` : null}\n        />\n        <div className=\"homepage\">\n          <p className=\"title\">\n            <br />\n            Share Code within <span className=\"highlight\">Realtime</span>.\n            <br />\n            Anywhere, Anytime and with <span className=\"highlight\">Anyone</span>\n            .\n          </p>\n\n          <p className=\"sub-title\">\n            Simple Realtime Code Sharing Editor App. Using Firebase Realtime\n            Database and Code Mirror as Editor.\n          </p>\n          <div>\n            <button className=\"btn\" onClick={this.onNewGround}>\n              Share Code\n            </button>\n          </div>\n          <div>\n            <video id=\"localVideo\" autoPlay></video>\n            <video id=\"remoteVideo\" autoPlay></video>\n            <script>{`\n               if (!location.hash) {\n                location.hash = Math.floor(Math.random() * 0xFFFFFF).toString(16);\n              }\n              const roomHash = location.hash.substring(1);\n              \n              // TODO: Replace with your own channel ID\n              const drone = new ScaleDrone('yiS12Ts5RdNhebyM');\n              // Room name needs to be prefixed with 'observable-'\n              const roomName = 'observable-' + roomHash;\n              const configuration = {\n                iceServers: [{\n                  urls: 'stun:stun.l.google.com:19302'\n                }]\n              };\n              let room;\n              let pc;\n              \n              \n              function onSuccess() {};\n              function onError(error) {\n                console.error(error);\n              };\n              \n              drone.on('open', error => {\n                if (error) {\n                  return console.error(error);\n                }\n                room = drone.subscribe(roomName);\n                room.on('open', error => {\n                  if (error) {\n                    onError(error);\n                  }\n                });\n                // We're connected to the room and received an array of 'members'\n                // connected to the room (including us). Signaling server is ready.\n                room.on('members', members => {\n                  console.log('MEMBERS', members);\n                  // If we are the second user to connect to the room we will be creating the offer\n                  const isOfferer = members.length === 2;\n                  startWebRTC(isOfferer);\n                });\n              });\n              \n              // Send signaling data via Scaledrone\n              function sendMessage(message) {\n                drone.publish({\n                  room: roomName,\n                  message\n                });\n              }\n              \n              function startWebRTC(isOfferer) {\n                pc = new RTCPeerConnection(configuration);\n              \n                // 'onicecandidate' notifies us whenever an ICE agent needs to deliver a\n                // message to the other peer through the signaling server\n                pc.onicecandidate = event => {\n                  if (event.candidate) {\n                    sendMessage({'candidate': event.candidate});\n                  }\n                };\n              \n                // If user is offerer let the 'negotiationneeded' event create the offer\n                if (isOfferer) {\n                  pc.onnegotiationneeded = () => {\n                    pc.createOffer().then(localDescCreated).catch(onError);\n                  }\n                }\n              \n                // When a remote stream arrives display it in the #remoteVideo element\n                pc.ontrack = event => {\n                  const stream = event.streams[0];\n                  if (!remoteVideo.srcObject || remoteVideo.srcObject.id !== stream.id) {\n                    remoteVideo.srcObject = stream;\n                  }\n                };\n              \n                navigator.mediaDevices.getUserMedia({\n                  audio: true,\n                  video: true,\n                }).then(stream => {\n                  // Display your local video in #localVideo element\n                  localVideo.srcObject = stream;\n                  // Add your stream to be sent to the conneting peer\n                  stream.getTracks().forEach(track => pc.addTrack(track, stream));\n                }, onError);\n              \n                // Listen to signaling data from Scaledrone\n                room.on('data', (message, client) => {\n                  // Message was sent by us\n                  if (client.id === drone.clientId) {\n                    return;\n                  }\n              \n                  if (message.sdp) {\n                    // This is called after receiving an offer or answer from another peer\n                    pc.setRemoteDescription(new RTCSessionDescription(message.sdp), () => {\n                      // When receiving an offer lets answer it\n                      if (pc.remoteDescription.type === 'offer') {\n                        pc.createAnswer().then(localDescCreated).catch(onError);\n                      }\n                    }, onError);\n                  } else if (message.candidate) {\n                    // Add the new ICE candidate to our connections remote description\n                    pc.addIceCandidate(\n                      new RTCIceCandidate(message.candidate), onSuccess, onError\n                    );\n                  }\n                });\n              }\n              \n              function localDescCreated(desc) {\n                pc.setLocalDescription(\n                  desc,\n                  () => sendMessage({'sdp': pc.localDescription}),\n                  onError\n                );\n              }\n            `}</script>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}