{"ast":null,"code":"import getTimeParts from '../helpers/getTimeParts';\nimport TimerState from './TimerState';\n\nvar Timer =\n/** @class */\nfunction () {\n  function Timer(_a) {\n    var _b = _a.initialTime,\n        initialTime = _b === void 0 ? 0 : _b,\n        _c = _a.direction,\n        direction = _c === void 0 ? 'forward' : _c,\n        _d = _a.timeToUpdate,\n        timeToUpdate = _d === void 0 ? 1000 : _d,\n        _e = _a.lastUnit,\n        lastUnit = _e === void 0 ? 'd' : _e,\n        _f = _a.checkpoints,\n        checkpoints = _f === void 0 ? [] : _f,\n        _g = _a.onChange,\n        onChange = _g === void 0 ? function () {} : _g;\n    this.initialTime = initialTime;\n    this.time = initialTime;\n    this.direction = direction;\n    this.timeToUpdate = timeToUpdate;\n    this.lastUnit = lastUnit;\n    this.checkpoints = checkpoints;\n    this.innerState = new TimerState(onChange);\n    this.onChange = onChange;\n    this.timerId = null;\n  }\n\n  Object.defineProperty(Timer.prototype, \"state\", {\n    get: function get() {\n      return this.innerState.getState();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Timer.prototype, \"timeParts\", {\n    get: function get() {\n      return this.getTimeParts(this.computeTime());\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Timer.prototype.getTimeParts = function (time) {\n    return getTimeParts(time, this.lastUnit);\n  };\n\n  Timer.prototype.setTime = function (time) {\n    this.time = time;\n  };\n\n  Timer.prototype.getTime = function () {\n    return this.time;\n  };\n\n  Timer.prototype.setDirection = function (direction) {\n    this.direction = direction;\n  };\n\n  Timer.prototype.setCheckpoints = function (checkpoints) {\n    this.checkpoints = checkpoints;\n  };\n\n  Timer.prototype.start = function () {\n    if (this.innerState.setPlaying()) {\n      this.setTimerInterval(true);\n    }\n  };\n\n  Timer.prototype.resume = function () {\n    if (!this.innerState.isStopped() && this.innerState.setPlaying()) {\n      this.setTimerInterval();\n    }\n  };\n\n  Timer.prototype.pause = function () {\n    if (this.innerState.setPaused()) {\n      clearInterval(this.timerId);\n    }\n  };\n\n  Timer.prototype.stop = function () {\n    if (this.innerState.setStopped()) {\n      clearInterval(this.timerId);\n    }\n  };\n\n  Timer.prototype.reset = function () {\n    this.time = this.initialTime;\n    this.onChange(this.getTimeParts(this.time));\n  };\n\n  Timer.prototype.setTimerInterval = function (callImmediately) {\n    var _this = this;\n\n    if (callImmediately === void 0) {\n      callImmediately = false;\n    }\n\n    var repeatedFunc = function repeatedFunc() {\n      var oldTime = _this.time;\n\n      var updatedTime = _this.computeTime();\n\n      _this.onChange(_this.getTimeParts(updatedTime));\n\n      _this.checkpoints.map(function (_a) {\n        var time = _a.time,\n            callback = _a.callback;\n        var checkForForward = time > oldTime && time <= updatedTime;\n        var checkForBackward = time < oldTime && time >= updatedTime;\n        var checkIntersection = _this.direction === 'backward' ? checkForBackward : checkForForward;\n\n        if (checkIntersection) {\n          callback();\n        }\n      });\n    };\n\n    callImmediately && this.onChange(this.getTimeParts(this.time));\n    this.timerId = window.setInterval(repeatedFunc, this.timeToUpdate);\n  };\n\n  Timer.prototype.computeTime = function () {\n    if (this.innerState.isPlaying()) {\n      switch (this.direction) {\n        case 'forward':\n          this.time = this.time + this.timeToUpdate;\n          return this.time;\n\n        case 'backward':\n          {\n            this.time = this.time - this.timeToUpdate;\n\n            if (this.time < 0) {\n              this.stop();\n              return 0;\n            }\n\n            return this.time;\n          }\n\n        default:\n          return this.time;\n      }\n    }\n\n    return this.time;\n  };\n\n  return Timer;\n}();\n\nexport default Timer;","map":null,"metadata":{},"sourceType":"module"}