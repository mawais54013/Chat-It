{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _hark = require('hark');\n\nvar _hark2 = _interopRequireDefault(_hark);\n\nvar _wildemitter = require('wildemitter');\n\nvar _wildemitter2 = _interopRequireDefault(_wildemitter);\n\nvar _mockconsole = require('mockconsole');\n\nvar _mockconsole2 = _interopRequireDefault(_mockconsole);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction isAllTracksEnded(stream) {\n  var isAllTracksEnded = true;\n  stream.getTracks().forEach(function (t) {\n    isAllTracksEnded = t.readyState === 'ended' && isAllTracksEnded;\n  });\n  return isAllTracksEnded;\n}\n\nfunction shouldWorkAroundFirefoxStopStream() {\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  if (!window.navigator.mozGetUserMedia) {\n    return false;\n  }\n\n  var match = window.navigator.userAgent.match(/Firefox\\/(\\d+)\\./);\n  var version = match && match.length >= 1 && parseInt(match[1], 10);\n  return version < 50;\n}\n\nvar LocalMedia = function (_WildEmitter) {\n  _inherits(LocalMedia, _WildEmitter);\n\n  function LocalMedia(opts) {\n    _classCallCheck(this, LocalMedia);\n\n    var _this = _possibleConstructorReturn(this, (LocalMedia.__proto__ || Object.getPrototypeOf(LocalMedia)).call(this));\n\n    var config = _this.config = {\n      detectSpeakingEvents: false,\n      audioFallback: false,\n      media: {\n        audio: true,\n        video: true\n      },\n      harkOptions: null,\n      logger: _mockconsole2.default\n    };\n    var item = void 0;\n\n    for (item in opts) {\n      if (opts.hasOwnProperty(item)) {\n        _this.config[item] = opts[item];\n      }\n    }\n\n    _this.logger = config.logger;\n    _this._log = _this.logger.log.bind(_this.logger, 'LocalMedia:');\n    _this._logerror = _this.logger.error.bind(_this.logger, 'LocalMedia:');\n    _this.localStreams = [];\n    _this.localScreens = [];\n\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      _this._logerror('Your browser does not support local media capture.');\n    }\n\n    _this._audioMonitors = [];\n\n    _this.on('localStreamStopped', _this._stopAudioMonitor.bind(_this));\n\n    _this.on('localScreenStopped', _this._stopAudioMonitor.bind(_this));\n\n    return _this;\n  }\n\n  _createClass(LocalMedia, [{\n    key: 'start',\n    value: function start(mediaConstraints, cb) {\n      var self = this;\n      var constraints = mediaConstraints || this.config.media;\n      this.emit('localStreamRequested', constraints);\n      navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n        if (constraints.audio && self.config.detectSpeakingEvents) {\n          self._setupAudioMonitor(stream, self.config.harkOptions);\n        }\n\n        self.localStreams.push(stream);\n        stream.getTracks().forEach(function (track) {\n          track.addEventListener('ended', function () {\n            if (isAllTracksEnded(stream)) {\n              self._removeStream(stream);\n            }\n          });\n        });\n        self.emit('localStream', stream);\n\n        if (cb) {\n          return cb(null, stream);\n        }\n      }).catch(function (err) {\n        // Fallback for users without a camera\n        if (self.config.audioFallback && err.name === 'NotFoundError' && constraints.video !== false) {\n          constraints.video = false;\n          self.start(constraints, cb);\n          return;\n        }\n\n        self.emit('localStreamRequestFailed', constraints);\n\n        if (cb) {\n          return cb(err, null);\n        }\n      });\n    }\n  }, {\n    key: 'stop',\n    value: function stop(stream) {\n      this.stopStream(stream);\n    }\n  }, {\n    key: 'stopStream',\n    value: function stopStream(stream) {\n      var self = this;\n\n      if (stream) {\n        var idx = this.localStreams.indexOf(stream);\n\n        if (idx > -1) {\n          stream.getTracks().forEach(function (track) {\n            track.stop();\n          }); // Half-working fix for Firefox, see: https://bugzilla.mozilla.org/show_bug.cgi?id=1208373\n\n          if (shouldWorkAroundFirefoxStopStream()) {\n            this._removeStream(stream);\n          }\n        }\n      } else {\n        this.localStreams.forEach(function (stream) {\n          stream.getTracks().forEach(function (track) {\n            track.stop();\n          }); // Half-working fix for Firefox, see: https://bugzilla.mozilla.org/show_bug.cgi?id=1208373\n\n          if (shouldWorkAroundFirefoxStopStream()) {\n            self._removeStream(stream);\n          }\n        });\n      }\n    } // Audio controls\n\n  }, {\n    key: 'mute',\n    value: function mute() {\n      this._audioEnabled(false);\n\n      this.emit('audioOff');\n    }\n  }, {\n    key: 'unmute',\n    value: function unmute() {\n      this._audioEnabled(true);\n\n      this.emit('audioOn');\n    } // Video controls\n\n  }, {\n    key: 'pauseVideo',\n    value: function pauseVideo() {\n      this._videoEnabled(false);\n\n      this.emit('videoOff');\n    }\n  }, {\n    key: 'resumeVideo',\n    value: function resumeVideo() {\n      this._videoEnabled(true);\n\n      this.emit('videoOn');\n    } // Combined controls\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.mute();\n      this.pauseVideo();\n    }\n  }, {\n    key: 'resume',\n    value: function resume() {\n      this.unmute();\n      this.resumeVideo();\n    } // Internal methods for enabling/disabling audio/video\n\n  }, {\n    key: '_audioEnabled',\n    value: function _audioEnabled(bool) {\n      this.localStreams.forEach(function (stream) {\n        stream.getAudioTracks().forEach(function (track) {\n          track.enabled = !!bool;\n        });\n      });\n    }\n  }, {\n    key: '_videoEnabled',\n    value: function _videoEnabled(bool) {\n      this.localStreams.forEach(function (stream) {\n        stream.getVideoTracks().forEach(function (track) {\n          track.enabled = !!bool;\n        });\n      });\n    } // check if all audio streams are enabled\n\n  }, {\n    key: 'isAudioEnabled',\n    value: function isAudioEnabled() {\n      var enabled = true;\n      this.localStreams.forEach(function (stream) {\n        stream.getAudioTracks().forEach(function (track) {\n          enabled = enabled && track.enabled;\n        });\n      });\n      return enabled;\n    } // check if all video streams are enabled\n\n  }, {\n    key: 'isVideoEnabled',\n    value: function isVideoEnabled() {\n      var enabled = true;\n      this.localStreams.forEach(function (stream) {\n        stream.getVideoTracks().forEach(function (track) {\n          enabled = enabled && track.enabled;\n        });\n      });\n      return enabled;\n    }\n  }, {\n    key: '_removeStream',\n    value: function _removeStream(stream) {\n      var idx = this.localStreams.indexOf(stream);\n\n      if (idx > -1) {\n        this.localStreams.splice(idx, 1);\n        this.emit('localStreamStopped', stream);\n      } else {\n        idx = this.localScreens.indexOf(stream);\n\n        if (idx > -1) {\n          this.localScreens.splice(idx, 1);\n          this.emit('localScreenStopped', stream);\n        }\n      }\n    }\n  }, {\n    key: '_setupAudioMonitor',\n    value: function _setupAudioMonitor(stream, harkOptions) {\n      this._log('Setup audio');\n\n      var audio = (0, _hark2.default)(stream, harkOptions);\n      var self = this;\n      var timeout = void 0;\n      audio.on('speaking', function () {\n        self.emit('speaking');\n      });\n      audio.on('stopped_speaking', function () {\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n\n        timeout = setTimeout(function () {\n          self.emit('stoppedSpeaking');\n        }, 1000);\n      });\n      audio.on('volume_change', function (volume, threshold) {\n        self.emit('volumeChange', volume, threshold);\n      });\n\n      this._audioMonitors.push({\n        audio: audio,\n        stream: stream\n      });\n    }\n  }, {\n    key: '_stopAudioMonitor',\n    value: function _stopAudioMonitor(stream) {\n      var idx = -1;\n\n      this._audioMonitors.forEach(function (monitors, i) {\n        if (monitors.stream === stream) {\n          idx = i;\n        }\n      });\n\n      if (idx > -1) {\n        this._audioMonitors[idx].audio.stop();\n\n        this._audioMonitors.splice(idx, 1);\n      }\n    }\n  }]);\n\n  return LocalMedia;\n}(_wildemitter2.default);\n\nexports.default = LocalMedia;","map":null,"metadata":{},"sourceType":"script"}