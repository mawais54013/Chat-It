{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Node = function () {\n  function Node(value) {\n    _classCallCheck(this, Node);\n\n    if (value === undefined) {\n      throw new Error('Node must have an ID');\n    }\n\n    this.value = value;\n    this.edges = {};\n  }\n\n  _createClass(Node, [{\n    key: 'addEdge',\n    value: function addEdge(edge) {\n      this.edges[edge.getId()] = edge;\n      return this;\n    }\n  }, {\n    key: 'deleteEdge',\n    value: function deleteEdge(edge) {\n      delete this.edges[edge.getId()];\n    }\n  }, {\n    key: 'getEdges',\n    value: function getEdges() {\n      return Object.values(this.edges);\n    }\n  }, {\n    key: 'getDegree',\n    value: function getDegree() {\n      return Object.keys(this.edges).length;\n    }\n  }, {\n    key: 'getNeighbors',\n    value: function getNeighbors() {\n      var _this = this;\n\n      var edges = Object.values(this.edges);\n      var nodes = edges.map(function (e) {\n        return e.node1 === _this ? e.node2 : e.node1;\n      });\n      return nodes;\n    }\n  }, {\n    key: 'hasEdge',\n    value: function hasEdge(requiredEdge) {\n      var edgeNode = this.edges.filter(function (edge) {\n        return edge.getId() === requiredEdge.getId();\n      });\n      return !!edgeNode.length;\n    }\n  }, {\n    key: 'hasNeighbor',\n    value: function hasNeighbor(node) {\n      var nodeWeWant = Object.values(this.edges).filter(function (e) {\n        return e.node1.getId() === node.getId() || e.node2.getId() === node.getId();\n      });\n      return !!nodeWeWant.length;\n    }\n  }, {\n    key: 'findEdge',\n    value: function findEdge(node) {\n      var result = Object.values(this.edges).filter(function (e) {\n        return e.node1.getId() === node.getId() || e.node2.getId() === node.getId();\n      });\n      return result.length ? result[0] : null;\n    }\n  }, {\n    key: 'getId',\n    value: function getId() {\n      return this.value;\n    }\n  }, {\n    key: 'deleteAllEdges',\n    value: function deleteAllEdges() {\n      var _this2 = this;\n\n      this.getEdges().forEach(function (e) {\n        return _this2.deleteEdge(e);\n      });\n      return this;\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '' + this.value;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports.default = Node;","map":null,"metadata":{},"sourceType":"script"}