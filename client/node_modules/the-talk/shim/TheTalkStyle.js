'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _theComponentUtil = require("the-component-util");

var _theStyle = require("the-style");

/** Style for TheTalk */
var TheTalkStyle = function TheTalkStyle(_ref) {
  var className = _ref.className,
      id = _ref.id,
      options = _ref.options;
  return _react.default.createElement(_theStyle.TheStyle, (0, _extends2.default)({
    id: id
  }, {
    className: (0, _classnames.default)('the-talk-style', className),
    styles: TheTalkStyle.data(options)
  }));
};

TheTalkStyle.displayName = 'TheTalkStyle';
TheTalkStyle.propTypes = {
  /** Style options */
  options: _propTypes.default.object
};
TheTalkStyle.defaultProps = {
  options: {}
};

TheTalkStyle.data = function (options) {
  var ThemeValues = _theStyle.TheStyle.ThemeValues;
  var _options$dominantColo = options.dominantColor,
      dominantColor = _options$dominantColo === void 0 ? ThemeValues.dominantColor : _options$dominantColo,
      _options$toggleSize = options.toggleSize,
      toggleSize = _options$toggleSize === void 0 ? 39 : _options$toggleSize;
  return (0, _theComponentUtil.asStyleData)('.the-talk', {
    '.the-talk-actions': {
      background: '#0000009e',
      display: 'none',
      position: 'absolute',
      right: 0,
      top: 0
    },
    '.the-talk-content': {
      background: 'rgba(0,0,0,0.33)',
      bottom: 0,
      boxSizing: 'border-box',
      color: 'white',
      fontSize: 'small',
      left: 0,
      overflow: 'hidden',
      padding: '4px',
      position: 'absolute',
      right: 0,
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      zIndex: 2
    },
    '.the-talk-toggle': {
      '.the-talk-disabled-icon': {
        alignItems: 'center',
        bottom: 0,
        color: '#E11',
        display: 'none',
        fontSize: 'x-large',
        justifyContent: 'center',
        left: 0,
        opacity: '0.8',
        position: 'absolute',
        right: 0,
        top: 0,
        zIndex: 2
      },
      '&.the-talk-toggle-disabled': {
        '.the-talk-disabled-icon': {
          display: 'inline-flex'
        }
      },
      alignItems: 'center',
      background: 'transparent',
      border: 'none',
      borderRadius: 0,
      color: '#AAA',
      display: 'inline-flex',
      fontSize: 21,
      height: "".concat(toggleSize, "px"),
      justifyContent: 'center',
      margin: 0,
      minHeight: 0,
      padding: '4px',
      position: 'relative',
      textDecoration: 'none',
      width: "".concat(toggleSize, "px")
    },
    '.the-talk-video': {
      backgroundColor: 'transparent',
      maxHeight: '100%',
      maxWidth: '100%',
      width: '100%'
    },
    '.the-talk-video-local-container': {
      '.the-talk-video': {},
      backgroundColor: '#555',
      position: 'relative'
    },
    '.the-talk-video-remote-container': {
      'video': {
        maxHeight: '100%',
        maxWidth: '100%',
        width: '100%'
      },
      backgroundColor: '#F0F0F0'
    },
    '&': {
      position: 'relative'
    },
    '&.the-talk-ready': {
      '.the-talk-actions': {
        display: 'block'
      }
    }
  });
};

var _default = TheTalkStyle;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,