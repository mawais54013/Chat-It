{"ast":null,"code":"/**\n * Set global values\n * @function set\n * @param {string} name - Name to set\n * @param {*} value - Value to set\n * @returns {*}\n */\n'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { set as setOne } from 'bwindow';\n\nvar debug = require('debug')('the:window:set');\n\nfunction set(name, value) {\n  if (_typeof(arguments[0]) === 'object') {\n    var _arr = Object.entries(arguments[0]);\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var _arr$_i = _slicedToArray(_arr[_i], 2),\n          n = _arr$_i[0],\n          v = _arr$_i[1];\n\n      setOne(n, v);\n    }\n  } else {\n    setOne(name, value);\n    debug('set window value', name, value);\n  }\n}\n\nexport default set;","map":null,"metadata":{},"sourceType":"module"}