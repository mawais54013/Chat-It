{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Graph = undefined;\nexports.addNode = addNode;\nexports.addConnection = addConnection;\nexports.removeConnection = removeConnection;\nexports.getNeighbors = getNeighbors;\nexports.isNeighbor = isNeighbor;\nexports.getPeerLatencies = getPeerLatencies;\nexports.average = average;\nexports.squaredDiffs = squaredDiffs;\nexports.stdDeviation = stdDeviation;\nexports.getLatencyZScores = getLatencyZScores;\nexports.getDroppablePeer = getDroppablePeer;\n\nvar _PeerGraph = require('./PeerGraph');\n\nvar _PeerGraph2 = _interopRequireDefault(_PeerGraph);\n\nvar _Edge = require('./Edge');\n\nvar _Edge2 = _interopRequireDefault(_Edge);\n\nvar _PeerNode = require('./PeerNode');\n\nvar _PeerNode2 = _interopRequireDefault(_PeerNode);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Graph = exports.Graph = new _PeerGraph2.default();\n\nfunction addNode(nodeId) {\n  var node = new _PeerNode2.default(nodeId);\n  Graph.addNode(node);\n}\n\nfunction addConnection(node1Id, node2Id) {\n  var latency = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var nodeA = Graph.getNodeById(node1Id) || new _PeerNode2.default(node1Id);\n  var nodeB = Graph.getNodeById(node2Id) || new _PeerNode2.default(node2Id);\n  var edgeAB = new _Edge2.default(nodeA, nodeB, latency);\n  return Graph.addEdge(edgeAB);\n}\n\nfunction removeConnection(node1Id, node2Id) {\n  var nodeA = Graph.getNodeById(node1Id);\n  var nodeB = Graph.getNodeById(node2Id);\n  if (nodeA && nodeB) Graph.deleteEdge(Graph.findEdge(nodeA, nodeB));\n}\n\nfunction getNeighbors(nodeId) {\n  var node = Graph.getNodeById(nodeId);\n  var neighbors = node.getNeighbors();\n  return neighbors.map(function (n) {\n    return n.getId();\n  });\n}\n\nfunction isNeighbor(node1Id, node2Id) {\n  var nodeA = Graph.getNodeById(node1Id) || new _PeerNode2.default(node1Id);\n  var nodeB = Graph.getNodeById(node2Id) || new _PeerNode2.default(node2Id);\n\n  if (nodeA.hasNeighbor(nodeB)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getPeerLatencies(nodeId) {\n  var node = Graph.findNodeById(nodeId);\n\n  if (node) {\n    var result = {};\n    var edges = node.getEdges();\n    edges.forEach(function (e) {\n      var id = e.node1.getId() === nodeId ? e.node2.getId() : e.node1.getId();\n      var latency = e.getWeight();\n      result[id] = latency;\n    });\n    return result;\n  }\n}\n\nfunction average(vals) {\n  var total = vals.reduce(function (sum, val) {\n    return val + sum;\n  });\n  return total / vals.length;\n}\n\nfunction squaredDiffs(vals, avg) {\n  var sqd = vals.map(function (val) {\n    return Math.pow(val - avg, 2);\n  });\n  return sqd;\n}\n\nfunction stdDeviation(sqDiffs) {\n  var sum = sqDiffs.reduce(function (total, x) {\n    return total + x;\n  });\n  return Math.sqrt(sum / sqDiffs.length);\n}\n\nfunction getLatencyZScores(nodeId) {\n  var peerLatencyCache = getPeerLatencies(nodeId);\n  var peerIds = Object.keys(peerLatencyCache);\n  var peerLatencies = Object.values(peerLatencyCache);\n  var avg = average(peerLatencies);\n  var standardDeviation = stdDeviation(squaredDiffs(peerLatencies, avg));\n  var zScores = {};\n  peerIds.forEach(function (val, i) {\n    zScores[val] = (peerLatencies[i] - avg) / standardDeviation;\n  });\n  return zScores;\n}\n\nfunction getDroppablePeer(nodeId) {\n  var zScores = getLatencyZScores(nodeId);\n  var droppable = zScores.filter(function (s) {\n    return s <= -1;\n  });\n  var orderedDroppable = droppable.sort(function (a, b) {\n    return b - a;\n  });\n  return orderedDroppable[0];\n}","map":null,"metadata":{},"sourceType":"script"}