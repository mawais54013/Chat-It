{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _mockconsole = require('mockconsole');\n\nvar _mockconsole2 = _interopRequireDefault(_mockconsole);\n\nvar _localmedia = require('./localmedia');\n\nvar _localmedia2 = _interopRequireDefault(_localmedia);\n\nvar _peer = require('./peer');\n\nvar _peer2 = _interopRequireDefault(_peer);\n\nvar _webrtcsupport = require('./webrtcsupport');\n\nvar _webrtcsupport2 = _interopRequireDefault(_webrtcsupport);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar WebRTC = function (_LocalMedia) {\n  _inherits(WebRTC, _LocalMedia);\n\n  function WebRTC(opts) {\n    _classCallCheck(this, WebRTC);\n\n    var _this = _possibleConstructorReturn(this, (WebRTC.__proto__ || Object.getPrototypeOf(WebRTC)).call(this, opts));\n\n    var self = _this;\n    var options = opts || {};\n    var config = _this.config = {\n      debug: false,\n      peerConnectionConfig: {\n        iceServers: [{\n          urls: 'stun:stun.l.google.com:19302'\n        }]\n      },\n      peerConnectionConstraints: {\n        optional: []\n      },\n      receiveMedia: {\n        offerToReceiveAudio: 1,\n        offerToReceiveVideo: 1\n      },\n      enableDataChannels: true\n    };\n    var item = void 0;\n\n    _this.logger = function () {\n      // we assume that if you're in debug mode and you didn't\n      // pass in a logger, you actually want to log as much as\n      // possible.\n      if (opts.debug) {\n        return opts.logger || console;\n      } // or we'll use your logger which should have its own logic\n      // for output. Or we'll return the no-op.\n\n\n      return opts.logger || _mockconsole2.default;\n    }(); // set options\n\n\n    for (item in options) {\n      if (options.hasOwnProperty(item)) {\n        _this.config[item] = options[item];\n      }\n    } // check for support\n\n\n    if (!_webrtcsupport2.default.support) {\n      _this.logger.error('Your browser doesn\\'t seem to support WebRTC');\n    } // where we'll store our peer connections\n\n\n    _this.peers = []; // call localMedia constructor\n    // localMedia.call(this, this.config);\n\n    _this.on('speaking', function () {\n      if (!self.hardMuted) {\n        self.peers.forEach(function (peer) {\n          if (peer.enableDataChannels) {\n            var dc = peer.getDataChannel('liowebrtc');\n            if (dc.readyState !== 'open') return;\n            dc.sendDirectlyToAll(JSON.stringify({\n              type: 'speaking'\n            }));\n          }\n        });\n      }\n    });\n\n    _this.on('stoppedSpeaking', function () {\n      if (!self.hardMuted) {\n        self.peers.forEach(function (peer) {\n          if (peer.enableDataChannels) {\n            var dc = peer.getDataChannel('liowebrtc');\n            if (dc.readyState !== 'open') return;\n            dc.sendDirectlyToAll(JSON.stringify({\n              type: 'stoppedSpeaking'\n            }));\n          }\n        });\n      }\n    });\n\n    _this.on('volumeChange', function (volume, treshold) {\n      if (!self.hardMuted) {\n        self.peers.forEach(function (peer) {\n          if (peer.enableDataChannels) {\n            var dc = peer.getDataChannel('liowebrtc');\n            if (dc.readyState !== 'open') return;\n            dc.sendDirectlyToAll(JSON.stringify({\n              type: 'payload',\n              volume: volume\n            }));\n          }\n        });\n      }\n    }); // log events in debug mode\n\n\n    if (_this.config.debug) {\n      _this.on('*', function (event, val1, val2) {\n        var logger = void 0; // if you didn't pass in a logger and you explicitly turning on debug\n        // we're just going to assume you're wanting log output with console\n\n        if (self.config.logger === _mockconsole2.default) {\n          logger = console;\n        } else {\n          logger = self.logger;\n        }\n\n        logger.log('event:', event, val1, val2);\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(WebRTC, [{\n    key: 'createPeer',\n    value: function createPeer(opts) {\n      var peer = void 0;\n      opts.parent = this;\n      peer = new _peer2.default(opts);\n      this.peers.push(peer);\n      return peer;\n    } // removes peers\n\n  }, {\n    key: 'removePeers',\n    value: function removePeers(id, type) {\n      this.getPeers(id, type).forEach(function (peer) {\n        peer.end();\n      });\n    } // fetches all Peer objects by session id and/or type\n\n  }, {\n    key: 'getPeers',\n    value: function getPeers(sessionId, type) {\n      return this.peers.filter(function (peer) {\n        return (!sessionId || peer.id === sessionId) && (!type || peer.type === type);\n      });\n    }\n  }, {\n    key: 'getPeerById',\n    value: function getPeerById(id) {\n      return this.peers.filter(function (p) {\n        return p.id === id;\n      })[0];\n    }\n  }, {\n    key: 'getPeerByNick',\n    value: function getPeerByNick(nick) {\n      return this.peers.filter(function (p) {\n        return p.nick === nick;\n      })[0];\n    } // sends message to all\n\n  }, {\n    key: 'sendToAll',\n    value: function sendToAll(message, payload) {\n      this.peers.forEach(function (peer) {\n        peer.send(message, payload);\n      });\n    } // sends message to all using a datachannel\n    // only sends to anyone who has an open datachannel\n\n  }, {\n    key: 'sendDirectlyToAll',\n    value: function sendDirectlyToAll(message, payload, channel, shout) {\n      var msgId = Date.now() + '_' + Math.random() * 1000000;\n      this.peers.forEach(function (peer) {\n        if (peer.enableDataChannels) {\n          peer.sendDirectly(message, payload, channel, shout, msgId);\n        }\n      });\n    }\n  }, {\n    key: 'shout',\n    value: function shout(messageType, payload) {\n      this.sendDirectlyToAll(messageType, payload, 'liowebrtc', true);\n    }\n  }, {\n    key: 'whisper',\n    value: function whisper(peer, messageType, payload) {\n      peer.sendDirectly(messageType, payload);\n    }\n  }, {\n    key: 'broadcast',\n    value: function broadcast(messageType, payload) {\n      this.sendToAll('signalData', {\n        type: messageType,\n        payload: payload\n      });\n    }\n  }, {\n    key: 'transmit',\n    value: function transmit(peer, messageType, payload) {\n      peer.send('signalData', {\n        type: messageType,\n        payload: payload\n      });\n    }\n  }]);\n\n  return WebRTC;\n}(_localmedia2.default);\n\nexports.default = WebRTC;","map":null,"metadata":{},"sourceType":"script"}