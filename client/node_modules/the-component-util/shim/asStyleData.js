/**
 * Mark as style data
 * @function asStyleData
 * @param {string} scopeSelector - Selector which wraps data
 * @param {Object} data - Style data
 * @returns {Object} Style data
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _argx = _interopRequireDefault(require("argx"));

var combineSelectors = function combineSelectors() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return selectors.filter(Boolean).map(function (selector) {
    return String(selector).trim();
  }).reduce(function (combined, selector) {
    if (!combined) {
      return selector;
    }

    var JOIN_PATTERN = /^&/;

    if (JOIN_PATTERN.test(selector)) {
      return combined + selector.replace(JOIN_PATTERN, '');
    }

    return [combined, selector].join(' ');
  }, null).trim();
};

var selectorData = function selectorData(selector, data) {
  var attributes = {};
  var nested = {};

  var _arr = Object.keys(data);

  for (var _i = 0; _i < _arr.length; _i++) {
    var key = _arr[_i];

    switch ((0, _typeof2.default)(data[key])) {
      case 'object':
        {
          nested[key] = data[key];
          break;
        }

      default:
        {
          attributes[key] = data[key];
          break;
        }
    }
  }

  return Object.assign((0, _defineProperty2.default)({}, selector, attributes), asStyleData(selector, nested));
};
/** @lends asStyleData */


function asStyleData(scopeSelector, data) {
  var args = (0, _argx.default)(arguments);
  scopeSelector = args.shift('string');
  data = args.pop('object');
  return Object.keys(data).reduce(function (scoped, selector) {
    return Object.assign.apply(Object, [scoped].concat((0, _toConsumableArray2.default)(selector.split(',').map(function (aSelector) {
      var created = selectorData(combineSelectors(scopeSelector, aSelector), data[selector]);
      return Object.keys(created).reduce(function (result, key) {
        return Object.assign(result, (0, _defineProperty2.default)({}, key, Object.assign({}, scoped[key] || {}, created[key])));
      }, {});
    }))));
  }, {});
}

var _default = asStyleData;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzU3R5bGVEYXRhLmpzeCJdLCJuYW1lcyI6WyJjb21iaW5lU2VsZWN0b3JzIiwic2VsZWN0b3JzIiwiZmlsdGVyIiwiQm9vbGVhbiIsIm1hcCIsInNlbGVjdG9yIiwiU3RyaW5nIiwidHJpbSIsInJlZHVjZSIsImNvbWJpbmVkIiwiSk9JTl9QQVRURVJOIiwidGVzdCIsInJlcGxhY2UiLCJqb2luIiwic2VsZWN0b3JEYXRhIiwiZGF0YSIsImF0dHJpYnV0ZXMiLCJuZXN0ZWQiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiYXNzaWduIiwiYXNTdHlsZURhdGEiLCJzY29wZVNlbGVjdG9yIiwiYXJncyIsImFyZ3VtZW50cyIsInNoaWZ0IiwicG9wIiwic2NvcGVkIiwic3BsaXQiLCJhU2VsZWN0b3IiLCJjcmVhdGVkIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7QUFFQSxJQUFNQSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CO0FBQUEsb0NBQUlDLFNBQUo7QUFBSUEsSUFBQUEsU0FBSjtBQUFBOztBQUFBLFNBQ3ZCQSxTQUFTLENBQ05DLE1BREgsQ0FDVUMsT0FEVixFQUVHQyxHQUZILENBRU8sVUFBQ0MsUUFBRDtBQUFBLFdBQWNDLE1BQU0sQ0FBQ0QsUUFBRCxDQUFOLENBQWlCRSxJQUFqQixFQUFkO0FBQUEsR0FGUCxFQUdHQyxNQUhILENBR1UsVUFBQ0MsUUFBRCxFQUFXSixRQUFYLEVBQXdCO0FBQzlCLFFBQUksQ0FBQ0ksUUFBTCxFQUFlO0FBQ2IsYUFBT0osUUFBUDtBQUNEOztBQUNELFFBQU1LLFlBQVksR0FBRyxJQUFyQjs7QUFDQSxRQUFJQSxZQUFZLENBQUNDLElBQWIsQ0FBa0JOLFFBQWxCLENBQUosRUFBaUM7QUFDL0IsYUFBT0ksUUFBUSxHQUFHSixRQUFRLENBQUNPLE9BQVQsQ0FBaUJGLFlBQWpCLEVBQStCLEVBQS9CLENBQWxCO0FBQ0Q7O0FBQ0QsV0FBTyxDQUFDRCxRQUFELEVBQVdKLFFBQVgsRUFBcUJRLElBQXJCLENBQTBCLEdBQTFCLENBQVA7QUFDRCxHQVpILEVBWUssSUFaTCxFQWFHTixJQWJILEVBRHVCO0FBQUEsQ0FBekI7O0FBZ0JBLElBQU1PLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNULFFBQUQsRUFBV1UsSUFBWCxFQUFvQjtBQUN2QyxNQUFNQyxVQUFVLEdBQUcsRUFBbkI7QUFDQSxNQUFNQyxNQUFNLEdBQUcsRUFBZjs7QUFGdUMsYUFHckJDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixJQUFaLENBSHFCOztBQUd2QywyQ0FBcUM7QUFBaEMsUUFBTUssR0FBRyxXQUFUOztBQUNILGtDQUFlTCxJQUFJLENBQUNLLEdBQUQsQ0FBbkI7QUFDRSxXQUFLLFFBQUw7QUFBZTtBQUNiSCxVQUFBQSxNQUFNLENBQUNHLEdBQUQsQ0FBTixHQUFjTCxJQUFJLENBQUNLLEdBQUQsQ0FBbEI7QUFDQTtBQUNEOztBQUNEO0FBQVM7QUFDUEosVUFBQUEsVUFBVSxDQUFDSSxHQUFELENBQVYsR0FBa0JMLElBQUksQ0FBQ0ssR0FBRCxDQUF0QjtBQUNBO0FBQ0Q7QUFSSDtBQVVEOztBQUNELFNBQU9GLE1BQU0sQ0FBQ0csTUFBUCxtQ0FFRmhCLFFBRkUsRUFFU1csVUFGVCxHQUlMTSxXQUFXLENBQUNqQixRQUFELEVBQVdZLE1BQVgsQ0FKTixDQUFQO0FBTUQsQ0FyQkQ7QUF1QkE7OztBQUNBLFNBQVNLLFdBQVQsQ0FBcUJDLGFBQXJCLEVBQW9DUixJQUFwQyxFQUEwQztBQUN4QyxNQUFNUyxJQUFJLEdBQUcsbUJBQUtDLFNBQUwsQ0FBYjtBQUNBRixFQUFBQSxhQUFhLEdBQUdDLElBQUksQ0FBQ0UsS0FBTCxDQUFXLFFBQVgsQ0FBaEI7QUFDQVgsRUFBQUEsSUFBSSxHQUFHUyxJQUFJLENBQUNHLEdBQUwsQ0FBUyxRQUFULENBQVA7QUFDQSxTQUFPVCxNQUFNLENBQUNDLElBQVAsQ0FBWUosSUFBWixFQUFrQlAsTUFBbEIsQ0FBeUIsVUFBQ29CLE1BQUQsRUFBU3ZCLFFBQVQsRUFBc0I7QUFDcEQsV0FBT2EsTUFBTSxDQUFDRyxNQUFQLE9BQUFILE1BQU0sR0FDWFUsTUFEVywwQ0FFUnZCLFFBQVEsQ0FBQ3dCLEtBQVQsQ0FBZSxHQUFmLEVBQW9CekIsR0FBcEIsQ0FBd0IsVUFBQzBCLFNBQUQsRUFBZTtBQUN4QyxVQUFNQyxPQUFPLEdBQUdqQixZQUFZLENBQzFCZCxnQkFBZ0IsQ0FBQ3VCLGFBQUQsRUFBZ0JPLFNBQWhCLENBRFUsRUFFMUJmLElBQUksQ0FBQ1YsUUFBRCxDQUZzQixDQUE1QjtBQUlBLGFBQU9hLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWSxPQUFaLEVBQXFCdkIsTUFBckIsQ0FDTCxVQUFDd0IsTUFBRCxFQUFTWixHQUFUO0FBQUEsZUFDRUYsTUFBTSxDQUFDRyxNQUFQLENBQWNXLE1BQWQsb0NBQ0daLEdBREgsRUFDU0YsTUFBTSxDQUFDRyxNQUFQLENBQWMsRUFBZCxFQUFrQk8sTUFBTSxDQUFDUixHQUFELENBQU4sSUFBZSxFQUFqQyxFQUFxQ1csT0FBTyxDQUFDWCxHQUFELENBQTVDLENBRFQsRUFERjtBQUFBLE9BREssRUFLTCxFQUxLLENBQVA7QUFPRCxLQVpFLENBRlEsR0FBYjtBQWdCRCxHQWpCTSxFQWlCSixFQWpCSSxDQUFQO0FBa0JEOztlQUVjRSxXIiwic291cmNlUm9vdCI6Ii4uL2xpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFyayBhcyBzdHlsZSBkYXRhXG4gKiBAZnVuY3Rpb24gYXNTdHlsZURhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVNlbGVjdG9yIC0gU2VsZWN0b3Igd2hpY2ggd3JhcHMgZGF0YVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBTdHlsZSBkYXRhXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBTdHlsZSBkYXRhXG4gKi9cbid1c2Ugc3RyaWN0J1xuaW1wb3J0IGFyZ3ggZnJvbSAnYXJneCdcblxuY29uc3QgY29tYmluZVNlbGVjdG9ycyA9ICguLi5zZWxlY3RvcnMpID0+XG4gIHNlbGVjdG9yc1xuICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAubWFwKChzZWxlY3RvcikgPT4gU3RyaW5nKHNlbGVjdG9yKS50cmltKCkpXG4gICAgLnJlZHVjZSgoY29tYmluZWQsIHNlbGVjdG9yKSA9PiB7XG4gICAgICBpZiAoIWNvbWJpbmVkKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvclxuICAgICAgfVxuICAgICAgY29uc3QgSk9JTl9QQVRURVJOID0gL14mL1xuICAgICAgaWYgKEpPSU5fUEFUVEVSTi50ZXN0KHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gY29tYmluZWQgKyBzZWxlY3Rvci5yZXBsYWNlKEpPSU5fUEFUVEVSTiwgJycpXG4gICAgICB9XG4gICAgICByZXR1cm4gW2NvbWJpbmVkLCBzZWxlY3Rvcl0uam9pbignICcpXG4gICAgfSwgbnVsbClcbiAgICAudHJpbSgpXG5cbmNvbnN0IHNlbGVjdG9yRGF0YSA9IChzZWxlY3RvciwgZGF0YSkgPT4ge1xuICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgY29uc3QgbmVzdGVkID0ge31cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZGF0YSkpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBkYXRhW2tleV0pIHtcbiAgICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgICAgbmVzdGVkW2tleV0gPSBkYXRhW2tleV1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgYXR0cmlidXRlc1trZXldID0gZGF0YVtrZXldXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgIHtcbiAgICAgIFtzZWxlY3Rvcl06IGF0dHJpYnV0ZXMsXG4gICAgfSxcbiAgICBhc1N0eWxlRGF0YShzZWxlY3RvciwgbmVzdGVkKSxcbiAgKVxufVxuXG4vKiogQGxlbmRzIGFzU3R5bGVEYXRhICovXG5mdW5jdGlvbiBhc1N0eWxlRGF0YShzY29wZVNlbGVjdG9yLCBkYXRhKSB7XG4gIGNvbnN0IGFyZ3MgPSBhcmd4KGFyZ3VtZW50cylcbiAgc2NvcGVTZWxlY3RvciA9IGFyZ3Muc2hpZnQoJ3N0cmluZycpXG4gIGRhdGEgPSBhcmdzLnBvcCgnb2JqZWN0JylcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZSgoc2NvcGVkLCBzZWxlY3RvcikgPT4ge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgc2NvcGVkLFxuICAgICAgLi4uc2VsZWN0b3Iuc3BsaXQoJywnKS5tYXAoKGFTZWxlY3RvcikgPT4ge1xuICAgICAgICBjb25zdCBjcmVhdGVkID0gc2VsZWN0b3JEYXRhKFxuICAgICAgICAgIGNvbWJpbmVTZWxlY3RvcnMoc2NvcGVTZWxlY3RvciwgYVNlbGVjdG9yKSxcbiAgICAgICAgICBkYXRhW3NlbGVjdG9yXSxcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoY3JlYXRlZCkucmVkdWNlKFxuICAgICAgICAgIChyZXN1bHQsIGtleSkgPT5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7XG4gICAgICAgICAgICAgIFtrZXldOiBPYmplY3QuYXNzaWduKHt9LCBzY29wZWRba2V5XSB8fCB7fSwgY3JlYXRlZFtrZXldKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIHt9LFxuICAgICAgICApXG4gICAgICB9KSxcbiAgICApXG4gIH0sIHt9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc1N0eWxlRGF0YVxuIl19