/**
 * Extract event handlers for component props
 * @function eventHandlersFor
 * @param {Object} props - Component prop
 * @param {Object} [options={}]
 * @param {string[]} [options.except] - Exception names
 * @returns {Object} Props for html attributes
 */
'use strict';

import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { SupportedProps } from 'the-component-constants';
var handlerNames = [].concat(_toConsumableArray(SupportedProps.mouseEvents.split(',')), _toConsumableArray(SupportedProps.selectionEvents.split(',')), _toConsumableArray(SupportedProps.touchEvents.split(',')), _toConsumableArray(SupportedProps.uiEvents.split(',')), _toConsumableArray(SupportedProps.mediaEvents.split(',')), _toConsumableArray(SupportedProps.imageEvents.split(',')));
/** @lends eventHandlersFor */

function eventHandlersFor(props) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$except = options.except,
      except = _options$except === void 0 ? [] : _options$except;
  return Object.keys(props).filter(function (name) {
    return !except.includes(name);
  }).filter(function (name) {
    return handlerNames.includes(name);
  }).reduce(function (results, name) {
    return Object.assign(results, _defineProperty({}, name, props[name]));
  }, {});
}

export default eventHandlersFor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50SGFuZGxlcnNGb3IuanMiXSwibmFtZXMiOlsiU3VwcG9ydGVkUHJvcHMiLCJoYW5kbGVyTmFtZXMiLCJtb3VzZUV2ZW50cyIsInNwbGl0Iiwic2VsZWN0aW9uRXZlbnRzIiwidG91Y2hFdmVudHMiLCJ1aUV2ZW50cyIsIm1lZGlhRXZlbnRzIiwiaW1hZ2VFdmVudHMiLCJldmVudEhhbmRsZXJzRm9yIiwicHJvcHMiLCJvcHRpb25zIiwiZXhjZXB0IiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsIm5hbWUiLCJpbmNsdWRlcyIsInJlZHVjZSIsInJlc3VsdHMiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVFBOzs7O0FBRUEsU0FBU0EsY0FBVCxRQUErQix5QkFBL0I7QUFFQSxJQUFNQyxZQUFZLGdDQUNiRCxjQUFjLENBQUNFLFdBQWYsQ0FBMkJDLEtBQTNCLENBQWlDLEdBQWpDLENBRGEsc0JBRWJILGNBQWMsQ0FBQ0ksZUFBZixDQUErQkQsS0FBL0IsQ0FBcUMsR0FBckMsQ0FGYSxzQkFHYkgsY0FBYyxDQUFDSyxXQUFmLENBQTJCRixLQUEzQixDQUFpQyxHQUFqQyxDQUhhLHNCQUliSCxjQUFjLENBQUNNLFFBQWYsQ0FBd0JILEtBQXhCLENBQThCLEdBQTlCLENBSmEsc0JBS2JILGNBQWMsQ0FBQ08sV0FBZixDQUEyQkosS0FBM0IsQ0FBaUMsR0FBakMsQ0FMYSxzQkFNYkgsY0FBYyxDQUFDUSxXQUFmLENBQTJCTCxLQUEzQixDQUFpQyxHQUFqQyxDQU5hLEVBQWxCO0FBU0E7O0FBQ0EsU0FBU00sZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQStDO0FBQUEsTUFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQUEsd0JBQ3ZCQSxPQUR1QixDQUN2Q0MsTUFEdUM7QUFBQSxNQUN2Q0EsTUFEdUMsZ0NBQzlCLEVBRDhCO0FBRTdDLFNBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixLQUFaLEVBQ0pLLE1BREksQ0FDRyxVQUFDQyxJQUFEO0FBQUEsV0FBVSxDQUFDSixNQUFNLENBQUNLLFFBQVAsQ0FBZ0JELElBQWhCLENBQVg7QUFBQSxHQURILEVBRUpELE1BRkksQ0FFRyxVQUFDQyxJQUFEO0FBQUEsV0FBVWYsWUFBWSxDQUFDZ0IsUUFBYixDQUFzQkQsSUFBdEIsQ0FBVjtBQUFBLEdBRkgsRUFHSkUsTUFISSxDQUlILFVBQUNDLE9BQUQsRUFBVUgsSUFBVjtBQUFBLFdBQ0VILE1BQU0sQ0FBQ08sTUFBUCxDQUFjRCxPQUFkLHNCQUNHSCxJQURILEVBQ1VOLEtBQUssQ0FBQ00sSUFBRCxDQURmLEVBREY7QUFBQSxHQUpHLEVBUUgsRUFSRyxDQUFQO0FBVUQ7O0FBRUQsZUFBZVAsZ0JBQWYiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRyYWN0IGV2ZW50IGhhbmRsZXJzIGZvciBjb21wb25lbnQgcHJvcHNcbiAqIEBmdW5jdGlvbiBldmVudEhhbmRsZXJzRm9yXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBDb21wb25lbnQgcHJvcFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICogQHBhcmFtIHtzdHJpbmdbXX0gW29wdGlvbnMuZXhjZXB0XSAtIEV4Y2VwdGlvbiBuYW1lc1xuICogQHJldHVybnMge09iamVjdH0gUHJvcHMgZm9yIGh0bWwgYXR0cmlidXRlc1xuICovXG4ndXNlIHN0cmljdCdcblxuaW1wb3J0IHsgU3VwcG9ydGVkUHJvcHMgfSBmcm9tICd0aGUtY29tcG9uZW50LWNvbnN0YW50cydcblxuY29uc3QgaGFuZGxlck5hbWVzID0gW1xuICAuLi5TdXBwb3J0ZWRQcm9wcy5tb3VzZUV2ZW50cy5zcGxpdCgnLCcpLFxuICAuLi5TdXBwb3J0ZWRQcm9wcy5zZWxlY3Rpb25FdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMudG91Y2hFdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMudWlFdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMubWVkaWFFdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMuaW1hZ2VFdmVudHMuc3BsaXQoJywnKSxcbl1cblxuLyoqIEBsZW5kcyBldmVudEhhbmRsZXJzRm9yICovXG5mdW5jdGlvbiBldmVudEhhbmRsZXJzRm9yKHByb3BzLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgZXhjZXB0ID0gW10gfSA9IG9wdGlvbnNcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKVxuICAgIC5maWx0ZXIoKG5hbWUpID0+ICFleGNlcHQuaW5jbHVkZXMobmFtZSkpXG4gICAgLmZpbHRlcigobmFtZSkgPT4gaGFuZGxlck5hbWVzLmluY2x1ZGVzKG5hbWUpKVxuICAgIC5yZWR1Y2UoXG4gICAgICAocmVzdWx0cywgbmFtZSkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihyZXN1bHRzLCB7XG4gICAgICAgICAgW25hbWVdOiBwcm9wc1tuYW1lXSxcbiAgICAgICAgfSksXG4gICAgICB7fSxcbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGV2ZW50SGFuZGxlcnNGb3JcbiJdfQ==