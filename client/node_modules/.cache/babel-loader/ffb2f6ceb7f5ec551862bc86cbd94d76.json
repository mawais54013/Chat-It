{"ast":null,"code":"/**\n * HOP ref.\n */\nvar has = Object.prototype.hasOwnProperty;\n/**\n * Return own keys in `obj`.\n *\n * @param {Object} obj\n * @return {Array}\n * @api public\n */\n\nexports.keys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n/**\n * Return own values in `obj`.\n *\n * @param {Object} obj\n * @return {Array}\n * @api public\n */\n\n\nexports.values = function (obj) {\n  var vals = [];\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      vals.push(obj[key]);\n    }\n  }\n\n  return vals;\n};\n/**\n * Merge `b` into `a`.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api public\n */\n\n\nexports.merge = function (a, b) {\n  for (var key in b) {\n    if (has.call(b, key)) {\n      a[key] = b[key];\n    }\n  }\n\n  return a;\n};\n/**\n * Return length of `obj`.\n *\n * @param {Object} obj\n * @return {Number}\n * @api public\n */\n\n\nexports.length = function (obj) {\n  return exports.keys(obj).length;\n};\n/**\n * Check if `obj` is empty.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api public\n */\n\n\nexports.isEmpty = function (obj) {\n  return 0 == exports.length(obj);\n};","map":null,"metadata":{},"sourceType":"script"}