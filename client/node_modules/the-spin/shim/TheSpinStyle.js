'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _theComponentUtil = require("the-component-util");

var _theStyle = require("the-style");

/** Style for TheSpin */
var TheSpinStyle = function TheSpinStyle(_ref) {
  var className = _ref.className,
      id = _ref.id,
      options = _ref.options;
  return _react.default.createElement(_theStyle.TheStyle, (0, _extends2.default)({
    id: id
  }, {
    className: (0, _classnames.default)('the-spin-style', className),
    styles: TheSpinStyle.data(options)
  }));
};

TheSpinStyle.displayName = 'TheSpinStyle';
TheSpinStyle.propTypes = {
  /** Style options */
  options: _propTypes.default.object
};
TheSpinStyle.defaultProps = {
  options: {}
};

TheSpinStyle.data = function (options) {
  var ThemeValues = _theStyle.TheStyle.ThemeValues;
  var _options$dominantColo = options.dominantColor,
      dominantColor = _options$dominantColo === void 0 ? ThemeValues.dominantColor : _options$dominantColo,
      _options$lightTextCol = options.lightTextColor,
      lightTextColor = _options$lightTextCol === void 0 ? ThemeValues.lightTextColor : _options$lightTextCol,
      _options$overlayBackg = options.overlayBackgroundColor,
      overlayBackgroundColor = _options$overlayBackg === void 0 ? ThemeValues.overlayBackgroundColor : _options$overlayBackg;
  return (0, _theComponentUtil.asStyleData)({
    '.the-spin': {
      display: 'none',
      textAlign: 'center'
    },
    '.the-spin.the-spinner-cover': {
      alignItems: 'center',
      background: overlayBackgroundColor,
      bottom: 0,
      color: lightTextColor,
      justifyContent: 'center',
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0,
      zIndex: 4
    },
    '.the-spin.the-spinner-enabled': {
      alignItems: 'center',
      display: 'inline-flex',
      height: '100%',
      justifyContent: 'center',
      width: '100%'
    },
    '.the-spinner-icon': {
      display: 'inline-block',
      margin: '0 4px',
      opacity: 1,
      transition: 'opacity 100ms'
    }
  });
};

var _default = TheSpinStyle;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZVNwaW5TdHlsZS5qc3giXSwibmFtZXMiOlsiVGhlU3BpblN0eWxlIiwiY2xhc3NOYW1lIiwiaWQiLCJvcHRpb25zIiwiZGF0YSIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiZGVmYXVsdFByb3BzIiwiVGhlbWVWYWx1ZXMiLCJUaGVTdHlsZSIsImRvbWluYW50Q29sb3IiLCJsaWdodFRleHRDb2xvciIsIm92ZXJsYXlCYWNrZ3JvdW5kQ29sb3IiLCJkaXNwbGF5IiwidGV4dEFsaWduIiwiYWxpZ25JdGVtcyIsImJhY2tncm91bmQiLCJib3R0b20iLCJjb2xvciIsImp1c3RpZnlDb250ZW50IiwibGVmdCIsInBvc2l0aW9uIiwicmlnaHQiLCJ0b3AiLCJ6SW5kZXgiLCJoZWlnaHQiLCJ3aWR0aCIsIm1hcmdpbiIsIm9wYWNpdHkiLCJ0cmFuc2l0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTtBQUNBLElBQU1BLFlBQVksR0FBRyxTQUFmQSxZQUFlO0FBQUEsTUFBR0MsU0FBSCxRQUFHQSxTQUFIO0FBQUEsTUFBY0MsRUFBZCxRQUFjQSxFQUFkO0FBQUEsTUFBa0JDLE9BQWxCLFFBQWtCQSxPQUFsQjtBQUFBLFNBQ25CLDZCQUFDLGtCQUFELHlCQUFjO0FBQUVELElBQUFBLEVBQUUsRUFBRkE7QUFBRixHQUFkO0FBQ1UsSUFBQSxTQUFTLEVBQUUseUJBQUUsZ0JBQUYsRUFBb0JELFNBQXBCLENBRHJCO0FBRVUsSUFBQSxNQUFNLEVBQUVELFlBQVksQ0FBQ0ksSUFBYixDQUFrQkQsT0FBbEI7QUFGbEIsS0FEbUI7QUFBQSxDQUFyQjs7QUFPQUgsWUFBWSxDQUFDSyxXQUFiLEdBQTJCLGNBQTNCO0FBQ0FMLFlBQVksQ0FBQ00sU0FBYixHQUF5QjtBQUN2QjtBQUNBSCxFQUFBQSxPQUFPLEVBQUVJLG1CQUFVQztBQUZJLENBQXpCO0FBS0FSLFlBQVksQ0FBQ1MsWUFBYixHQUE0QjtBQUMxQk4sRUFBQUEsT0FBTyxFQUFFO0FBRGlCLENBQTVCOztBQUlBSCxZQUFZLENBQUNJLElBQWIsR0FBb0IsVUFBQ0QsT0FBRCxFQUFhO0FBQUEsTUFDdkJPLFdBRHVCLEdBQ1BDLGtCQURPLENBQ3ZCRCxXQUR1QjtBQUFBLDhCQU0zQlAsT0FOMkIsQ0FHN0JTLGFBSDZCO0FBQUEsTUFHN0JBLGFBSDZCLHNDQUdiRixXQUFXLENBQUNFLGFBSEM7QUFBQSw4QkFNM0JULE9BTjJCLENBSTdCVSxjQUo2QjtBQUFBLE1BSTdCQSxjQUo2QixzQ0FJWkgsV0FBVyxDQUFDRyxjQUpBO0FBQUEsOEJBTTNCVixPQU4yQixDQUs3Qlcsc0JBTDZCO0FBQUEsTUFLN0JBLHNCQUw2QixzQ0FLSkosV0FBVyxDQUFDSSxzQkFMUjtBQU8vQixTQUFPLG1DQUFZO0FBQ2pCLGlCQUFhO0FBQ1hDLE1BQUFBLE9BQU8sRUFBRSxNQURFO0FBRVhDLE1BQUFBLFNBQVMsRUFBRTtBQUZBLEtBREk7QUFLakIsbUNBQStCO0FBQzdCQyxNQUFBQSxVQUFVLEVBQUUsUUFEaUI7QUFFN0JDLE1BQUFBLFVBQVUsRUFBRUosc0JBRmlCO0FBRzdCSyxNQUFBQSxNQUFNLEVBQUUsQ0FIcUI7QUFJN0JDLE1BQUFBLEtBQUssRUFBRVAsY0FKc0I7QUFLN0JRLE1BQUFBLGNBQWMsRUFBRSxRQUxhO0FBTTdCQyxNQUFBQSxJQUFJLEVBQUUsQ0FOdUI7QUFPN0JDLE1BQUFBLFFBQVEsRUFBRSxVQVBtQjtBQVE3QkMsTUFBQUEsS0FBSyxFQUFFLENBUnNCO0FBUzdCQyxNQUFBQSxHQUFHLEVBQUUsQ0FUd0I7QUFVN0JDLE1BQUFBLE1BQU0sRUFBRTtBQVZxQixLQUxkO0FBaUJqQixxQ0FBaUM7QUFDL0JULE1BQUFBLFVBQVUsRUFBRSxRQURtQjtBQUUvQkYsTUFBQUEsT0FBTyxFQUFFLGFBRnNCO0FBRy9CWSxNQUFBQSxNQUFNLEVBQUUsTUFIdUI7QUFJL0JOLE1BQUFBLGNBQWMsRUFBRSxRQUplO0FBSy9CTyxNQUFBQSxLQUFLLEVBQUU7QUFMd0IsS0FqQmhCO0FBd0JqQix5QkFBcUI7QUFDbkJiLE1BQUFBLE9BQU8sRUFBRSxjQURVO0FBRW5CYyxNQUFBQSxNQUFNLEVBQUUsT0FGVztBQUduQkMsTUFBQUEsT0FBTyxFQUFFLENBSFU7QUFJbkJDLE1BQUFBLFVBQVUsRUFBRTtBQUpPO0FBeEJKLEdBQVosQ0FBUDtBQStCRCxDQXRDRDs7ZUF3Q2UvQixZIiwic291cmNlUm9vdCI6Ii4uL2xpYiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgYyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgYXNTdHlsZURhdGEgfSBmcm9tICd0aGUtY29tcG9uZW50LXV0aWwnXG5pbXBvcnQgeyBUaGVTdHlsZSB9IGZyb20gJ3RoZS1zdHlsZSdcblxuLyoqIFN0eWxlIGZvciBUaGVTcGluICovXG5jb25zdCBUaGVTcGluU3R5bGUgPSAoeyBjbGFzc05hbWUsIGlkLCBvcHRpb25zIH0pID0+IChcbiAgPFRoZVN0eWxlIHsuLi57IGlkIH19XG4gICAgICAgICAgICBjbGFzc05hbWU9e2MoJ3RoZS1zcGluLXN0eWxlJywgY2xhc3NOYW1lKX1cbiAgICAgICAgICAgIHN0eWxlcz17VGhlU3BpblN0eWxlLmRhdGEob3B0aW9ucyl9XG4gIC8+XG4pXG5cblRoZVNwaW5TdHlsZS5kaXNwbGF5TmFtZSA9ICdUaGVTcGluU3R5bGUnXG5UaGVTcGluU3R5bGUucHJvcFR5cGVzID0ge1xuICAvKiogU3R5bGUgb3B0aW9ucyAqL1xuICBvcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxufVxuXG5UaGVTcGluU3R5bGUuZGVmYXVsdFByb3BzID0ge1xuICBvcHRpb25zOiB7fSxcbn1cblxuVGhlU3BpblN0eWxlLmRhdGEgPSAob3B0aW9ucykgPT4ge1xuICBjb25zdCB7IFRoZW1lVmFsdWVzIH0gPSBUaGVTdHlsZVxuICBjb25zdCB7XG4gICAgZG9taW5hbnRDb2xvciA9IFRoZW1lVmFsdWVzLmRvbWluYW50Q29sb3IsXG4gICAgbGlnaHRUZXh0Q29sb3IgPSBUaGVtZVZhbHVlcy5saWdodFRleHRDb2xvcixcbiAgICBvdmVybGF5QmFja2dyb3VuZENvbG9yID0gVGhlbWVWYWx1ZXMub3ZlcmxheUJhY2tncm91bmRDb2xvcixcbiAgfSA9IG9wdGlvbnNcbiAgcmV0dXJuIGFzU3R5bGVEYXRhKHtcbiAgICAnLnRoZS1zcGluJzoge1xuICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICB9LFxuICAgICcudGhlLXNwaW4udGhlLXNwaW5uZXItY292ZXInOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGJhY2tncm91bmQ6IG92ZXJsYXlCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3R0b206IDAsXG4gICAgICBjb2xvcjogbGlnaHRUZXh0Q29sb3IsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHpJbmRleDogNCxcbiAgICB9LFxuICAgICcudGhlLXNwaW4udGhlLXNwaW5uZXItZW5hYmxlZCc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9LFxuICAgICcudGhlLXNwaW5uZXItaWNvbic6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgbWFyZ2luOiAnMCA0cHgnLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHRyYW5zaXRpb246ICdvcGFjaXR5IDEwMG1zJyxcbiAgICB9LFxuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVTcGluU3R5bGVcbiJdfQ==