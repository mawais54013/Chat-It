{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport c from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { asStyleData } from 'the-component-util';\nimport { TheStyle } from 'the-style';\n/** Style for TheButton */\n\nvar TheButtonStyle = function TheButtonStyle(_ref) {\n  var className = _ref.className,\n      id = _ref.id,\n      options = _ref.options;\n  return React.createElement(TheStyle, _extends({\n    id: id\n  }, {\n    className: c('the-button-style', className),\n    styles: TheButtonStyle.data(options)\n  }));\n};\n\nTheButtonStyle.displayName = 'TheButtonStyle';\nTheButtonStyle.propTypes = {\n  /** Style options */\n  options: PropTypes.object\n};\nTheButtonStyle.defaultProps = {\n  options: {}\n};\n\nTheButtonStyle.data = function (options) {\n  var ThemeValues = TheStyle.ThemeValues;\n  var _options$backgroundCo = options.backgroundColor,\n      backgroundColor = _options$backgroundCo === void 0 ? ThemeValues.backgroundColor : _options$backgroundCo,\n      _options$contentWidth = options.contentWidth,\n      contentWidth = _options$contentWidth === void 0 ? ThemeValues.contentWidth : _options$contentWidth,\n      _options$dangerColor = options.dangerColor,\n      dangerColor = _options$dangerColor === void 0 ? '#A33' : _options$dangerColor,\n      _options$disabledBack = options.disabledBackgroundColor,\n      disabledBackgroundColor = _options$disabledBack === void 0 ? ThemeValues.disabledBackgroundColor : _options$disabledBack,\n      _options$disabledText = options.disabledTextColor,\n      disabledTextColor = _options$disabledText === void 0 ? ThemeValues.disabledTextColor : _options$disabledText,\n      _options$dominantColo = options.dominantColor,\n      dominantColor = _options$dominantColo === void 0 ? ThemeValues.dominantColor : _options$dominantColo,\n      _options$lightTextCol = options.lightTextColor,\n      lightTextColor = _options$lightTextCol === void 0 ? ThemeValues.lightTextColor : _options$lightTextCol,\n      _options$overlayBackg = options.overlayBackgroundColor,\n      overlayBackgroundColor = _options$overlayBackg === void 0 ? ThemeValues.overlayBackgroundColor : _options$overlayBackg,\n      _options$overlayTextC = options.overlayTextColor,\n      overlayTextColor = _options$overlayTextC === void 0 ? ThemeValues.overlayTextColor : _options$overlayTextC,\n      _options$tappableHeig = options.tappableHeight,\n      tappableHeight = _options$tappableHeig === void 0 ? ThemeValues.tappableHeight : _options$tappableHeig;\n  return Object.assign({}, asStyleData({\n    '.the-button': {\n      alignItems: 'center',\n      backgroundColor: backgroundColor,\n      border: \"1px solid\",\n      borderRadius: '4px',\n      boxSizing: 'border-box',\n      color: dominantColor,\n      cursor: 'pointer',\n      display: 'inline-flex',\n      flexDirection: 'row',\n      justifyContent: 'center',\n      margin: '4px',\n      maxWidth: contentWidth,\n      minHeight: tappableHeight,\n      outlineColor: dominantColor,\n      padding: '0.5em 1em',\n      position: 'relative',\n      textAlign: 'center',\n      textDecoration: 'none'\n    },\n    '.the-button-icon': {\n      marginLeft: '0',\n      marginRight: '2px'\n    },\n    '.the-button-icon-right': {\n      marginLeft: '2px',\n      marginRight: '0'\n    },\n    '.the-button-inner': {\n      display: 'inline-block'\n    },\n    '.the-button-large-icon': {\n      display: 'block',\n      fontSize: '3em',\n      margin: '0'\n    },\n    '.the-button-spinner': {\n      alignItems: 'center',\n      backgroundColor: overlayBackgroundColor,\n      borderColor: overlayBackgroundColor,\n      bottom: 0,\n      color: overlayTextColor,\n      display: 'flex',\n      justifyContent: 'center',\n      left: 0,\n      overflow: 'hidden',\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      zIndex: 1\n    },\n    '.the-button-text': {\n      display: 'inline-block',\n      padding: '0 2px'\n    },\n    '.the-button:active': {\n      boxShadow: '1px 2px 2px rgba(0,0,0,0.33) inset'\n    },\n    '.the-button:hover': {\n      opacity: '0.9'\n    },\n    '.the-button.the-button-danger': {\n      backgroundColor: dangerColor,\n      border: dangerColor,\n      color: 'white'\n    },\n    '.the-button.the-button-disabled': {\n      '&:hover, &:active': {\n        boxShadow: 'none',\n        cursor: 'default'\n      },\n      '&.the-button-primary': {\n        backgroundColor: disabledBackgroundColor,\n        borderColor: disabledTextColor,\n        color: disabledTextColor\n      },\n      backgroundColor: disabledBackgroundColor,\n      color: disabledTextColor,\n      cursor: 'default',\n      pointerEvents: 'none'\n    },\n    '.the-button.the-button-floated': {\n      '&:active': {\n        boxShadow: 'none'\n      },\n      boxShadow: '2px 2px 4px rgba(0,0,0,0.33)'\n    },\n    '.the-button.the-button-large': {\n      fontSize: '2em'\n    },\n    '.the-button.the-button-light': {\n      backgroundColor: 'transparent',\n      borderColor: lightTextColor,\n      color: lightTextColor\n    },\n    '.the-button.the-button-primary': {\n      backgroundColor: dominantColor,\n      borderColor: dominantColor,\n      color: backgroundColor\n    },\n    '.the-button.the-button-rounded': {\n      '.the-button-icon': {\n        alignItems: 'center',\n        bottom: 0,\n        display: 'flex',\n        fontSize: '3em',\n        justifyContent: 'center',\n        left: 0,\n        opacity: 0.12,\n        pointerEvents: 'none',\n        position: 'absolute',\n        right: 0,\n        top: 0,\n        zIndex: 0\n      },\n      '.the-button-spinner': {\n        borderRadius: '50%'\n      },\n      borderRadius: '50%',\n      borderWidth: '4px',\n      height: '6em',\n      width: '6em'\n    },\n    '.the-button.the-button-simple': {\n      '&:active': {\n        boxShadow: 'none'\n      },\n      backgroundColor: 'transparent',\n      border: 'none'\n    },\n    '.the-button.the-button-small': {\n      fontSize: 'small',\n      minHeight: '12px'\n    },\n    '.the-button.the-button-vertical': {\n      flexDirection: 'column'\n    },\n    '.the-button.the-button-wide': {\n      boxSizing: 'border-box',\n      display: 'flex',\n      margin: '4px auto',\n      width: '100%'\n    },\n    '.the-button.the-link': {\n      display: 'inline-flex',\n      padding: '0.5em 1em'\n    }\n  }), asStyleData({\n    '.the-button-group': {\n      '.the-button': {\n        flexGrow: 1\n      },\n      alignItems: 'center',\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      margin: '8px auto',\n      maxWidth: contentWidth,\n      width: '100%'\n    },\n    '.the-button-group.the-button-group-collapsed': {\n      '.the-button': {\n        '&:first-child': {\n          borderLeft: 'none',\n          margin: '0'\n        },\n        '&:last-child': {\n          borderRight: 'none'\n        },\n        borderBottom: 'none',\n        borderRadius: 0,\n        borderRight: 'none',\n        margin: '0 -1px 0 0',\n        paddingBottom: '1em',\n        paddingTop: '1em',\n        width: '100%'\n      },\n      alignItems: 'stretch',\n      flexWrap: 'nowrap'\n    },\n    '.the-button-group.the-button-group-left': {\n      justifyContent: 'flex-start'\n    },\n    '.the-button-group.the-button-group-nowrap': {\n      flexWrap: 'nowrap'\n    },\n    '.the-button-group.the-button-group-right': {\n      justifyContent: 'flex-end'\n    }\n  }));\n};\n\nexport default TheButtonStyle;","map":null,"metadata":{},"sourceType":"module"}