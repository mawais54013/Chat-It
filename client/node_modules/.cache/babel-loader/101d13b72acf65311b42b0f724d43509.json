{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport c from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { unlessProduction } from 'the-check';\nimport { textColorFor } from 'the-color';\nimport { eventHandlersFor, htmlAttributesFor } from 'the-component-util';\nimport { TheIcon } from 'the-icon';\nimport { TheLink } from 'the-link';\nimport TheButtonGroup from './TheButtonGroup';\n/**\n * Button of the-components\n */\n\nvar TheButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TheButton, _React$Component);\n\n  _createClass(TheButton, null, [{\n    key: \"Next\",\n    value: function Next(props) {\n      return React.createElement(TheButton, _extends({\n        iconRight: TheButton.NEXT_ICON\n      }, props));\n    }\n  }, {\n    key: \"Prev\",\n    value: function Prev(props) {\n      return React.createElement(TheButton, _extends({\n        icon: TheButton.PREV_ICON\n      }, props));\n    }\n  }, {\n    key: \"Spinner\",\n    value: function Spinner() {\n      return React.createElement(\"span\", {\n        className: \"the-button-spinner\"\n      }, React.createElement(TheIcon.Spin, {\n        className: \"the-button-spinner-icon\"\n      }));\n    }\n  }]);\n\n  function TheButton(props) {\n    var _this;\n\n    _classCallCheck(this, TheButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TheButton).call(this, props));\n    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.lastClickedAt = null;\n    return _this;\n  }\n\n  _createClass(TheButton, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      var _this$props = this.props,\n          minInterval = _this$props.minInterval,\n          onClick = _this$props.onClick,\n          onSubmit = _this$props.onSubmit;\n\n      if (this.lastClickedAt) {\n        var sinceLast = new Date() - this.lastClickedAt;\n        var tooSoon = sinceLast < minInterval;\n\n        if (tooSoon) {\n          unlessProduction(function () {\n            console.warn(\"[TheButton] Prevent double click ( minInterval: \".concat(minInterval, \"ms, actual: \").concat(sinceLast, \"ms )\"));\n          });\n          return;\n        }\n      }\n\n      onClick && onClick(e);\n      onSubmit && onSubmit();\n      this.lastClickedAt = new Date();\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(e) {\n      var _this$props2 = this.props,\n          onClick = _this$props2.onClick,\n          onKeyDown = _this$props2.onKeyDown,\n          onSubmit = _this$props2.onSubmit;\n\n      switch (e.keyCode) {\n        case 32:\n          // Space key\n          e.preventDefault();\n          onSubmit && onSubmit();\n          onClick && onClick();\n          break;\n\n        default:\n          break;\n      }\n\n      onKeyDown && onKeyDown(e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var children = props.children,\n          className = props.className,\n          color = props.color,\n          danger = props.danger,\n          disabled = props.disabled,\n          floated = props.floated,\n          icon = props.icon,\n          iconRight = props.iconRight,\n          large = props.large,\n          largeIcon = props.largeIcon,\n          light = props.light,\n          primary = props.primary,\n          rounded = props.rounded,\n          simple = props.simple,\n          small = props.small,\n          spinning = props.spinning,\n          _props$style = props.style,\n          style = _props$style === void 0 ? {} : _props$style,\n          target = props.target,\n          text = props.text,\n          to = props.to,\n          wide = props.wide;\n      var A = to ? TheLink : 'a';\n      var applyColor = color && !danger && !disabled;\n\n      if (applyColor && style) {\n        style.borderColor = color;\n\n        if (primary) {\n          style.backgroundColor = color;\n          style.color = textColorFor(color);\n        } else {\n          style.color = color;\n        }\n      }\n\n      return React.createElement(A, _extends({}, htmlAttributesFor(props, {\n        except: ['className', 'style', 'icon', 'to', 'color', 'iconRight']\n      }), eventHandlersFor(props, {\n        except: ['onClick']\n      }), {\n        \"aria-busy\": spinning,\n        className: c('the-button', className, {\n          'the-button-danger': danger,\n          'the-button-disabled': disabled,\n          'the-button-floated': floated,\n          'the-button-large': large,\n          'the-button-light': light,\n          'the-button-primary': primary,\n          'the-button-rounded': rounded,\n          'the-button-simple': simple,\n          'the-button-small': small,\n          'the-button-spinning': spinning,\n          'the-button-vertical': !!largeIcon,\n          'the-button-wide': wide\n        }),\n        onClick: this.handleClick\n      }, {\n        style: style,\n        target: target,\n        to: to\n      }, {\n        href: !to && props.href || 'javascript:void(0)',\n        onKeyDown: this.handleKeyDown\n      }), React.createElement(\"span\", {\n        className: \"the-button-inner\"\n      }, spinning && React.createElement(TheButton.Spinner, null), largeIcon && React.createElement(TheIcon, {\n        className: c('the-button-large-icon', largeIcon)\n      }), icon && React.createElement(TheIcon, {\n        className: c('the-button-icon', icon)\n      }), text && React.createElement(\"span\", {\n        className: c('the-button-text')\n      }, text), children, iconRight && React.createElement(TheIcon, {\n        className: c('the-button-icon', 'the-button-icon-right', iconRight)\n      })));\n    }\n  }]);\n\n  return TheButton;\n}(React.Component);\n\nTheButton.Group = TheButtonGroup;\nTheButton.PREV_ICON = 'fas fa-caret-left';\nTheButton.NEXT_ICON = 'fas fa-caret-right';\nTheButton.propTypes = {\n  /** Color theme */\n  color: PropTypes.string,\n\n  /** Danger style */\n  danger: PropTypes.bool,\n\n  /** Disabled state */\n  disabled: PropTypes.bool,\n\n  /** Floated style */\n  floated: PropTypes.bool,\n\n  /** Icon class */\n  icon: PropTypes.string,\n\n  /** Large style */\n  large: PropTypes.bool,\n\n  /** Large icon class */\n  largeIcon: PropTypes.string,\n\n  /** Light color */\n  light: PropTypes.bool,\n\n  /** Minimum interval */\n  minInterval: PropTypes.number,\n\n  /** Handle submit */\n  onSubmit: PropTypes.func,\n\n  /** Primary style */\n  primary: PropTypes.bool,\n\n  /** Rounded style */\n  rounded: PropTypes.bool,\n\n  /** Simple style */\n  simple: PropTypes.bool,\n\n  /** Small style */\n  small: PropTypes.bool,\n\n  /** Show spinner */\n  spinning: PropTypes.bool,\n\n  /** Button text */\n  text: PropTypes.string,\n\n  /** Wide style */\n  wide: PropTypes.bool\n};\nTheButton.defaultProps = {\n  color: null,\n  danger: false,\n  disabled: false,\n  floated: false,\n  icon: null,\n  large: false,\n  largeIcon: null,\n  light: false,\n  minInterval: 300,\n  onSubmit: null,\n  primary: false,\n  role: 'button',\n  rounded: false,\n  simple: false,\n  small: false,\n  spinning: false,\n  text: null,\n  wide: false\n};\nTheButton.displayName = 'TheButton';\nexport default TheButton;","map":null,"metadata":{},"sourceType":"module"}