'use strict';

import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import c from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { unlessProduction } from 'the-check';
import { textColorFor } from 'the-color';
import { eventHandlersFor, htmlAttributesFor } from 'the-component-util';
import { TheIcon } from 'the-icon';
import { TheLink } from 'the-link';
import TheButtonGroup from './TheButtonGroup';
/**
 * Button of the-components
 */

var TheButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TheButton, _React$Component);

  _createClass(TheButton, null, [{
    key: "Next",
    value: function Next(props) {
      return React.createElement(TheButton, _extends({
        iconRight: TheButton.NEXT_ICON
      }, props));
    }
  }, {
    key: "Prev",
    value: function Prev(props) {
      return React.createElement(TheButton, _extends({
        icon: TheButton.PREV_ICON
      }, props));
    }
  }, {
    key: "Spinner",
    value: function Spinner() {
      return React.createElement("span", {
        className: "the-button-spinner"
      }, React.createElement(TheIcon.Spin, {
        className: "the-button-spinner-icon"
      }));
    }
  }]);

  function TheButton(props) {
    var _this;

    _classCallCheck(this, TheButton);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TheButton).call(this, props));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.lastClickedAt = null;
    return _this;
  }

  _createClass(TheButton, [{
    key: "handleClick",
    value: function handleClick(e) {
      var _this$props = this.props,
          minInterval = _this$props.minInterval,
          onClick = _this$props.onClick,
          onSubmit = _this$props.onSubmit;

      if (this.lastClickedAt) {
        var sinceLast = new Date() - this.lastClickedAt;
        var tooSoon = sinceLast < minInterval;

        if (tooSoon) {
          unlessProduction(function () {
            console.warn("[TheButton] Prevent double click ( minInterval: ".concat(minInterval, "ms, actual: ").concat(sinceLast, "ms )"));
          });
          return;
        }
      }

      onClick && onClick(e);
      onSubmit && onSubmit();
      this.lastClickedAt = new Date();
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(e) {
      var _this$props2 = this.props,
          onClick = _this$props2.onClick,
          onKeyDown = _this$props2.onKeyDown,
          onSubmit = _this$props2.onSubmit;

      switch (e.keyCode) {
        case 32:
          // Space key
          e.preventDefault();
          onSubmit && onSubmit();
          onClick && onClick();
          break;

        default:
          break;
      }

      onKeyDown && onKeyDown(e);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var children = props.children,
          className = props.className,
          color = props.color,
          danger = props.danger,
          disabled = props.disabled,
          floated = props.floated,
          icon = props.icon,
          iconRight = props.iconRight,
          large = props.large,
          largeIcon = props.largeIcon,
          light = props.light,
          primary = props.primary,
          rounded = props.rounded,
          simple = props.simple,
          small = props.small,
          spinning = props.spinning,
          _props$style = props.style,
          style = _props$style === void 0 ? {} : _props$style,
          target = props.target,
          text = props.text,
          to = props.to,
          wide = props.wide;
      var A = to ? TheLink : 'a';
      var applyColor = color && !danger && !disabled;

      if (applyColor && style) {
        style.borderColor = color;

        if (primary) {
          style.backgroundColor = color;
          style.color = textColorFor(color);
        } else {
          style.color = color;
        }
      }

      return React.createElement(A, _extends({}, htmlAttributesFor(props, {
        except: ['className', 'style', 'icon', 'to', 'color', 'iconRight']
      }), eventHandlersFor(props, {
        except: ['onClick']
      }), {
        "aria-busy": spinning,
        className: c('the-button', className, {
          'the-button-danger': danger,
          'the-button-disabled': disabled,
          'the-button-floated': floated,
          'the-button-large': large,
          'the-button-light': light,
          'the-button-primary': primary,
          'the-button-rounded': rounded,
          'the-button-simple': simple,
          'the-button-small': small,
          'the-button-spinning': spinning,
          'the-button-vertical': !!largeIcon,
          'the-button-wide': wide
        }),
        onClick: this.handleClick
      }, {
        style: style,
        target: target,
        to: to
      }, {
        href: !to && props.href || 'javascript:void(0)',
        onKeyDown: this.handleKeyDown
      }), React.createElement("span", {
        className: "the-button-inner"
      }, spinning && React.createElement(TheButton.Spinner, null), largeIcon && React.createElement(TheIcon, {
        className: c('the-button-large-icon', largeIcon)
      }), icon && React.createElement(TheIcon, {
        className: c('the-button-icon', icon)
      }), text && React.createElement("span", {
        className: c('the-button-text')
      }, text), children, iconRight && React.createElement(TheIcon, {
        className: c('the-button-icon', 'the-button-icon-right', iconRight)
      })));
    }
  }]);

  return TheButton;
}(React.Component);

TheButton.Group = TheButtonGroup;
TheButton.PREV_ICON = 'fas fa-caret-left';
TheButton.NEXT_ICON = 'fas fa-caret-right';
TheButton.propTypes = {
  /** Color theme */
  color: PropTypes.string,

  /** Danger style */
  danger: PropTypes.bool,

  /** Disabled state */
  disabled: PropTypes.bool,

  /** Floated style */
  floated: PropTypes.bool,

  /** Icon class */
  icon: PropTypes.string,

  /** Large style */
  large: PropTypes.bool,

  /** Large icon class */
  largeIcon: PropTypes.string,

  /** Light color */
  light: PropTypes.bool,

  /** Minimum interval */
  minInterval: PropTypes.number,

  /** Handle submit */
  onSubmit: PropTypes.func,

  /** Primary style */
  primary: PropTypes.bool,

  /** Rounded style */
  rounded: PropTypes.bool,

  /** Simple style */
  simple: PropTypes.bool,

  /** Small style */
  small: PropTypes.bool,

  /** Show spinner */
  spinning: PropTypes.bool,

  /** Button text */
  text: PropTypes.string,

  /** Wide style */
  wide: PropTypes.bool
};
TheButton.defaultProps = {
  color: null,
  danger: false,
  disabled: false,
  floated: false,
  icon: null,
  large: false,
  largeIcon: null,
  light: false,
  minInterval: 300,
  onSubmit: null,
  primary: false,
  role: 'button',
  rounded: false,
  simple: false,
  small: false,
  spinning: false,
  text: null,
  wide: false
};
TheButton.displayName = 'TheButton';
export default TheButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZUJ1dHRvbi5qcyJdLCJuYW1lcyI6WyJjIiwiUHJvcFR5cGVzIiwiUmVhY3QiLCJ1bmxlc3NQcm9kdWN0aW9uIiwidGV4dENvbG9yRm9yIiwiZXZlbnRIYW5kbGVyc0ZvciIsImh0bWxBdHRyaWJ1dGVzRm9yIiwiVGhlSWNvbiIsIlRoZUxpbmsiLCJUaGVCdXR0b25Hcm91cCIsIlRoZUJ1dHRvbiIsInByb3BzIiwiTkVYVF9JQ09OIiwiUFJFVl9JQ09OIiwiaGFuZGxlS2V5RG93biIsImJpbmQiLCJoYW5kbGVDbGljayIsImxhc3RDbGlja2VkQXQiLCJlIiwibWluSW50ZXJ2YWwiLCJvbkNsaWNrIiwib25TdWJtaXQiLCJzaW5jZUxhc3QiLCJEYXRlIiwidG9vU29vbiIsImNvbnNvbGUiLCJ3YXJuIiwib25LZXlEb3duIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJjb2xvciIsImRhbmdlciIsImRpc2FibGVkIiwiZmxvYXRlZCIsImljb24iLCJpY29uUmlnaHQiLCJsYXJnZSIsImxhcmdlSWNvbiIsImxpZ2h0IiwicHJpbWFyeSIsInJvdW5kZWQiLCJzaW1wbGUiLCJzbWFsbCIsInNwaW5uaW5nIiwic3R5bGUiLCJ0YXJnZXQiLCJ0ZXh0IiwidG8iLCJ3aWRlIiwiQSIsImFwcGx5Q29sb3IiLCJib3JkZXJDb2xvciIsImJhY2tncm91bmRDb2xvciIsImV4Y2VwdCIsImhyZWYiLCJDb21wb25lbnQiLCJHcm91cCIsInByb3BUeXBlcyIsInN0cmluZyIsImJvb2wiLCJudW1iZXIiLCJmdW5jIiwiZGVmYXVsdFByb3BzIiwicm9sZSIsImRpc3BsYXlOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBRUEsT0FBT0EsQ0FBUCxNQUFjLFlBQWQ7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQVNDLGdCQUFULFFBQWlDLFdBQWpDO0FBQ0EsU0FBU0MsWUFBVCxRQUE2QixXQUE3QjtBQUNBLFNBQVNDLGdCQUFULEVBQTJCQyxpQkFBM0IsUUFBb0Qsb0JBQXBEO0FBQ0EsU0FBU0MsT0FBVCxRQUF3QixVQUF4QjtBQUNBLFNBQVNDLE9BQVQsUUFBd0IsVUFBeEI7QUFDQSxPQUFPQyxjQUFQLE1BQTJCLGtCQUEzQjtBQUVBOzs7O0lBR01DLFM7Ozs7Ozs7eUJBQ1FDLEssRUFBTztBQUNqQixhQUFPLG9CQUFDLFNBQUQ7QUFBVyxRQUFBLFNBQVMsRUFBRUQsU0FBUyxDQUFDRTtBQUFoQyxTQUErQ0QsS0FBL0MsRUFBUDtBQUNEOzs7eUJBRVdBLEssRUFBTztBQUNqQixhQUFPLG9CQUFDLFNBQUQ7QUFBVyxRQUFBLElBQUksRUFBRUQsU0FBUyxDQUFDRztBQUEzQixTQUEwQ0YsS0FBMUMsRUFBUDtBQUNEOzs7OEJBRWdCO0FBQ2YsYUFDRTtBQUFNLFFBQUEsU0FBUyxFQUFDO0FBQWhCLFNBQ0Usb0JBQUMsT0FBRCxDQUFTLElBQVQ7QUFBYyxRQUFBLFNBQVMsRUFBQztBQUF4QixRQURGLENBREY7QUFLRDs7O0FBRUQscUJBQVlBLEtBQVosRUFBbUI7QUFBQTs7QUFBQTs7QUFDakIsbUZBQU1BLEtBQU47QUFDQSxVQUFLRyxhQUFMLEdBQXFCLE1BQUtBLGFBQUwsQ0FBbUJDLElBQW5CLHVEQUFyQjtBQUNBLFVBQUtDLFdBQUwsR0FBbUIsTUFBS0EsV0FBTCxDQUFpQkQsSUFBakIsdURBQW5CO0FBQ0EsVUFBS0UsYUFBTCxHQUFxQixJQUFyQjtBQUppQjtBQUtsQjs7OztnQ0FFV0MsQyxFQUFHO0FBQUEsd0JBQzhCLEtBQUtQLEtBRG5DO0FBQUEsVUFDTFEsV0FESyxlQUNMQSxXQURLO0FBQUEsVUFDUUMsT0FEUixlQUNRQSxPQURSO0FBQUEsVUFDaUJDLFFBRGpCLGVBQ2lCQSxRQURqQjs7QUFFYixVQUFJLEtBQUtKLGFBQVQsRUFBd0I7QUFDdEIsWUFBTUssU0FBUyxHQUFHLElBQUlDLElBQUosS0FBYSxLQUFLTixhQUFwQztBQUNBLFlBQU1PLE9BQU8sR0FBR0YsU0FBUyxHQUFHSCxXQUE1Qjs7QUFDQSxZQUFJSyxPQUFKLEVBQWE7QUFDWHJCLFVBQUFBLGdCQUFnQixDQUFDLFlBQU07QUFDckJzQixZQUFBQSxPQUFPLENBQUNDLElBQVIsMkRBQ3FEUCxXQURyRCx5QkFDK0VHLFNBRC9FO0FBR0QsV0FKZSxDQUFoQjtBQUtBO0FBQ0Q7QUFDRjs7QUFDREYsTUFBQUEsT0FBTyxJQUFJQSxPQUFPLENBQUNGLENBQUQsQ0FBbEI7QUFDQUcsTUFBQUEsUUFBUSxJQUFJQSxRQUFRLEVBQXBCO0FBQ0EsV0FBS0osYUFBTCxHQUFxQixJQUFJTSxJQUFKLEVBQXJCO0FBQ0Q7OztrQ0FFYUwsQyxFQUFHO0FBQUEseUJBQzBCLEtBQUtQLEtBRC9CO0FBQUEsVUFDUFMsT0FETyxnQkFDUEEsT0FETztBQUFBLFVBQ0VPLFNBREYsZ0JBQ0VBLFNBREY7QUFBQSxVQUNhTixRQURiLGdCQUNhQSxRQURiOztBQUVmLGNBQVFILENBQUMsQ0FBQ1UsT0FBVjtBQUNFLGFBQUssRUFBTDtBQUFTO0FBQ1BWLFVBQUFBLENBQUMsQ0FBQ1csY0FBRjtBQUNBUixVQUFBQSxRQUFRLElBQUlBLFFBQVEsRUFBcEI7QUFDQUQsVUFBQUEsT0FBTyxJQUFJQSxPQUFPLEVBQWxCO0FBQ0E7O0FBQ0Y7QUFDRTtBQVBKOztBQVNBTyxNQUFBQSxTQUFTLElBQUlBLFNBQVMsQ0FBQ1QsQ0FBRCxDQUF0QjtBQUNEOzs7NkJBRVE7QUFBQSxVQUNDUCxLQURELEdBQ1csSUFEWCxDQUNDQSxLQUREO0FBQUEsVUFHTG1CLFFBSEssR0F3QkhuQixLQXhCRyxDQUdMbUIsUUFISztBQUFBLFVBSUxDLFNBSkssR0F3QkhwQixLQXhCRyxDQUlMb0IsU0FKSztBQUFBLFVBS0xDLEtBTEssR0F3QkhyQixLQXhCRyxDQUtMcUIsS0FMSztBQUFBLFVBTUxDLE1BTkssR0F3Qkh0QixLQXhCRyxDQU1Mc0IsTUFOSztBQUFBLFVBT0xDLFFBUEssR0F3Qkh2QixLQXhCRyxDQU9MdUIsUUFQSztBQUFBLFVBUUxDLE9BUkssR0F3Qkh4QixLQXhCRyxDQVFMd0IsT0FSSztBQUFBLFVBU0xDLElBVEssR0F3Qkh6QixLQXhCRyxDQVNMeUIsSUFUSztBQUFBLFVBVUxDLFNBVkssR0F3QkgxQixLQXhCRyxDQVVMMEIsU0FWSztBQUFBLFVBV0xDLEtBWEssR0F3QkgzQixLQXhCRyxDQVdMMkIsS0FYSztBQUFBLFVBWUxDLFNBWkssR0F3Qkg1QixLQXhCRyxDQVlMNEIsU0FaSztBQUFBLFVBYUxDLEtBYkssR0F3Qkg3QixLQXhCRyxDQWFMNkIsS0FiSztBQUFBLFVBY0xDLE9BZEssR0F3Qkg5QixLQXhCRyxDQWNMOEIsT0FkSztBQUFBLFVBZUxDLE9BZkssR0F3QkgvQixLQXhCRyxDQWVMK0IsT0FmSztBQUFBLFVBZ0JMQyxNQWhCSyxHQXdCSGhDLEtBeEJHLENBZ0JMZ0MsTUFoQks7QUFBQSxVQWlCTEMsS0FqQkssR0F3QkhqQyxLQXhCRyxDQWlCTGlDLEtBakJLO0FBQUEsVUFrQkxDLFFBbEJLLEdBd0JIbEMsS0F4QkcsQ0FrQkxrQyxRQWxCSztBQUFBLHlCQXdCSGxDLEtBeEJHLENBbUJMbUMsS0FuQks7QUFBQSxVQW1CTEEsS0FuQkssNkJBbUJHLEVBbkJIO0FBQUEsVUFvQkxDLE1BcEJLLEdBd0JIcEMsS0F4QkcsQ0FvQkxvQyxNQXBCSztBQUFBLFVBcUJMQyxJQXJCSyxHQXdCSHJDLEtBeEJHLENBcUJMcUMsSUFyQks7QUFBQSxVQXNCTEMsRUF0QkssR0F3Qkh0QyxLQXhCRyxDQXNCTHNDLEVBdEJLO0FBQUEsVUF1QkxDLElBdkJLLEdBd0JIdkMsS0F4QkcsQ0F1Qkx1QyxJQXZCSztBQXlCUCxVQUFNQyxDQUFDLEdBQUdGLEVBQUUsR0FBR3pDLE9BQUgsR0FBYSxHQUF6QjtBQUVBLFVBQU00QyxVQUFVLEdBQUdwQixLQUFLLElBQUksQ0FBQ0MsTUFBVixJQUFvQixDQUFDQyxRQUF4Qzs7QUFDQSxVQUFJa0IsVUFBVSxJQUFJTixLQUFsQixFQUF5QjtBQUN2QkEsUUFBQUEsS0FBSyxDQUFDTyxXQUFOLEdBQW9CckIsS0FBcEI7O0FBQ0EsWUFBSVMsT0FBSixFQUFhO0FBQ1hLLFVBQUFBLEtBQUssQ0FBQ1EsZUFBTixHQUF3QnRCLEtBQXhCO0FBQ0FjLFVBQUFBLEtBQUssQ0FBQ2QsS0FBTixHQUFjNUIsWUFBWSxDQUFDNEIsS0FBRCxDQUExQjtBQUNELFNBSEQsTUFHTztBQUNMYyxVQUFBQSxLQUFLLENBQUNkLEtBQU4sR0FBY0EsS0FBZDtBQUNEO0FBQ0Y7O0FBQ0QsYUFDRSxvQkFBQyxDQUFELGVBQ00xQixpQkFBaUIsQ0FBQ0ssS0FBRCxFQUFRO0FBQzNCNEMsUUFBQUEsTUFBTSxFQUFFLENBQUMsV0FBRCxFQUFjLE9BQWQsRUFBdUIsTUFBdkIsRUFBK0IsSUFBL0IsRUFBcUMsT0FBckMsRUFBOEMsV0FBOUM7QUFEbUIsT0FBUixDQUR2QixFQUlNbEQsZ0JBQWdCLENBQUNNLEtBQUQsRUFBUTtBQUFFNEMsUUFBQUEsTUFBTSxFQUFFLENBQUMsU0FBRDtBQUFWLE9BQVIsQ0FKdEI7QUFLRSxxQkFBV1YsUUFMYjtBQU1FLFFBQUEsU0FBUyxFQUFFN0MsQ0FBQyxDQUFDLFlBQUQsRUFBZStCLFNBQWYsRUFBMEI7QUFDcEMsK0JBQXFCRSxNQURlO0FBRXBDLGlDQUF1QkMsUUFGYTtBQUdwQyxnQ0FBc0JDLE9BSGM7QUFJcEMsOEJBQW9CRyxLQUpnQjtBQUtwQyw4QkFBb0JFLEtBTGdCO0FBTXBDLGdDQUFzQkMsT0FOYztBQU9wQyxnQ0FBc0JDLE9BUGM7QUFRcEMsK0JBQXFCQyxNQVJlO0FBU3BDLDhCQUFvQkMsS0FUZ0I7QUFVcEMsaUNBQXVCQyxRQVZhO0FBV3BDLGlDQUF1QixDQUFDLENBQUNOLFNBWFc7QUFZcEMsNkJBQW1CVztBQVppQixTQUExQixDQU5kO0FBb0JFLFFBQUEsT0FBTyxFQUFFLEtBQUtsQztBQXBCaEIsU0FxQk07QUFBRThCLFFBQUFBLEtBQUssRUFBTEEsS0FBRjtBQUFTQyxRQUFBQSxNQUFNLEVBQU5BLE1BQVQ7QUFBaUJFLFFBQUFBLEVBQUUsRUFBRkE7QUFBakIsT0FyQk47QUFzQkUsUUFBQSxJQUFJLEVBQUcsQ0FBQ0EsRUFBRCxJQUFPdEMsS0FBSyxDQUFDNkMsSUFBZCxJQUF1QixvQkF0Qi9CO0FBdUJFLFFBQUEsU0FBUyxFQUFFLEtBQUsxQztBQXZCbEIsVUF5QkU7QUFBTSxRQUFBLFNBQVMsRUFBQztBQUFoQixTQUNHK0IsUUFBUSxJQUFJLG9CQUFDLFNBQUQsQ0FBVyxPQUFYLE9BRGYsRUFFR04sU0FBUyxJQUNSLG9CQUFDLE9BQUQ7QUFBUyxRQUFBLFNBQVMsRUFBRXZDLENBQUMsQ0FBQyx1QkFBRCxFQUEwQnVDLFNBQTFCO0FBQXJCLFFBSEosRUFLR0gsSUFBSSxJQUFJLG9CQUFDLE9BQUQ7QUFBUyxRQUFBLFNBQVMsRUFBRXBDLENBQUMsQ0FBQyxpQkFBRCxFQUFvQm9DLElBQXBCO0FBQXJCLFFBTFgsRUFNR1ksSUFBSSxJQUFJO0FBQU0sUUFBQSxTQUFTLEVBQUVoRCxDQUFDLENBQUMsaUJBQUQ7QUFBbEIsU0FBd0NnRCxJQUF4QyxDQU5YLEVBT0dsQixRQVBILEVBUUdPLFNBQVMsSUFDUixvQkFBQyxPQUFEO0FBQ0UsUUFBQSxTQUFTLEVBQUVyQyxDQUFDLENBQ1YsaUJBRFUsRUFFVix1QkFGVSxFQUdWcUMsU0FIVTtBQURkLFFBVEosQ0F6QkYsQ0FERjtBQThDRDs7OztFQTVJcUJuQyxLQUFLLENBQUN1RCxTOztBQStJOUIvQyxTQUFTLENBQUNnRCxLQUFWLEdBQWtCakQsY0FBbEI7QUFDQUMsU0FBUyxDQUFDRyxTQUFWLEdBQXNCLG1CQUF0QjtBQUNBSCxTQUFTLENBQUNFLFNBQVYsR0FBc0Isb0JBQXRCO0FBRUFGLFNBQVMsQ0FBQ2lELFNBQVYsR0FBc0I7QUFDcEI7QUFDQTNCLEVBQUFBLEtBQUssRUFBRS9CLFNBQVMsQ0FBQzJELE1BRkc7O0FBR3BCO0FBQ0EzQixFQUFBQSxNQUFNLEVBQUVoQyxTQUFTLENBQUM0RCxJQUpFOztBQUtwQjtBQUNBM0IsRUFBQUEsUUFBUSxFQUFFakMsU0FBUyxDQUFDNEQsSUFOQTs7QUFPcEI7QUFDQTFCLEVBQUFBLE9BQU8sRUFBRWxDLFNBQVMsQ0FBQzRELElBUkM7O0FBU3BCO0FBQ0F6QixFQUFBQSxJQUFJLEVBQUVuQyxTQUFTLENBQUMyRCxNQVZJOztBQVdwQjtBQUNBdEIsRUFBQUEsS0FBSyxFQUFFckMsU0FBUyxDQUFDNEQsSUFaRzs7QUFhcEI7QUFDQXRCLEVBQUFBLFNBQVMsRUFBRXRDLFNBQVMsQ0FBQzJELE1BZEQ7O0FBZXBCO0FBQ0FwQixFQUFBQSxLQUFLLEVBQUV2QyxTQUFTLENBQUM0RCxJQWhCRzs7QUFpQnBCO0FBQ0ExQyxFQUFBQSxXQUFXLEVBQUVsQixTQUFTLENBQUM2RCxNQWxCSDs7QUFtQnBCO0FBQ0F6QyxFQUFBQSxRQUFRLEVBQUVwQixTQUFTLENBQUM4RCxJQXBCQTs7QUFxQnBCO0FBQ0F0QixFQUFBQSxPQUFPLEVBQUV4QyxTQUFTLENBQUM0RCxJQXRCQzs7QUF1QnBCO0FBQ0FuQixFQUFBQSxPQUFPLEVBQUV6QyxTQUFTLENBQUM0RCxJQXhCQzs7QUF5QnBCO0FBQ0FsQixFQUFBQSxNQUFNLEVBQUUxQyxTQUFTLENBQUM0RCxJQTFCRTs7QUEyQnBCO0FBQ0FqQixFQUFBQSxLQUFLLEVBQUUzQyxTQUFTLENBQUM0RCxJQTVCRzs7QUE2QnBCO0FBQ0FoQixFQUFBQSxRQUFRLEVBQUU1QyxTQUFTLENBQUM0RCxJQTlCQTs7QUErQnBCO0FBQ0FiLEVBQUFBLElBQUksRUFBRS9DLFNBQVMsQ0FBQzJELE1BaENJOztBQWlDcEI7QUFDQVYsRUFBQUEsSUFBSSxFQUFFakQsU0FBUyxDQUFDNEQ7QUFsQ0ksQ0FBdEI7QUFxQ0FuRCxTQUFTLENBQUNzRCxZQUFWLEdBQXlCO0FBQ3ZCaEMsRUFBQUEsS0FBSyxFQUFFLElBRGdCO0FBRXZCQyxFQUFBQSxNQUFNLEVBQUUsS0FGZTtBQUd2QkMsRUFBQUEsUUFBUSxFQUFFLEtBSGE7QUFJdkJDLEVBQUFBLE9BQU8sRUFBRSxLQUpjO0FBS3ZCQyxFQUFBQSxJQUFJLEVBQUUsSUFMaUI7QUFNdkJFLEVBQUFBLEtBQUssRUFBRSxLQU5nQjtBQU92QkMsRUFBQUEsU0FBUyxFQUFFLElBUFk7QUFRdkJDLEVBQUFBLEtBQUssRUFBRSxLQVJnQjtBQVN2QnJCLEVBQUFBLFdBQVcsRUFBRSxHQVRVO0FBVXZCRSxFQUFBQSxRQUFRLEVBQUUsSUFWYTtBQVd2Qm9CLEVBQUFBLE9BQU8sRUFBRSxLQVhjO0FBWXZCd0IsRUFBQUEsSUFBSSxFQUFFLFFBWmlCO0FBYXZCdkIsRUFBQUEsT0FBTyxFQUFFLEtBYmM7QUFjdkJDLEVBQUFBLE1BQU0sRUFBRSxLQWRlO0FBZXZCQyxFQUFBQSxLQUFLLEVBQUUsS0FmZ0I7QUFnQnZCQyxFQUFBQSxRQUFRLEVBQUUsS0FoQmE7QUFpQnZCRyxFQUFBQSxJQUFJLEVBQUUsSUFqQmlCO0FBa0J2QkUsRUFBQUEsSUFBSSxFQUFFO0FBbEJpQixDQUF6QjtBQXFCQXhDLFNBQVMsQ0FBQ3dELFdBQVYsR0FBd0IsV0FBeEI7QUFFQSxlQUFleEQsU0FBZiIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuaW1wb3J0IGMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVubGVzc1Byb2R1Y3Rpb24gfSBmcm9tICd0aGUtY2hlY2snXG5pbXBvcnQgeyB0ZXh0Q29sb3JGb3IgfSBmcm9tICd0aGUtY29sb3InXG5pbXBvcnQgeyBldmVudEhhbmRsZXJzRm9yLCBodG1sQXR0cmlidXRlc0ZvciB9IGZyb20gJ3RoZS1jb21wb25lbnQtdXRpbCdcbmltcG9ydCB7IFRoZUljb24gfSBmcm9tICd0aGUtaWNvbidcbmltcG9ydCB7IFRoZUxpbmsgfSBmcm9tICd0aGUtbGluaydcbmltcG9ydCBUaGVCdXR0b25Hcm91cCBmcm9tICcuL1RoZUJ1dHRvbkdyb3VwJ1xuXG4vKipcbiAqIEJ1dHRvbiBvZiB0aGUtY29tcG9uZW50c1xuICovXG5jbGFzcyBUaGVCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgTmV4dChwcm9wcykge1xuICAgIHJldHVybiA8VGhlQnV0dG9uIGljb25SaWdodD17VGhlQnV0dG9uLk5FWFRfSUNPTn0gey4uLnByb3BzfSAvPlxuICB9XG5cbiAgc3RhdGljIFByZXYocHJvcHMpIHtcbiAgICByZXR1cm4gPFRoZUJ1dHRvbiBpY29uPXtUaGVCdXR0b24uUFJFVl9JQ09OfSB7Li4ucHJvcHN9IC8+XG4gIH1cblxuICBzdGF0aWMgU3Bpbm5lcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4gY2xhc3NOYW1lPSd0aGUtYnV0dG9uLXNwaW5uZXInPlxuICAgICAgICA8VGhlSWNvbi5TcGluIGNsYXNzTmFtZT0ndGhlLWJ1dHRvbi1zcGlubmVyLWljb24nIC8+XG4gICAgICA8L3NwYW4+XG4gICAgKVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLmhhbmRsZUtleURvd24gPSB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKVxuICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcylcbiAgICB0aGlzLmxhc3RDbGlja2VkQXQgPSBudWxsXG4gIH1cblxuICBoYW5kbGVDbGljayhlKSB7XG4gICAgY29uc3QgeyBtaW5JbnRlcnZhbCwgb25DbGljaywgb25TdWJtaXQgfSA9IHRoaXMucHJvcHNcbiAgICBpZiAodGhpcy5sYXN0Q2xpY2tlZEF0KSB7XG4gICAgICBjb25zdCBzaW5jZUxhc3QgPSBuZXcgRGF0ZSgpIC0gdGhpcy5sYXN0Q2xpY2tlZEF0XG4gICAgICBjb25zdCB0b29Tb29uID0gc2luY2VMYXN0IDwgbWluSW50ZXJ2YWxcbiAgICAgIGlmICh0b29Tb29uKSB7XG4gICAgICAgIHVubGVzc1Byb2R1Y3Rpb24oKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBbVGhlQnV0dG9uXSBQcmV2ZW50IGRvdWJsZSBjbGljayAoIG1pbkludGVydmFsOiAke21pbkludGVydmFsfW1zLCBhY3R1YWw6ICR7c2luY2VMYXN0fW1zIClgLFxuICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICAgIG9uQ2xpY2sgJiYgb25DbGljayhlKVxuICAgIG9uU3VibWl0ICYmIG9uU3VibWl0KClcbiAgICB0aGlzLmxhc3RDbGlja2VkQXQgPSBuZXcgRGF0ZSgpXG4gIH1cblxuICBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICBjb25zdCB7IG9uQ2xpY2ssIG9uS2V5RG93biwgb25TdWJtaXQgfSA9IHRoaXMucHJvcHNcbiAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgY2FzZSAzMjogLy8gU3BhY2Uga2V5XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdCgpXG4gICAgICAgIG9uQ2xpY2sgJiYgb25DbGljaygpXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBvbktleURvd24gJiYgb25LZXlEb3duKGUpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpc1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IsXG4gICAgICBkYW5nZXIsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGZsb2F0ZWQsXG4gICAgICBpY29uLFxuICAgICAgaWNvblJpZ2h0LFxuICAgICAgbGFyZ2UsXG4gICAgICBsYXJnZUljb24sXG4gICAgICBsaWdodCxcbiAgICAgIHByaW1hcnksXG4gICAgICByb3VuZGVkLFxuICAgICAgc2ltcGxlLFxuICAgICAgc21hbGwsXG4gICAgICBzcGlubmluZyxcbiAgICAgIHN0eWxlID0ge30sXG4gICAgICB0YXJnZXQsXG4gICAgICB0ZXh0LFxuICAgICAgdG8sXG4gICAgICB3aWRlLFxuICAgIH0gPSBwcm9wc1xuICAgIGNvbnN0IEEgPSB0byA/IFRoZUxpbmsgOiAnYSdcblxuICAgIGNvbnN0IGFwcGx5Q29sb3IgPSBjb2xvciAmJiAhZGFuZ2VyICYmICFkaXNhYmxlZFxuICAgIGlmIChhcHBseUNvbG9yICYmIHN0eWxlKSB7XG4gICAgICBzdHlsZS5ib3JkZXJDb2xvciA9IGNvbG9yXG4gICAgICBpZiAocHJpbWFyeSkge1xuICAgICAgICBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvclxuICAgICAgICBzdHlsZS5jb2xvciA9IHRleHRDb2xvckZvcihjb2xvcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlLmNvbG9yID0gY29sb3JcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxBXG4gICAgICAgIHsuLi5odG1sQXR0cmlidXRlc0Zvcihwcm9wcywge1xuICAgICAgICAgIGV4Y2VwdDogWydjbGFzc05hbWUnLCAnc3R5bGUnLCAnaWNvbicsICd0bycsICdjb2xvcicsICdpY29uUmlnaHQnXSxcbiAgICAgICAgfSl9XG4gICAgICAgIHsuLi5ldmVudEhhbmRsZXJzRm9yKHByb3BzLCB7IGV4Y2VwdDogWydvbkNsaWNrJ10gfSl9XG4gICAgICAgIGFyaWEtYnVzeT17c3Bpbm5pbmd9XG4gICAgICAgIGNsYXNzTmFtZT17YygndGhlLWJ1dHRvbicsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICd0aGUtYnV0dG9uLWRhbmdlcic6IGRhbmdlcixcbiAgICAgICAgICAndGhlLWJ1dHRvbi1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgICAgICAgICd0aGUtYnV0dG9uLWZsb2F0ZWQnOiBmbG9hdGVkLFxuICAgICAgICAgICd0aGUtYnV0dG9uLWxhcmdlJzogbGFyZ2UsXG4gICAgICAgICAgJ3RoZS1idXR0b24tbGlnaHQnOiBsaWdodCxcbiAgICAgICAgICAndGhlLWJ1dHRvbi1wcmltYXJ5JzogcHJpbWFyeSxcbiAgICAgICAgICAndGhlLWJ1dHRvbi1yb3VuZGVkJzogcm91bmRlZCxcbiAgICAgICAgICAndGhlLWJ1dHRvbi1zaW1wbGUnOiBzaW1wbGUsXG4gICAgICAgICAgJ3RoZS1idXR0b24tc21hbGwnOiBzbWFsbCxcbiAgICAgICAgICAndGhlLWJ1dHRvbi1zcGlubmluZyc6IHNwaW5uaW5nLFxuICAgICAgICAgICd0aGUtYnV0dG9uLXZlcnRpY2FsJzogISFsYXJnZUljb24sXG4gICAgICAgICAgJ3RoZS1idXR0b24td2lkZSc6IHdpZGUsXG4gICAgICAgIH0pfVxuICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfVxuICAgICAgICB7Li4ueyBzdHlsZSwgdGFyZ2V0LCB0byB9fVxuICAgICAgICBocmVmPXsoIXRvICYmIHByb3BzLmhyZWYpIHx8ICdqYXZhc2NyaXB0OnZvaWQoMCknfVxuICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn1cbiAgICAgID5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSd0aGUtYnV0dG9uLWlubmVyJz5cbiAgICAgICAgICB7c3Bpbm5pbmcgJiYgPFRoZUJ1dHRvbi5TcGlubmVyIC8+fVxuICAgICAgICAgIHtsYXJnZUljb24gJiYgKFxuICAgICAgICAgICAgPFRoZUljb24gY2xhc3NOYW1lPXtjKCd0aGUtYnV0dG9uLWxhcmdlLWljb24nLCBsYXJnZUljb24pfSAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2ljb24gJiYgPFRoZUljb24gY2xhc3NOYW1lPXtjKCd0aGUtYnV0dG9uLWljb24nLCBpY29uKX0gLz59XG4gICAgICAgICAge3RleHQgJiYgPHNwYW4gY2xhc3NOYW1lPXtjKCd0aGUtYnV0dG9uLXRleHQnKX0+e3RleHR9PC9zcGFuPn1cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAge2ljb25SaWdodCAmJiAoXG4gICAgICAgICAgICA8VGhlSWNvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2MoXG4gICAgICAgICAgICAgICAgJ3RoZS1idXR0b24taWNvbicsXG4gICAgICAgICAgICAgICAgJ3RoZS1idXR0b24taWNvbi1yaWdodCcsXG4gICAgICAgICAgICAgICAgaWNvblJpZ2h0LFxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L0E+XG4gICAgKVxuICB9XG59XG5cblRoZUJ1dHRvbi5Hcm91cCA9IFRoZUJ1dHRvbkdyb3VwXG5UaGVCdXR0b24uUFJFVl9JQ09OID0gJ2ZhcyBmYS1jYXJldC1sZWZ0J1xuVGhlQnV0dG9uLk5FWFRfSUNPTiA9ICdmYXMgZmEtY2FyZXQtcmlnaHQnXG5cblRoZUJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKiBDb2xvciB0aGVtZSAqL1xuICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIERhbmdlciBzdHlsZSAqL1xuICBkYW5nZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKiogRGlzYWJsZWQgc3RhdGUgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKiogRmxvYXRlZCBzdHlsZSAqL1xuICBmbG9hdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIEljb24gY2xhc3MgKi9cbiAgaWNvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIExhcmdlIHN0eWxlICovXG4gIGxhcmdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIExhcmdlIGljb24gY2xhc3MgKi9cbiAgbGFyZ2VJY29uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogTGlnaHQgY29sb3IgKi9cbiAgbGlnaHQ6IFByb3BUeXBlcy5ib29sLFxuICAvKiogTWluaW11bSBpbnRlcnZhbCAqL1xuICBtaW5JbnRlcnZhbDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqIEhhbmRsZSBzdWJtaXQgKi9cbiAgb25TdWJtaXQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKiogUHJpbWFyeSBzdHlsZSAqL1xuICBwcmltYXJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIFJvdW5kZWQgc3R5bGUgKi9cbiAgcm91bmRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKiBTaW1wbGUgc3R5bGUgKi9cbiAgc2ltcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIFNtYWxsIHN0eWxlICovXG4gIHNtYWxsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqIFNob3cgc3Bpbm5lciAqL1xuICBzcGlubmluZzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKiBCdXR0b24gdGV4dCAqL1xuICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogV2lkZSBzdHlsZSAqL1xuICB3aWRlOiBQcm9wVHlwZXMuYm9vbCxcbn1cblxuVGhlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6IG51bGwsXG4gIGRhbmdlcjogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgZmxvYXRlZDogZmFsc2UsXG4gIGljb246IG51bGwsXG4gIGxhcmdlOiBmYWxzZSxcbiAgbGFyZ2VJY29uOiBudWxsLFxuICBsaWdodDogZmFsc2UsXG4gIG1pbkludGVydmFsOiAzMDAsXG4gIG9uU3VibWl0OiBudWxsLFxuICBwcmltYXJ5OiBmYWxzZSxcbiAgcm9sZTogJ2J1dHRvbicsXG4gIHJvdW5kZWQ6IGZhbHNlLFxuICBzaW1wbGU6IGZhbHNlLFxuICBzbWFsbDogZmFsc2UsXG4gIHNwaW5uaW5nOiBmYWxzZSxcbiAgdGV4dDogbnVsbCxcbiAgd2lkZTogZmFsc2UsXG59XG5cblRoZUJ1dHRvbi5kaXNwbGF5TmFtZSA9ICdUaGVCdXR0b24nXG5cbmV4cG9ydCBkZWZhdWx0IFRoZUJ1dHRvblxuIl19