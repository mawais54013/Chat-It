{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar PeerGraph = function () {\n  function PeerGraph() {\n    _classCallCheck(this, PeerGraph);\n\n    this.nodes = {};\n    this.edges = {};\n    this.edgeCount = 0;\n  }\n\n  _createClass(PeerGraph, [{\n    key: \"addEdge\",\n    value: function addEdge(edge) {\n      var node1 = this.getNodeById(edge.node1.getId());\n      var node2 = this.getNodeById(edge.node2.getId());\n\n      if (!node1) {\n        this.addNode(edge.node1);\n        node1 = this.getNodeById(edge.node1.getId());\n      }\n\n      if (!node2) {\n        this.addNode(edge.node2);\n        node2 = this.getNodeById(edge.node2.getId());\n      }\n\n      if (this.edges[edge.getId()]) {// throw new Error('Edge already exists');\n      } else {\n        this.edges[edge.getId()] = edge;\n      } // Add edge to both node instances because it's an undirected graph\n\n\n      node1.addEdge(edge);\n      node2.addEdge(edge);\n      return this;\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(newNode) {\n      this.nodes[newNode.getId()] = newNode;\n      return this;\n    }\n  }, {\n    key: \"getNodeById\",\n    value: function getNodeById(id) {\n      return this.nodes[id];\n    }\n  }, {\n    key: \"getNeighbors\",\n    value: function getNeighbors(node) {\n      return node.getNeighbors();\n    }\n  }, {\n    key: \"getWeight\",\n    value: function getWeight() {\n      return this.getAllEdges().reduce(function (weight, edge) {\n        return weight + edge.weight;\n      }, 0);\n    }\n  }, {\n    key: \"getAllNodes\",\n    value: function getAllNodes() {\n      return Object.values(this.nodes);\n    }\n  }, {\n    key: \"getAllEdges\",\n    value: function getAllEdges() {\n      return Object.values(this.edges);\n    }\n  }, {\n    key: \"findNodeById\",\n    value: function findNodeById(nodeId) {\n      if (this.nodes[nodeId]) {\n        return this.nodes[nodeId];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findEdge\",\n    value: function findEdge(node1, node2) {\n      var node = this.getNodeById(node1.getId());\n\n      if (!node) {\n        return null;\n      }\n\n      return node.findEdge(node2);\n    }\n  }, {\n    key: \"deleteEdge\",\n    value: function deleteEdge(edge) {\n      if (!edge) {\n        return;\n      }\n\n      if (this.edges[edge.getId()]) {\n        delete this.edges[edge.getId()];\n      }\n\n      var node1 = this.getNodeById(edge.node1.getId());\n      var node2 = this.getNodeById(edge.node2.getId());\n      node1.deleteEdge(edge);\n      node2.deleteEdge(edge);\n    }\n  }, {\n    key: \"getNodeIndices\",\n    value: function getNodeIndices() {\n      var nodeIndices = {};\n      this.getAllNodes().forEach(function (node, index) {\n        nodeIndices[node.getId()] = index;\n      });\n      return nodeIndices;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return Object.keys(this.nodes).toString();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {}\n  }]);\n\n  return PeerGraph;\n}();\n\nexports.default = PeerGraph;","map":null,"metadata":{},"sourceType":"script"}