{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport { cleanup } from 'asobj';\nimport c from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { TheButton } from 'the-button';\nimport { isProduction } from 'the-check';\nimport { changedProps, eventHandlersFor, htmlAttributesFor, newId } from 'the-component-util';\nimport { TheIcon } from 'the-icon';\nimport { TheSpin } from 'the-spin';\nimport { get } from 'the-window';\nimport setupVideoElm from './helpers/setupVideoElm';\nimport TheTalkStyle from './TheTalkStyle';\n\nvar cssAmount = function cssAmount(v) {\n  return typeof v === 'number' ? v + 'px' : v;\n};\n/**\n * Talking via webrtc\n */\n\n\nvar TheTalk =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TheTalk, _React$Component);\n\n  _createClass(TheTalk, null, [{\n    key: \"DisabledIcon\",\n    value: function DisabledIcon(_ref) {\n      var present = _ref.present;\n\n      if (!present) {\n        return null;\n      }\n\n      return React.createElement(TheIcon, {\n        className: c('the-talk-disabled-icon', TheTalk.DISABLED_ICON)\n      });\n    }\n  }, {\n    key: \"LocalClient\",\n    value: function LocalClient(_ref2) {\n      var client = _ref2.client,\n          id = _ref2.id,\n          onAudioToggle = _ref2.onAudioToggle,\n          onVideoToggle = _ref2.onVideoToggle,\n          renderClient = _ref2.renderClient,\n          videoHeight = _ref2.videoHeight;\n\n      if (!client) {\n        return null;\n      }\n\n      var audioEnabled = client.audioEnabled,\n          videoEnabled = client.videoEnabled;\n      var content = renderClient(client);\n      return React.createElement(\"div\", {\n        className: \"the-talk-local\",\n        id: id\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        className: \"the-talk-video\",\n        muted: true,\n        playsInline: true,\n        style: {\n          height: videoHeight\n        }\n      }), content && React.createElement(\"div\", {\n        className: \"the-talk-content\"\n      }, content), React.createElement(\"div\", {\n        className: c('the-talk-actions', {})\n      }, React.createElement(TheButton, {\n        className: c('the-talk-toggle', {\n          'the-talk-toggle-disabled': !audioEnabled\n        }),\n        icon: TheTalk.AUDIO_ICON,\n        onClick: onAudioToggle\n      }, React.createElement(TheTalk.DisabledIcon, {\n        present: !audioEnabled\n      })), React.createElement(TheButton, {\n        className: c('the-talk-toggle', {\n          'the-talk-toggle-disabled': !videoEnabled\n        }),\n        icon: TheTalk.VIDEO_ICON,\n        onClick: onVideoToggle\n      }, React.createElement(TheTalk.DisabledIcon, {\n        present: !videoEnabled\n      }))));\n    }\n  }, {\n    key: \"RemoteClient\",\n    value: function RemoteClient(_ref3) {\n      var client = _ref3.client,\n          id = _ref3.id,\n          renderClient = _ref3.renderClient,\n          videoHeight = _ref3.videoHeight;\n\n      if (!client) {\n        return null;\n      }\n\n      var content = renderClient(client);\n      return React.createElement(\"div\", {\n        className: \"the-talk-remote\",\n        id: id\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        className: \"the-talk-video\",\n        playsInline: true,\n        style: {\n          height: videoHeight\n        }\n      }), content && React.createElement(\"div\", {\n        className: \"the-talk-content\"\n      }, content));\n    }\n  }]);\n\n  function TheTalk(props) {\n    var _this;\n\n    _classCallCheck(this, TheTalk);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TheTalk).call(this, props));\n    _this.handleAudioToggle = _this.handleAudioToggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleVideoToggle = _this.handleVideoToggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.elmRef = React.createRef();\n    _this._id = newId();\n    return _this;\n  }\n\n  _createClass(TheTalk, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var diff = changedProps(prevProps, this.props);\n\n      if ('localClient' in diff) {\n        void this.receiveLocalClient(diff.localClient);\n      }\n\n      if ('remoteClients' in diff) {\n        void this.receiveRemoteClients(diff.remoteClients);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"handleAudioToggle\",\n    value: function handleAudioToggle() {\n      var _this$props = this.props,\n          localClient = _this$props.localClient,\n          onToggleAudio = _this$props.onToggleAudio;\n\n      var _ref4 = localClient || {},\n          audioEnabled = _ref4.audioEnabled;\n\n      onToggleAudio && onToggleAudio(!audioEnabled);\n    }\n  }, {\n    key: \"handleVideoToggle\",\n    value: function handleVideoToggle() {\n      var _this$props2 = this.props,\n          localClient = _this$props2.localClient,\n          onToggleVideo = _this$props2.onToggleVideo;\n\n      var _ref5 = localClient || {},\n          videoEnabled = _ref5.videoEnabled;\n\n      onToggleVideo && onToggleVideo(!videoEnabled);\n    }\n  }, {\n    key: \"remoteClientElmIdFor\",\n    value: function remoteClientElmIdFor(rid) {\n      return \"\".concat(this.id, \"-remote-\").concat(rid);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      var children = props.children,\n          className = props.className,\n          localClient = props.localClient,\n          localVideoHeight = props.localVideoHeight,\n          remoteClients = props.remoteClients,\n          remoteVideoHeight = props.remoteVideoHeight,\n          renderLocalClient = props.renderLocalClient,\n          renderRemoteClient = props.renderRemoteClient,\n          spinning = props.spinning;\n      return React.createElement(\"div\", _extends({}, htmlAttributesFor(props, {\n        except: ['className']\n      }), eventHandlersFor(props, {\n        except: []\n      }), {\n        className: c('the-talk', className, {\n          'the-talk-ready': !!localClient\n        }),\n        id: this.id,\n        ref: this.elmRef\n      }), spinning && React.createElement(TheSpin, {\n        cover: true,\n        enabled: true\n      }), React.createElement(\"div\", {\n        className: \"the-talk-video-remote-container\"\n      }, Object.entries(remoteClients).map(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n            rid = _ref7[0],\n            client = _ref7[1];\n\n        return React.createElement(TheTalk.RemoteClient, {\n          client: client,\n          id: _this2.remoteClientElmIdFor(rid),\n          key: rid,\n          renderClient: renderRemoteClient,\n          videoHeight: cssAmount(remoteVideoHeight)\n        });\n      })), React.createElement(\"div\", {\n        className: \"the-talk-video-local-container\"\n      }, React.createElement(TheTalk.LocalClient, {\n        client: localClient,\n        id: this.localClientElmId,\n        onAudioToggle: this.handleAudioToggle,\n        onVideoToggle: this.handleVideoToggle,\n        renderClient: renderLocalClient,\n        videoHeight: cssAmount(localVideoHeight)\n      })), children);\n    }\n  }, {\n    key: \"receiveLocalClient\",\n    value: function () {\n      var _receiveLocalClient = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(localClient) {\n        var document, clientElm, videoElm;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                document = get('document');\n                clientElm = document.getElementById(this.localClientElmId);\n\n                if (clientElm) {\n                  _context.next = 5;\n                  break;\n                }\n\n                console.warn('[TheTalk] local clientElm not ready');\n                return _context.abrupt(\"return\");\n\n              case 5:\n                videoElm = clientElm.querySelector('video');\n                _context.next = 8;\n                return setupVideoElm(videoElm, {\n                  local: true,\n                  stream: localClient.stream\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function receiveLocalClient(_x) {\n        return _receiveLocalClient.apply(this, arguments);\n      }\n\n      return receiveLocalClient;\n    }()\n  }, {\n    key: \"receiveRemoteClients\",\n    value: function () {\n      var _receiveRemoteClients = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(remoteClients) {\n        var document, _arr, _i, _arr$_i, rid, client, clientElm, videoElm;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                document = get('document');\n                _arr = Object.entries(remoteClients);\n                _i = 0;\n\n              case 3:\n                if (!(_i < _arr.length)) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                _arr$_i = _slicedToArray(_arr[_i], 2), rid = _arr$_i[0], client = _arr$_i[1];\n                clientElm = document.getElementById(this.remoteClientElmIdFor(rid));\n\n                if (clientElm) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                console.warn('[TheTalk] remote clientElm not ready');\n                return _context2.abrupt(\"return\");\n\n              case 9:\n                videoElm = clientElm.querySelector('video');\n                _context2.next = 12;\n                return setupVideoElm(videoElm, {\n                  local: false,\n                  stream: client.stream\n                });\n\n              case 12:\n                _i++;\n                _context2.next = 3;\n                break;\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function receiveRemoteClients(_x2) {\n        return _receiveRemoteClients.apply(this, arguments);\n      }\n\n      return receiveRemoteClients;\n    }()\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.props.id || this._id;\n    }\n  }, {\n    key: \"localClientElmId\",\n    get: function get() {\n      return \"\".concat(this.id, \"-local\");\n    }\n  }]);\n\n  return TheTalk;\n}(React.Component);\n\nTheTalk.AUDIO_ICON = 'fas fa-microphone';\nTheTalk.VIDEO_ICON = 'fas fa-video';\nTheTalk.DISABLED_ICON = 'fas fa-ban';\nTheTalk.Style = TheTalkStyle;\nTheTalk.propTypes = {\n  /** Handle video */\n  localClient: PropTypes.object,\n  onVideo: PropTypes.func,\n  remoteClients: PropTypes.objectOf(PropTypes.object),\n  renderLocalClient: PropTypes.func,\n  renderRemoteClient: PropTypes.func,\n\n  /** Height of video */\n  videoHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nTheTalk.defaultProps = {\n  localClient: null,\n  localVideoHeight: 100,\n  remoteClients: {},\n  remoteVideoHeight: 200,\n  renderLocalClient: function renderLocalClient() {\n    return null;\n  },\n  renderRemoteClient: function renderRemoteClient() {\n    return null;\n  }\n};\nTheTalk.displayName = 'TheTalk';\nexport default TheTalk;","map":null,"metadata":{},"sourceType":"module"}