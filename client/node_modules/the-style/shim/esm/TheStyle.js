'use strict';

import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import c from 'classnames';
import { EOL } from 'os';
import PropTypes from 'prop-types';
import React from 'react';
import { ThemeValues } from 'the-component-constants';
import { styleString as _styleString } from 'the-style-util';
/**
 * Style of the-components
 */

var TheStyle =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(TheStyle, _React$PureComponent);

  function TheStyle() {
    _classCallCheck(this, TheStyle);

    return _possibleConstructorReturn(this, _getPrototypeOf(TheStyle).apply(this, arguments));
  }

  _createClass(TheStyle, [{
    key: "getChildrenAsString",
    value: function getChildrenAsString() {
      var children = this.props.children;

      if (!children) {
        return null;
      }

      return [].concat(children).map(function (child) {
        return child;
      }).join(EOL);
    }
  }, {
    key: "getInnerHTML",
    value: function getInnerHTML() {
      return [this.getStylesAsString(), this.getChildrenAsString()].filter(Boolean).join(EOL);
    }
  }, {
    key: "getStylesAsString",
    value: function getStylesAsString() {
      var _this$props = this.props,
          prefix = _this$props.prefix,
          styles = _this$props.styles;

      if (!styles) {
        return null;
      }

      return Object.keys(styles).map(function (selector) {
        return _styleString([prefix, selector].filter(Boolean).join(' '), styles[selector]);
      }).filter(Boolean).join(EOL);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className,
          id = props.id,
          type = props.type;
      return React.createElement("style", _extends({
        className: c('the-style', className)
      }, {
        id: id,
        type: type
      }, {
        dangerouslySetInnerHTML: {
          __html: this.getInnerHTML()
        }
      }));
    }
  }], [{
    key: "styles",
    value: function styles(values) {
      return Object(values);
    }
    /** @deprecated */

  }, {
    key: "styleString",
    value: function styleString() {
      console.warn("[TheStyle] TheStyle.styleString is now deprecated");
      return _styleString.apply(void 0, arguments);
    }
    /** @deprecated */

  }, {
    key: "styleStringFromStyles",
    value: function styleStringFromStyles(styles) {
      return _styleString.fromStyles(styles);
    }
  }]);

  return TheStyle;
}(React.PureComponent);

TheStyle.propTypes = {
  /** CSS class name */
  className: PropTypes.string,

  /** DOM Id */
  id: PropTypes.string,

  /** Style selector prefix */
  prefix: PropTypes.string,

  /** Script type */
  type: PropTypes.string
};
TheStyle.defaultProps = {
  className: null,
  id: null,
  prefix: null,
  type: null
};
TheStyle.displayName = 'TheStyle';
TheStyle.ThemeValues = ThemeValues;
export default TheStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZVN0eWxlLmpzIl0sIm5hbWVzIjpbImMiLCJFT0wiLCJQcm9wVHlwZXMiLCJSZWFjdCIsIlRoZW1lVmFsdWVzIiwic3R5bGVTdHJpbmciLCJUaGVTdHlsZSIsImNoaWxkcmVuIiwicHJvcHMiLCJjb25jYXQiLCJtYXAiLCJjaGlsZCIsImpvaW4iLCJnZXRTdHlsZXNBc1N0cmluZyIsImdldENoaWxkcmVuQXNTdHJpbmciLCJmaWx0ZXIiLCJCb29sZWFuIiwicHJlZml4Iiwic3R5bGVzIiwiT2JqZWN0Iiwia2V5cyIsInNlbGVjdG9yIiwiY2xhc3NOYW1lIiwiaWQiLCJ0eXBlIiwiX19odG1sIiwiZ2V0SW5uZXJIVE1MIiwidmFsdWVzIiwiY29uc29sZSIsIndhcm4iLCJhcmd1bWVudHMiLCJmcm9tU3R5bGVzIiwiUHVyZUNvbXBvbmVudCIsInByb3BUeXBlcyIsInN0cmluZyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQSxPQUFPQSxDQUFQLE1BQWMsWUFBZDtBQUNBLFNBQVNDLEdBQVQsUUFBb0IsSUFBcEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQVNDLFdBQVQsUUFBNEIseUJBQTVCO0FBQ0EsU0FBU0MsV0FBVyxJQUFYQSxZQUFULFFBQTRCLGdCQUE1QjtBQUVBOzs7O0lBR01DLFE7Ozs7Ozs7Ozs7Ozs7MENBZ0JrQjtBQUFBLFVBQ1pDLFFBRFksR0FDQyxLQUFLQyxLQUROLENBQ1pELFFBRFk7O0FBRXBCLFVBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ2IsZUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsYUFBTyxHQUNKRSxNQURJLENBQ0dGLFFBREgsRUFFSkcsR0FGSSxDQUVBLFVBQUNDLEtBQUQsRUFBVztBQUNkLGVBQU9BLEtBQVA7QUFDRCxPQUpJLEVBS0pDLElBTEksQ0FLQ1gsR0FMRCxDQUFQO0FBTUQ7OzttQ0FFYztBQUNiLGFBQU8sQ0FBQyxLQUFLWSxpQkFBTCxFQUFELEVBQTJCLEtBQUtDLG1CQUFMLEVBQTNCLEVBQ0pDLE1BREksQ0FDR0MsT0FESCxFQUVKSixJQUZJLENBRUNYLEdBRkQsQ0FBUDtBQUdEOzs7d0NBRW1CO0FBQUEsd0JBQ1MsS0FBS08sS0FEZDtBQUFBLFVBQ1ZTLE1BRFUsZUFDVkEsTUFEVTtBQUFBLFVBQ0ZDLE1BREUsZUFDRkEsTUFERTs7QUFFbEIsVUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDWCxlQUFPLElBQVA7QUFDRDs7QUFDRCxhQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWUYsTUFBWixFQUNKUixHQURJLENBQ0EsVUFBQ1csUUFBRDtBQUFBLGVBQ0hoQixZQUFXLENBQ1QsQ0FBQ1ksTUFBRCxFQUFTSSxRQUFULEVBQW1CTixNQUFuQixDQUEwQkMsT0FBMUIsRUFBbUNKLElBQW5DLENBQXdDLEdBQXhDLENBRFMsRUFFVE0sTUFBTSxDQUFDRyxRQUFELENBRkcsQ0FEUjtBQUFBLE9BREEsRUFPSk4sTUFQSSxDQU9HQyxPQVBILEVBUUpKLElBUkksQ0FRQ1gsR0FSRCxDQUFQO0FBU0Q7Ozs2QkFFUTtBQUFBLFVBQ0NPLEtBREQsR0FDVyxJQURYLENBQ0NBLEtBREQ7QUFBQSxVQUVDYyxTQUZELEdBRXlCZCxLQUZ6QixDQUVDYyxTQUZEO0FBQUEsVUFFWUMsRUFGWixHQUV5QmYsS0FGekIsQ0FFWWUsRUFGWjtBQUFBLFVBRWdCQyxJQUZoQixHQUV5QmhCLEtBRnpCLENBRWdCZ0IsSUFGaEI7QUFHUCxhQUNFO0FBQ0UsUUFBQSxTQUFTLEVBQUV4QixDQUFDLENBQUMsV0FBRCxFQUFjc0IsU0FBZDtBQURkLFNBRU07QUFBRUMsUUFBQUEsRUFBRSxFQUFGQSxFQUFGO0FBQU1DLFFBQUFBLElBQUksRUFBSkE7QUFBTixPQUZOO0FBR0UsUUFBQSx1QkFBdUIsRUFBRTtBQUFFQyxVQUFBQSxNQUFNLEVBQUUsS0FBS0MsWUFBTDtBQUFWO0FBSDNCLFNBREY7QUFPRDs7OzJCQTVEYUMsTSxFQUFRO0FBQ3BCLGFBQU9SLE1BQU0sQ0FBQ1EsTUFBRCxDQUFiO0FBQ0Q7QUFFRDs7OztrQ0FDcUI7QUFDbkJDLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUjtBQUNBLGFBQU94QixZQUFXLE1BQVgsU0FBZXlCLFNBQWYsQ0FBUDtBQUNEO0FBRUQ7Ozs7MENBQzZCWixNLEVBQVE7QUFDbkMsYUFBT2IsWUFBVyxDQUFDMEIsVUFBWixDQUF1QmIsTUFBdkIsQ0FBUDtBQUNEOzs7O0VBZG9CZixLQUFLLENBQUM2QixhOztBQWdFN0IxQixRQUFRLENBQUMyQixTQUFULEdBQXFCO0FBQ25CO0FBQ0FYLEVBQUFBLFNBQVMsRUFBRXBCLFNBQVMsQ0FBQ2dDLE1BRkY7O0FBR25CO0FBQ0FYLEVBQUFBLEVBQUUsRUFBRXJCLFNBQVMsQ0FBQ2dDLE1BSks7O0FBS25CO0FBQ0FqQixFQUFBQSxNQUFNLEVBQUVmLFNBQVMsQ0FBQ2dDLE1BTkM7O0FBT25CO0FBQ0FWLEVBQUFBLElBQUksRUFBRXRCLFNBQVMsQ0FBQ2dDO0FBUkcsQ0FBckI7QUFXQTVCLFFBQVEsQ0FBQzZCLFlBQVQsR0FBd0I7QUFDdEJiLEVBQUFBLFNBQVMsRUFBRSxJQURXO0FBRXRCQyxFQUFBQSxFQUFFLEVBQUUsSUFGa0I7QUFHdEJOLEVBQUFBLE1BQU0sRUFBRSxJQUhjO0FBSXRCTyxFQUFBQSxJQUFJLEVBQUU7QUFKZ0IsQ0FBeEI7QUFPQWxCLFFBQVEsQ0FBQzhCLFdBQVQsR0FBdUIsVUFBdkI7QUFFQTlCLFFBQVEsQ0FBQ0YsV0FBVCxHQUF1QkEsV0FBdkI7QUFFQSxlQUFlRSxRQUFmIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgYyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBUaGVtZVZhbHVlcyB9IGZyb20gJ3RoZS1jb21wb25lbnQtY29uc3RhbnRzJ1xuaW1wb3J0IHsgc3R5bGVTdHJpbmcgfSBmcm9tICd0aGUtc3R5bGUtdXRpbCdcblxuLyoqXG4gKiBTdHlsZSBvZiB0aGUtY29tcG9uZW50c1xuICovXG5jbGFzcyBUaGVTdHlsZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgc3R5bGVzKHZhbHVlcykge1xuICAgIHJldHVybiBPYmplY3QodmFsdWVzKVxuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIHN0YXRpYyBzdHlsZVN0cmluZygpIHtcbiAgICBjb25zb2xlLndhcm4oYFtUaGVTdHlsZV0gVGhlU3R5bGUuc3R5bGVTdHJpbmcgaXMgbm93IGRlcHJlY2F0ZWRgKVxuICAgIHJldHVybiBzdHlsZVN0cmluZyguLi5hcmd1bWVudHMpXG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgc3RhdGljIHN0eWxlU3RyaW5nRnJvbVN0eWxlcyhzdHlsZXMpIHtcbiAgICByZXR1cm4gc3R5bGVTdHJpbmcuZnJvbVN0eWxlcyhzdHlsZXMpXG4gIH1cblxuICBnZXRDaGlsZHJlbkFzU3RyaW5nKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gW11cbiAgICAgIC5jb25jYXQoY2hpbGRyZW4pXG4gICAgICAubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH0pXG4gICAgICAuam9pbihFT0wpXG4gIH1cblxuICBnZXRJbm5lckhUTUwoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmdldFN0eWxlc0FzU3RyaW5nKCksIHRoaXMuZ2V0Q2hpbGRyZW5Bc1N0cmluZygpXVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLmpvaW4oRU9MKVxuICB9XG5cbiAgZ2V0U3R5bGVzQXNTdHJpbmcoKSB7XG4gICAgY29uc3QgeyBwcmVmaXgsIHN0eWxlcyB9ID0gdGhpcy5wcm9wc1xuICAgIGlmICghc3R5bGVzKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVzKVxuICAgICAgLm1hcCgoc2VsZWN0b3IpID0+XG4gICAgICAgIHN0eWxlU3RyaW5nKFxuICAgICAgICAgIFtwcmVmaXgsIHNlbGVjdG9yXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpLFxuICAgICAgICAgIHN0eWxlc1tzZWxlY3Rvcl0sXG4gICAgICAgICksXG4gICAgICApXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAuam9pbihFT0wpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpc1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBpZCwgdHlwZSB9ID0gcHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPHN0eWxlXG4gICAgICAgIGNsYXNzTmFtZT17YygndGhlLXN0eWxlJywgY2xhc3NOYW1lKX1cbiAgICAgICAgey4uLnsgaWQsIHR5cGUgfX1cbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmdldElubmVySFRNTCgpIH19XG4gICAgICAvPlxuICAgIClcbiAgfVxufVxuXG5UaGVTdHlsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKiBDU1MgY2xhc3MgbmFtZSAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBET00gSWQgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBTdHlsZSBzZWxlY3RvciBwcmVmaXggKi9cbiAgcHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKiogU2NyaXB0IHR5cGUgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbn1cblxuVGhlU3R5bGUuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6IG51bGwsXG4gIGlkOiBudWxsLFxuICBwcmVmaXg6IG51bGwsXG4gIHR5cGU6IG51bGwsXG59XG5cblRoZVN0eWxlLmRpc3BsYXlOYW1lID0gJ1RoZVN0eWxlJ1xuXG5UaGVTdHlsZS5UaGVtZVZhbHVlcyA9IFRoZW1lVmFsdWVzXG5cbmV4cG9ydCBkZWZhdWx0IFRoZVN0eWxlXG4iXX0=